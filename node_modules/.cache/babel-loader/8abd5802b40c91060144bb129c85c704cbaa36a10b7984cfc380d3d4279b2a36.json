{"ast":null,"code":"var _jsxFileName = \"/Users/solomonrojer/Desktop/Patrick/Project/mini-project/src/component/TimeZonePicker.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Select from 'react-select';\nimport cityTimeZoneMap from './cityTimeZoneMap'; // Adjust the path if needed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimeZonePicker = () => {\n  _s();\n  const [timeZones, setTimeZones] = useState([]);\n  const [selectedTimeZone, setSelectedTimeZone] = useState('');\n  const [currentTime, setCurrentTime] = useState('');\n  useEffect(() => {\n    const getTimeZones = () => {\n      try {\n        return Intl.supportedValuesOf('timeZone');\n      } catch (err) {\n        return ['America/New_York', 'Europe/London', 'Asia/Tokyo', 'Australia/Sydney', 'UTC'];\n      }\n    };\n    const zones = getTimeZones().map(zone => ({\n      value: zone,\n      label: zone\n    }));\n    setTimeZones(zones);\n  }, []);\n  useEffect(() => {\n    const updateTime = () => {\n      if (selectedTimeZone) {\n        const now = new Date();\n        const options = {\n          timeZone: selectedTimeZone,\n          hour: '2-digit',\n          minute: '2-digit',\n          second: '2-digit',\n          hour12: true\n        };\n        const formatter = new Intl.DateTimeFormat([], options);\n        setCurrentTime(formatter.format(now));\n      }\n    };\n    const interval = setInterval(updateTime, 1000);\n    return () => clearInterval(interval);\n  }, [selectedTimeZone]);\n  const handleTimeZoneChange = selectedOption => {\n    setSelectedTimeZone(selectedOption.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"timezone\",\n      children: \"Select Time Zone:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      id: \"timezone\",\n      options: timeZones,\n      onChange: handleTimeZoneChange,\n      placeholder: \"Search and select a time zone\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), selectedTimeZone && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Current Time in \", selectedTimeZone, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: currentTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(TimeZonePicker, \"iqTX8V7D3TO/r0PwRb22xbF2ftg=\");\n_c = TimeZonePicker;\nexport default TimeZonePicker;\nvar _c;\n$RefreshReg$(_c, \"TimeZonePicker\");","map":{"version":3,"names":["React","useState","useEffect","Select","cityTimeZoneMap","jsxDEV","_jsxDEV","TimeZonePicker","_s","timeZones","setTimeZones","selectedTimeZone","setSelectedTimeZone","currentTime","setCurrentTime","getTimeZones","Intl","supportedValuesOf","err","zones","map","zone","value","label","updateTime","now","Date","options","timeZone","hour","minute","second","hour12","formatter","DateTimeFormat","format","interval","setInterval","clearInterval","handleTimeZoneChange","selectedOption","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","onChange","placeholder","_c","$RefreshReg$"],"sources":["/Users/solomonrojer/Desktop/Patrick/Project/mini-project/src/component/TimeZonePicker.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Select from 'react-select';\nimport cityTimeZoneMap from './cityTimeZoneMap'; // Adjust the path if needed\n\nconst TimeZonePicker = () => {\n  const [timeZones, setTimeZones] = useState([]);\n  const [selectedTimeZone, setSelectedTimeZone] = useState('');\n  const [currentTime, setCurrentTime] = useState('');\n\n  useEffect(() => {\n    const getTimeZones = () => {\n      try {\n        return Intl.supportedValuesOf('timeZone');\n      } catch (err) {\n        return [\n          'America/New_York',\n          'Europe/London',\n          'Asia/Tokyo',\n          'Australia/Sydney',\n          'UTC',\n        ];\n      }\n    };\n\n    const zones = getTimeZones().map((zone) => ({\n      value: zone,\n      label: zone,\n    }));\n    setTimeZones(zones);\n  }, []);\n\n  useEffect(() => {\n    const updateTime = () => {\n      if (selectedTimeZone) {\n        const now = new Date();\n        const options = {\n          timeZone: selectedTimeZone,\n          hour: '2-digit',\n          minute: '2-digit',\n          second: '2-digit',\n          hour12: true,\n        };\n        const formatter = new Intl.DateTimeFormat([], options);\n        setCurrentTime(formatter.format(now));\n      }\n    };\n\n    const interval = setInterval(updateTime, 1000);\n    return () => clearInterval(interval);\n  }, [selectedTimeZone]);\n\n  const handleTimeZoneChange = (selectedOption) => {\n    setSelectedTimeZone(selectedOption.value);\n  };\n\n  return (\n    <div>\n      <label htmlFor=\"timezone\">Select Time Zone:</label>\n      <Select\n        id=\"timezone\"\n        options={timeZones}\n        onChange={handleTimeZoneChange}\n        placeholder=\"Search and select a time zone\"\n      />\n      {selectedTimeZone && (\n        <div>\n          <h3>Current Time in {selectedTimeZone}:</h3>\n          <p>{currentTime}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TimeZonePicker;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}