{"ast":null,"code":"var _jsxFileName = \"/Users/solomonrojer/Desktop/Patrick/Project/mini-project/src/component/TimeZonePicker.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Select from 'react-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cityTimeZoneMap = {\n  // Your existing cityTimeZoneMap\n  'Abu Dhabi': 'Asia/Dubai',\n  'Amsterdam': 'Europe/Amsterdam',\n  'Athens': 'Europe/Athens'\n  // ... (rest of your cities)\n};\nconst TimeZonePicker = () => {\n  _s();\n  const [timeZones, setTimeZones] = useState([]);\n  const [selectedTimeZone, setSelectedTimeZone] = useState('');\n  const [currentTime, setCurrentTime] = useState('');\n  const [cityInput, setCityInput] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  useEffect(() => {\n    const getTimeZones = () => {\n      try {\n        return Intl.supportedValuesOf('timeZone');\n      } catch (err) {\n        return ['America/New_York', 'Europe/London', 'Asia/Tokyo', 'Australia/Sydney', 'UTC'];\n      }\n    };\n    const zones = getTimeZones().map(zone => ({\n      value: zone,\n      label: zone\n    }));\n    setTimeZones(zones);\n  }, []);\n  useEffect(() => {\n    const updateTime = () => {\n      if (selectedTimeZone) {\n        const now = new Date();\n        const options = {\n          timeZone: selectedTimeZone,\n          hour: '2-digit',\n          minute: '2-digit',\n          second: '2-digit',\n          hour12: true\n        };\n        const formatter = new Intl.DateTimeFormat([], options);\n        setCurrentTime(formatter.format(now));\n      }\n    };\n    const interval = setInterval(updateTime, 1000);\n    return () => clearInterval(interval);\n  }, [selectedTimeZone]);\n  const handleTimeZoneChange = selectedOption => {\n    setSelectedTimeZone(selectedOption.value);\n    setErrorMessage(''); // Clear error on successful selection\n  };\n  const handleCityInputChange = e => {\n    setCityInput(e.target.value);\n  };\n  const addCity = () => {\n    const cityName = cityInput.trim();\n    if (cityName && cityTimeZoneMap[cityName]) {\n      const newTimeZone = cityTimeZoneMap[cityName];\n      const newOption = {\n        value: newTimeZone,\n        label: cityName\n      };\n      setTimeZones(prev => [...prev, newOption]);\n      setSelectedTimeZone(newTimeZone);\n      setCityInput('');\n      setErrorMessage(''); // Clear error on successful addition\n    } else if (cityName) {\n      setErrorMessage('City not found in the list. Please check the name or add a new time zone.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"timezone\",\n      children: \"Select Time Zone:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      id: \"timezone\",\n      options: timeZones,\n      onChange: handleTimeZoneChange,\n      placeholder: \"Search and select a time zone\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"city\",\n        children: \"Add City:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"city\",\n        type: \"text\",\n        value: cityInput,\n        onChange: handleCityInputChange,\n        placeholder: \"Enter city name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addCity,\n        children: \"Add City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 26\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), selectedTimeZone && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Current Time in \", selectedTimeZone, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: currentTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(TimeZonePicker, \"ABdW/QmMGAe705SHlF3bg85I/xQ=\");\n_c = TimeZonePicker;\nexport default TimeZonePicker;\nvar _c;\n$RefreshReg$(_c, \"TimeZonePicker\");","map":{"version":3,"names":["React","useState","useEffect","Select","jsxDEV","_jsxDEV","cityTimeZoneMap","TimeZonePicker","_s","timeZones","setTimeZones","selectedTimeZone","setSelectedTimeZone","currentTime","setCurrentTime","cityInput","setCityInput","errorMessage","setErrorMessage","getTimeZones","Intl","supportedValuesOf","err","zones","map","zone","value","label","updateTime","now","Date","options","timeZone","hour","minute","second","hour12","formatter","DateTimeFormat","format","interval","setInterval","clearInterval","handleTimeZoneChange","selectedOption","handleCityInputChange","e","target","addCity","cityName","trim","newTimeZone","newOption","prev","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","onChange","placeholder","type","onClick","style","color","_c","$RefreshReg$"],"sources":["/Users/solomonrojer/Desktop/Patrick/Project/mini-project/src/component/TimeZonePicker.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Select from 'react-select';\n\nconst cityTimeZoneMap = {\n  // Your existing cityTimeZoneMap\n  'Abu Dhabi': 'Asia/Dubai',\n  'Amsterdam': 'Europe/Amsterdam',\n  'Athens': 'Europe/Athens',\n  // ... (rest of your cities)\n};\n\nconst TimeZonePicker = () => {\n  const [timeZones, setTimeZones] = useState([]);\n  const [selectedTimeZone, setSelectedTimeZone] = useState('');\n  const [currentTime, setCurrentTime] = useState('');\n  const [cityInput, setCityInput] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    const getTimeZones = () => {\n      try {\n        return Intl.supportedValuesOf('timeZone');\n      } catch (err) {\n        return ['America/New_York', 'Europe/London', 'Asia/Tokyo', 'Australia/Sydney', 'UTC'];\n      }\n    };\n\n    const zones = getTimeZones().map((zone) => ({\n      value: zone,\n      label: zone,\n    }));\n    setTimeZones(zones);\n  }, []);\n\n  useEffect(() => {\n    const updateTime = () => {\n      if (selectedTimeZone) {\n        const now = new Date();\n        const options = {\n          timeZone: selectedTimeZone,\n          hour: '2-digit',\n          minute: '2-digit',\n          second: '2-digit',\n          hour12: true,\n        };\n        const formatter = new Intl.DateTimeFormat([], options);\n        setCurrentTime(formatter.format(now));\n      }\n    };\n\n    const interval = setInterval(updateTime, 1000);\n    return () => clearInterval(interval);\n  }, [selectedTimeZone]);\n\n  const handleTimeZoneChange = (selectedOption) => {\n    setSelectedTimeZone(selectedOption.value);\n    setErrorMessage(''); // Clear error on successful selection\n  };\n\n  const handleCityInputChange = (e) => {\n    setCityInput(e.target.value);\n  };\n\n  const addCity = () => {\n    const cityName = cityInput.trim();\n    if (cityName && cityTimeZoneMap[cityName]) {\n      const newTimeZone = cityTimeZoneMap[cityName];\n      const newOption = { value: newTimeZone, label: cityName };\n      setTimeZones((prev) => [...prev, newOption]);\n      setSelectedTimeZone(newTimeZone);\n      setCityInput('');\n      setErrorMessage(''); // Clear error on successful addition\n    } else if (cityName) {\n      setErrorMessage('City not found in the list. Please check the name or add a new time zone.');\n    }\n  };\n\n  return (\n    <div>\n      <label htmlFor=\"timezone\">Select Time Zone:</label>\n      <Select\n        id=\"timezone\"\n        options={timeZones}\n        onChange={handleTimeZoneChange}\n        placeholder=\"Search and select a time zone\"\n      />\n      <div>\n        <label htmlFor=\"city\">Add City:</label>\n        <input\n          id=\"city\"\n          type=\"text\"\n          value={cityInput}\n          onChange={handleCityInputChange}\n          placeholder=\"Enter city name\"\n        />\n        <button onClick={addCity}>Add City</button>\n        {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>} {/* Error message display */}\n      </div>\n      {selectedTimeZone && (\n        <div>\n          <h3>Current Time in {selectedTimeZone}:</h3>\n          <p>{currentTime}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TimeZonePicker;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,eAAe,GAAG;EACtB;EACA,WAAW,EAAE,YAAY;EACzB,WAAW,EAAE,kBAAkB;EAC/B,QAAQ,EAAE;EACV;AACF,CAAC;AAED,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACU,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACgB,YAAY,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAEpDC,SAAS,CAAC,MAAM;IACd,MAAMiB,YAAY,GAAGA,CAAA,KAAM;MACzB,IAAI;QACF,OAAOC,IAAI,CAACC,iBAAiB,CAAC,UAAU,CAAC;MAC3C,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZ,OAAO,CAAC,kBAAkB,EAAE,eAAe,EAAE,YAAY,EAAE,kBAAkB,EAAE,KAAK,CAAC;MACvF;IACF,CAAC;IAED,MAAMC,KAAK,GAAGJ,YAAY,CAAC,CAAC,CAACK,GAAG,CAAEC,IAAI,KAAM;MAC1CC,KAAK,EAAED,IAAI;MACXE,KAAK,EAAEF;IACT,CAAC,CAAC,CAAC;IACHf,YAAY,CAACa,KAAK,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAENrB,SAAS,CAAC,MAAM;IACd,MAAM0B,UAAU,GAAGA,CAAA,KAAM;MACvB,IAAIjB,gBAAgB,EAAE;QACpB,MAAMkB,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;QACtB,MAAMC,OAAO,GAAG;UACdC,QAAQ,EAAErB,gBAAgB;UAC1BsB,IAAI,EAAE,SAAS;UACfC,MAAM,EAAE,SAAS;UACjBC,MAAM,EAAE,SAAS;UACjBC,MAAM,EAAE;QACV,CAAC;QACD,MAAMC,SAAS,GAAG,IAAIjB,IAAI,CAACkB,cAAc,CAAC,EAAE,EAAEP,OAAO,CAAC;QACtDjB,cAAc,CAACuB,SAAS,CAACE,MAAM,CAACV,GAAG,CAAC,CAAC;MACvC;IACF,CAAC;IAED,MAAMW,QAAQ,GAAGC,WAAW,CAACb,UAAU,EAAE,IAAI,CAAC;IAC9C,OAAO,MAAMc,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,CAAC7B,gBAAgB,CAAC,CAAC;EAEtB,MAAMgC,oBAAoB,GAAIC,cAAc,IAAK;IAC/ChC,mBAAmB,CAACgC,cAAc,CAAClB,KAAK,CAAC;IACzCR,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC;EACvB,CAAC;EAED,MAAM2B,qBAAqB,GAAIC,CAAC,IAAK;IACnC9B,YAAY,CAAC8B,CAAC,CAACC,MAAM,CAACrB,KAAK,CAAC;EAC9B,CAAC;EAED,MAAMsB,OAAO,GAAGA,CAAA,KAAM;IACpB,MAAMC,QAAQ,GAAGlC,SAAS,CAACmC,IAAI,CAAC,CAAC;IACjC,IAAID,QAAQ,IAAI3C,eAAe,CAAC2C,QAAQ,CAAC,EAAE;MACzC,MAAME,WAAW,GAAG7C,eAAe,CAAC2C,QAAQ,CAAC;MAC7C,MAAMG,SAAS,GAAG;QAAE1B,KAAK,EAAEyB,WAAW;QAAExB,KAAK,EAAEsB;MAAS,CAAC;MACzDvC,YAAY,CAAE2C,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAED,SAAS,CAAC,CAAC;MAC5CxC,mBAAmB,CAACuC,WAAW,CAAC;MAChCnC,YAAY,CAAC,EAAE,CAAC;MAChBE,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC;IACvB,CAAC,MAAM,IAAI+B,QAAQ,EAAE;MACnB/B,eAAe,CAAC,2EAA2E,CAAC;IAC9F;EACF,CAAC;EAED,oBACEb,OAAA;IAAAiD,QAAA,gBACEjD,OAAA;MAAOkD,OAAO,EAAC,UAAU;MAAAD,QAAA,EAAC;IAAiB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACnDtD,OAAA,CAACF,MAAM;MACLyD,EAAE,EAAC,UAAU;MACb7B,OAAO,EAAEtB,SAAU;MACnBoD,QAAQ,EAAElB,oBAAqB;MAC/BmB,WAAW,EAAC;IAA+B;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CAAC,eACFtD,OAAA;MAAAiD,QAAA,gBACEjD,OAAA;QAAOkD,OAAO,EAAC,MAAM;QAAAD,QAAA,EAAC;MAAS;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACvCtD,OAAA;QACEuD,EAAE,EAAC,MAAM;QACTG,IAAI,EAAC,MAAM;QACXrC,KAAK,EAAEX,SAAU;QACjB8C,QAAQ,EAAEhB,qBAAsB;QAChCiB,WAAW,EAAC;MAAiB;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9B,CAAC,eACFtD,OAAA;QAAQ2D,OAAO,EAAEhB,OAAQ;QAAAM,QAAA,EAAC;MAAQ;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EAC1C1C,YAAY,iBAAIZ,OAAA;QAAG4D,KAAK,EAAE;UAAEC,KAAK,EAAE;QAAM,CAAE;QAAAZ,QAAA,EAAErC;MAAY;QAAAuC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAAC,GAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9D,CAAC,EACLhD,gBAAgB,iBACfN,OAAA;MAAAiD,QAAA,gBACEjD,OAAA;QAAAiD,QAAA,GAAI,kBAAgB,EAAC3C,gBAAgB,EAAC,GAAC;MAAA;QAAA6C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC5CtD,OAAA;QAAAiD,QAAA,EAAIzC;MAAW;QAAA2C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjB,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACnD,EAAA,CA/FID,cAAc;AAAA4D,EAAA,GAAd5D,cAAc;AAiGpB,eAAeA,cAAc;AAAC,IAAA4D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}