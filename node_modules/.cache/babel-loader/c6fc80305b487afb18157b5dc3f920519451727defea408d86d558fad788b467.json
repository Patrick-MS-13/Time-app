{"ast":null,"code":"var _jsxFileName = \"/Users/solomonrojer/Desktop/Patrick/Project/mini-project/src/component/Alarm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './../style/alarm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Alarm = () => {\n  _s();\n  const [alarmTime, setAlarmTime] = useState('');\n  const [alarms, setAlarms] = useState([]); // Array to hold all alarms\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [alarmMessage, setAlarmMessage] = useState('');\n  const [isAlarmRinging, setIsAlarmRinging] = useState(false);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentTime(new Date());\n      checkAlarms(); // Check alarms every second\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [alarms]); // Only depend on alarms\n\n  const checkAlarms = () => {\n    const formattedCurrentTime = currentTime.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: true\n    });\n    alarms.forEach(alarm => {\n      if (formattedCurrentTime === alarm.time && alarm.isActive && !isAlarmRinging) {\n        setIsAlarmRinging(true);\n        setAlarmMessage(`Alarm ringing for ${alarm.time}!`);\n        // Automatically toggle off the alarm after it rings\n        setAlarms(prev => prev.map(a => a.id === alarm.id ? {\n          ...a,\n          isActive: false\n        } : a));\n\n        // Clear the alarm message after 5 seconds\n        setTimeout(() => {\n          setAlarmMessage('');\n          setIsAlarmRinging(false);\n        }, 5000);\n      }\n    });\n  };\n  const handleSetAlarm = () => {\n    if (alarmTime) {\n      const newAlarm = {\n        time: formatAlarmTime(alarmTime),\n        id: Date.now(),\n        isActive: true\n      };\n      setAlarms(prev => [...prev, newAlarm]);\n      setAlarmMessage(`Alarm set for ${newAlarm.time}`);\n      setAlarmTime('');\n\n      // Clear the alarm message after 3 seconds\n      setTimeout(() => {\n        setAlarmMessage('');\n      }, 3000);\n    } else {\n      setAlarmMessage('Please enter a valid time');\n    }\n  };\n  const formatAlarmTime = time => {\n    const [hours, minutes] = time.split(':');\n    const date = new Date();\n    date.setHours(hours);\n    date.setMinutes(minutes);\n    return date.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: true\n    });\n  };\n  const calculateRemainingTime = alarm => {\n    const [alarmHours, alarmMinutes] = alarm.time.split(':').map(Number);\n    const now = new Date();\n    const alarmDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), alarmHours, alarmMinutes);\n    if (alarmDate <= now) {\n      alarmDate.setDate(alarmDate.getDate() + 1); // Set for next day if the time has passed\n    }\n    const diff = alarmDate.getTime() - now.getTime();\n    if (diff < 0) {\n      return \"Alarm time is invalid\"; // Check if the difference is negative\n    }\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const minutes = Math.floor(diff % (1000 * 60 * 60) / (1000 * 60));\n    const seconds = Math.floor(diff % (1000 * 60) / 1000);\n    return `Alarm in ${hours}h ${minutes}m ${seconds}s`; // Format the remaining time\n  };\n  const toggleAlarm = id => {\n    setAlarms(prev => prev.map(alarm => alarm.id === id ? {\n      ...alarm,\n      isActive: !alarm.isActive\n    } : alarm));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [alarmMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification\",\n      children: alarmMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Alarm Clock\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"time\",\n      value: alarmTime,\n      onChange: e => setAlarmTime(e.target.value),\n      className: \"input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSetAlarm,\n      className: \"button\",\n      children: \"Set Alarm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timeDisplay\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Current Time: \", currentTime.toLocaleTimeString([], {\n          hour: '2-digit',\n          minute: '2-digit',\n          second: '2-digit',\n          hour12: true\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), alarms.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Alarms Set:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: alarms.map(alarm => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [alarm.time, \" - \", alarm.isActive ? calculateRemainingTime(alarm) : 'Alarm Disabled', /*#__PURE__*/_jsxDEV(\"label\", {\n              style: {\n                marginLeft: '10px'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: alarm.isActive,\n                onChange: () => toggleAlarm(alarm.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 21\n              }, this), \"Toggle\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 19\n            }, this)]\n          }, alarm.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"No alarms set.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(Alarm, \"COAE+yzB5IeAE6DwK/2TtsJthcg=\");\n_c = Alarm;\nexport default Alarm;\nvar _c;\n$RefreshReg$(_c, \"Alarm\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Alarm","_s","alarmTime","setAlarmTime","alarms","setAlarms","currentTime","setCurrentTime","Date","alarmMessage","setAlarmMessage","isAlarmRinging","setIsAlarmRinging","interval","setInterval","checkAlarms","clearInterval","formattedCurrentTime","toLocaleTimeString","hour","minute","hour12","forEach","alarm","time","isActive","prev","map","a","id","setTimeout","handleSetAlarm","newAlarm","formatAlarmTime","now","hours","minutes","split","date","setHours","setMinutes","calculateRemainingTime","alarmHours","alarmMinutes","Number","alarmDate","getFullYear","getMonth","getDate","setDate","diff","getTime","Math","floor","seconds","toggleAlarm","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","second","length","style","marginLeft","checked","_c","$RefreshReg$"],"sources":["/Users/solomonrojer/Desktop/Patrick/Project/mini-project/src/component/Alarm.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './../style/alarm.css';\n\nconst Alarm = () => {\n  const [alarmTime, setAlarmTime] = useState('');\n  const [alarms, setAlarms] = useState([]); // Array to hold all alarms\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [alarmMessage, setAlarmMessage] = useState('');\n  const [isAlarmRinging, setIsAlarmRinging] = useState(false);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentTime(new Date());\n      checkAlarms(); // Check alarms every second\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [alarms]); // Only depend on alarms\n\n  const checkAlarms = () => {\n    const formattedCurrentTime = currentTime.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: true,\n    });\n\n    alarms.forEach((alarm) => {\n      if (formattedCurrentTime === alarm.time && alarm.isActive && !isAlarmRinging) {\n        setIsAlarmRinging(true);\n        setAlarmMessage(`Alarm ringing for ${alarm.time}!`);\n        // Automatically toggle off the alarm after it rings\n        setAlarms((prev) =>\n          prev.map((a) => (a.id === alarm.id ? { ...a, isActive: false } : a))\n        );\n\n        // Clear the alarm message after 5 seconds\n        setTimeout(() => {\n          setAlarmMessage('');\n          setIsAlarmRinging(false);\n        }, 5000);\n      }\n    });\n  };\n\n  const handleSetAlarm = () => {\n    if (alarmTime) {\n      const newAlarm = { time: formatAlarmTime(alarmTime), id: Date.now(), isActive: true };\n      setAlarms((prev) => [...prev, newAlarm]);\n      setAlarmMessage(`Alarm set for ${newAlarm.time}`);\n      setAlarmTime('');\n\n      // Clear the alarm message after 3 seconds\n      setTimeout(() => {\n        setAlarmMessage('');\n      }, 3000);\n    } else {\n      setAlarmMessage('Please enter a valid time');\n    }\n  };\n\n  const formatAlarmTime = (time) => {\n    const [hours, minutes] = time.split(':');\n    const date = new Date();\n    date.setHours(hours);\n    date.setMinutes(minutes);\n    return date.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: true,\n    });\n  };\n\n  const calculateRemainingTime = (alarm) => {\n    const [alarmHours, alarmMinutes] = alarm.time.split(':').map(Number);\n    const now = new Date();\n    const alarmDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), alarmHours, alarmMinutes);\n\n    if (alarmDate <= now) {\n      alarmDate.setDate(alarmDate.getDate() + 1); // Set for next day if the time has passed\n    }\n\n    const diff = alarmDate.getTime() - now.getTime();\n\n    if (diff < 0) {\n      return \"Alarm time is invalid\"; // Check if the difference is negative\n    }\n\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n    const seconds = Math.floor((diff % (1000 * 60)) / 1000);\n\n    return `Alarm in ${hours}h ${minutes}m ${seconds}s`; // Format the remaining time\n  };\n\n  const toggleAlarm = (id) => {\n    setAlarms((prev) =>\n      prev.map((alarm) =>\n        alarm.id === id ? { ...alarm, isActive: !alarm.isActive } : alarm\n      )\n    );\n  };\n\n  return (\n    <div className=\"container\">\n      {alarmMessage && <div className=\"notification\">{alarmMessage}</div>}\n      <h2>Alarm Clock</h2>\n      <input\n        type=\"time\"\n        value={alarmTime}\n        onChange={(e) => setAlarmTime(e.target.value)}\n        className=\"input\"\n      />\n      <button onClick={handleSetAlarm} className=\"button\">\n        Set Alarm\n      </button>\n      <div className=\"timeDisplay\">\n        <h3>Current Time: {currentTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: true })}</h3>\n        {alarms.length > 0 ? (\n          <div>\n            <h4>Alarms Set:</h4>\n            <ul>\n              {alarms.map((alarm) => (\n                <li key={alarm.id}>\n                  {alarm.time} - {alarm.isActive ? calculateRemainingTime(alarm) : 'Alarm Disabled'}\n                  <label style={{ marginLeft: '10px' }}>\n                    <input\n                      type=\"checkbox\"\n                      checked={alarm.isActive}\n                      onChange={() => toggleAlarm(alarm.id)}\n                    />\n                    Toggle\n                  </label>\n                </li>\n              ))}\n            </ul>\n          </div>\n        ) : (\n          <h4>No alarms set.</h4>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Alarm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}