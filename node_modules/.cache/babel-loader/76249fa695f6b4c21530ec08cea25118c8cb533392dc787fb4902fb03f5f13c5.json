{"ast":null,"code":"var _jsxFileName = \"/Users/solomonrojer/Desktop/Patrick/Project/mini-project/src/component/TimeZonePicker.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Select from \"react-select\";\nimport cityTimeZoneMap from \"./../component/cityTimeZoneMap\"; // Ensure this file has the correct structure\nimport countryFlags from './../component/countryFlags'; // Adjust the path as needed\nimport './../style/timezonepicker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimeZonePicker = () => {\n  _s();\n  const [timeZones, setTimeZones] = useState([]);\n  const [selectedTimeZone, setSelectedTimeZone] = useState(\"\");\n  const [currentTime, setCurrentTime] = useState(\"\");\n  const [selectedCountryCode, setSelectedCountryCode] = useState(\"\"); // State for the selected country code\n\n  useEffect(() => {\n    const getTimeZones = () => {\n      try {\n        return Intl.supportedValuesOf(\"timeZone\");\n      } catch (err) {\n        return [\"America/New_York\", \"Europe/London\", \"Asia/Tokyo\", \"Australia/Sydney\", \"UTC\"];\n      }\n    };\n\n    // Get the supported time zones and map them\n    const supportedZones = getTimeZones().map(zone => ({\n      value: zone,\n      label: zone\n    }));\n\n    // Add the cityTimeZoneMap options\n    const cityOptions = Object.entries(cityTimeZoneMap).map(([city, {\n      timeZone,\n      countryCode\n    }]) => ({\n      value: timeZone,\n      label: city,\n      countryCode: countryCode // Add country code to options\n    }));\n\n    // Combine both arrays\n    const combinedZones = [...supportedZones, ...cityOptions];\n    setTimeZones(combinedZones);\n  }, []);\n  useEffect(() => {\n    const updateTime = () => {\n      if (selectedTimeZone) {\n        const now = new Date();\n        const options = {\n          timeZone: selectedTimeZone,\n          hour: \"2-digit\",\n          minute: \"2-digit\",\n          second: \"2-digit\",\n          hour12: true\n        };\n        const formatter = new Intl.DateTimeFormat([], options);\n        setCurrentTime(formatter.format(now));\n      }\n    };\n    const interval = setInterval(updateTime, 1000);\n    return () => clearInterval(interval);\n  }, [selectedTimeZone]);\n  const handleTimeZoneChange = selecteLdOption => {\n    setSelectedTimeZone(selectedOption.value);\n    setSelectedCountryCode(selectedOption.countryCode); // Update the country code based on selected option\n    console.log(\"Selected Country Code:\", selectedOption.countryCode); // Debugging line\n  };\n  console.log(\"Flag URL:\", countryFlags[selectedCountryCode]); // Check if the URL is valid\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"timezone-picker-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"timezone\",\n      children: \"Select Time Zone:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      id: \"timezone\",\n      options: timeZones,\n      onChange: handleTimeZoneChange,\n      placeholder: \"Search and select a time zone\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), selectedTimeZone && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: selectedTimeZone\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), selectedCountryCode && countryFlags[selectedCountryCode] && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: countryFlags[selectedCountryCode],\n        alt: `${selectedCountryCode} flag`,\n        style: {\n          width: '2em',\n          height: '2em'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: currentTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(TimeZonePicker, \"w3bc2XweqlIzvW4ThNtADfQZC0I=\");\n_c = TimeZonePicker;\nexport default TimeZonePicker;\nvar _c;\n$RefreshReg$(_c, \"TimeZonePicker\");","map":{"version":3,"names":["React","useState","useEffect","Select","cityTimeZoneMap","countryFlags","jsxDEV","_jsxDEV","TimeZonePicker","_s","timeZones","setTimeZones","selectedTimeZone","setSelectedTimeZone","currentTime","setCurrentTime","selectedCountryCode","setSelectedCountryCode","getTimeZones","Intl","supportedValuesOf","err","supportedZones","map","zone","value","label","cityOptions","Object","entries","city","timeZone","countryCode","combinedZones","updateTime","now","Date","options","hour","minute","second","hour12","formatter","DateTimeFormat","format","interval","setInterval","clearInterval","handleTimeZoneChange","selecteLdOption","selectedOption","console","log","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","onChange","placeholder","src","alt","style","width","height","_c","$RefreshReg$"],"sources":["/Users/solomonrojer/Desktop/Patrick/Project/mini-project/src/component/TimeZonePicker.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Select from \"react-select\";\nimport cityTimeZoneMap from \"./../component/cityTimeZoneMap\"; // Ensure this file has the correct structure\nimport countryFlags from './../component/countryFlags'; // Adjust the path as needed\nimport './../style/timezonepicker.css';\n\nconst TimeZonePicker = () => {\n  const [timeZones, setTimeZones] = useState([]);\n  const [selectedTimeZone, setSelectedTimeZone] = useState(\"\");\n  const [currentTime, setCurrentTime] = useState(\"\");\n  const [selectedCountryCode, setSelectedCountryCode] = useState(\"\"); // State for the selected country code\n\n  useEffect(() => {\n    const getTimeZones = () => {\n      try {\n        return Intl.supportedValuesOf(\"timeZone\");\n      } catch (err) {\n        return [\n          \"America/New_York\",\n          \"Europe/London\",\n          \"Asia/Tokyo\",\n          \"Australia/Sydney\",\n          \"UTC\",\n        ];\n      }\n    };\n\n    // Get the supported time zones and map them\n    const supportedZones = getTimeZones().map((zone) => ({\n      value: zone,\n      label: zone,\n    }));\n\n    // Add the cityTimeZoneMap options\n    const cityOptions = Object.entries(cityTimeZoneMap).map(\n      ([city, { timeZone, countryCode }]) => ({\n        value: timeZone,\n        label: city,\n        countryCode: countryCode, // Add country code to options\n      })\n    );\n\n    // Combine both arrays\n    const combinedZones = [...supportedZones, ...cityOptions];\n    setTimeZones(combinedZones);\n  }, []);\n\n  useEffect(() => {\n    const updateTime = () => {\n      if (selectedTimeZone) {\n        const now = new Date();\n        const options = {\n          timeZone: selectedTimeZone,\n          hour: \"2-digit\",\n          minute: \"2-digit\",\n          second: \"2-digit\",\n          hour12: true,\n        };\n        const formatter = new Intl.DateTimeFormat([], options);\n        setCurrentTime(formatter.format(now));\n      }\n    };\n\n    const interval = setInterval(updateTime, 1000);\n    return () => clearInterval(interval);\n  }, [selectedTimeZone]);\n\n  const handleTimeZoneChange = (selecteLdOption) => {\n    setSelectedTimeZone(selectedOption.value);\n    setSelectedCountryCode(selectedOption.countryCode); // Update the country code based on selected option\n    console.log(\"Selected Country Code:\", selectedOption.countryCode); // Debugging line\n  };\n\n  console.log(\"Flag URL:\", countryFlags[selectedCountryCode]); // Check if the URL is valid\n  return (\n    <div className=\"timezone-picker-container\">\n      <label htmlFor=\"timezone\">Select Time Zone:</label>\n      <Select\n        id=\"timezone\"\n        options={timeZones}\n        onChange={handleTimeZoneChange}\n        placeholder=\"Search and select a time zone\"\n      />\n      {selectedTimeZone && (\n        <div>\n          <h3>{selectedTimeZone}</h3>\n          {selectedCountryCode && countryFlags[selectedCountryCode] && (\n            <img\n              src={countryFlags[selectedCountryCode]}\n              alt={`${selectedCountryCode} flag`}\n              style={{ width: '2em', height: '2em' }}\n            />\n          )}\n          <p>{currentTime}</p>\n        </div>\n      )}\n    </div>\n  );\n  \n};\n\nexport default TimeZonePicker;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}