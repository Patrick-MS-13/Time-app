{"ast":null,"code":"var _jsxFileName = \"/Users/solomonrojer/Desktop/Patrick/Project/mini-project/src/component/Alarm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./../style/alarm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Alarm = () => {\n  _s();\n  const [alarmTime, setAlarmTime] = useState(\"\");\n  const [alarms, setAlarms] = useState([]); // Array to hold all alarms\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [alarmMessage, setAlarmMessage] = useState(\"\");\n  const [isAlarmRinging, setIsAlarmRinging] = useState(false);\n  const [showForm, setShowForm] = useState(false); // Toggle visibility of the form\n  const [isSvgClicked, setIsSvgClicked] = useState(false); // Track if SVG has been clicked\n  const [showTooltip, setShowTooltip] = useState(false); // State to control tooltip visibility\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentTime(new Date());\n      checkAlarms(); // Check alarms every second\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [alarms]); // Only depend on alarms\n\n  const checkAlarms = () => {\n    const formattedCurrentTime = currentTime.toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      hour12: true\n    });\n    alarms.forEach(alarm => {\n      if (formattedCurrentTime === alarm.time && alarm.isActive && !isAlarmRinging) {\n        setIsAlarmRinging(true);\n        setAlarmMessage(`Alarm ringing for ${alarm.time}!`);\n        // Automatically toggle off the alarm after it rings\n        setAlarms(prev => prev.map(a => a.id === alarm.id ? {\n          ...a,\n          isActive: false\n        } : a));\n\n        // Clear the alarm message after 5 seconds\n        setTimeout(() => {\n          setAlarmMessage(\"\");\n          setIsAlarmRinging(false);\n        }, 5000);\n      }\n    });\n  };\n  const handleSetAlarm = () => {\n    if (alarmTime) {\n      const newAlarm = {\n        time: formatAlarmTime(alarmTime),\n        id: Date.now(),\n        isActive: true\n      };\n      setAlarms(prev => [...prev, newAlarm]);\n      setAlarmMessage(`Alarm set for ${newAlarm.time}`);\n      setAlarmTime(\"\");\n\n      // Clear the alarm message after 3 seconds\n      setTimeout(() => {\n        setAlarmMessage(\"\");\n      }, 3000);\n\n      // Hide the form after setting the alarm\n      setShowForm(false);\n    } else {\n      setAlarmMessage(\"Please enter a valid time\");\n    }\n  };\n  const formatAlarmTime = time => {\n    const [hours, minutes] = time.split(\":\");\n    const date = new Date();\n    date.setHours(hours);\n    date.setMinutes(minutes);\n    return date.toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      hour12: true\n    });\n  };\n  const calculateRemainingTime = alarm => {\n    const [alarmHours, alarmMinutes] = alarm.time.split(\":\").map(Number);\n    const now = new Date();\n    const alarmDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), alarmHours, alarmMinutes);\n    if (alarmDate <= now) {\n      alarmDate.setDate(alarmDate.getDate() + 1); // Set for next day if the time has passed\n    }\n    const diff = alarmDate.getTime() - now.getTime();\n    if (diff < 0) {\n      return \"Alarm time is invalid\"; // Check if the difference is negative\n    }\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const minutes = Math.floor(diff % (1000 * 60 * 60) / (1000 * 60));\n    const seconds = Math.floor(diff % (1000 * 60) / 1000);\n    return `Alarm in ${hours}h ${minutes}m ${seconds}s`; // Format the remaining time\n  };\n  const toggleAlarm = id => {\n    setAlarms(prev => prev.map(alarm => alarm.id === id ? {\n      ...alarm,\n      isActive: !alarm.isActive\n    } : alarm));\n  };\n\n  // Handle the click on the SVG to show the form\n  const handleSvgClick = () => {\n    setShowForm(true); // Show the form every time the SVG is clicked\n    setIsSvgClicked(true); // Set to true after the first click\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [alarmMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification\",\n      children: alarmMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 24\n    }, this), !isSvgClicked && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Alarm Clock\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timeDisplay\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: currentTime.toLocaleTimeString([], {\n          hour: \"2-digit\",\n          minute: \"2-digit\",\n          second: \"2-digit\",\n          hour12: true\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onMouseEnter: () => setShowTooltip(true),\n        onMouseLeave: () => setShowTooltip(false),\n        onClick: handleSvgClick,\n        style: {\n          cursor: \"pointer\",\n          position: \"relative\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"50px\",\n          height: \"50px\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          children: [/*#__PURE__*/_jsxDEV(\"g\", {\n            id: \"SVGRepo_bgCarrier\",\n            strokeWidth: \"0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n            id: \"SVGRepo_tracerCarrier\",\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n            id: \"SVGRepo_iconCarrier\",\n            children: [/*#__PURE__*/_jsxDEV(\"path\", {\n              d: \"M11 8C11 7.44772 11.4477 7 12 7C12.5523 7 13 7.44772 13 8V11H16C16.5523 11 17 11.4477 17 12C17 12.5523 16.5523 13 16 13H13V16C13 16.5523 12.5523 17 12 17C11.4477 17 11 16.5523 11 16V13H8C7.44771 13 7 12.5523 7 12C7 11.4477 7.44772 11 8 11H11V8Z\",\n              fill: \"#0F0F0F\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n              fillRule: \"evenodd\",\n              clipRule: \"evenodd\",\n              d: \"M23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12ZM3.00683 12C3.00683 16.9668 7.03321 20.9932 12 20.9932C16.9668 20.9932 20.9932 16.9668 20.9932 12C20.9932 7.03321 16.9668 3.00683 12 3.00683C7.03321 3.00683 3.00683 7.03321 3.00683 12Z\",\n              fill: \"#0F0F0F\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), showTooltip && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tooltip\",\n          style: {\n            top: \"-30px\",\n            left: \"50%\",\n            transform: \"translateX(-50%)\",\n            pointerEvents: \"none\" // Prevent mouse events on tooltip\n          },\n          children: \"Click to set alarm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), showForm && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          value: alarmTime,\n          onChange: e => setAlarmTime(e.target.value),\n          className: \"input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSetAlarm,\n          className: \"button\",\n          children: \"Set Alarm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this), alarms.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Alarms Set:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: alarms.map(alarm => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [alarm.time, \" -\", \" \", alarm.isActive ? calculateRemainingTime(alarm) : \"Alarm Disabled\", /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"switch\",\n              style: {\n                marginLeft: \"10px\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: alarm.isActive,\n                onChange: () => toggleAlarm(alarm.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: `slider ${alarm.isActive ? \"\" : \"round\"}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 19\n            }, this)]\n          }, alarm.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n_s(Alarm, \"c2MotG8kJ5CbZka518F3WkUhOVM=\");\n_c = Alarm;\nexport default Alarm;\nvar _c;\n$RefreshReg$(_c, \"Alarm\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Alarm","_s","alarmTime","setAlarmTime","alarms","setAlarms","currentTime","setCurrentTime","Date","alarmMessage","setAlarmMessage","isAlarmRinging","setIsAlarmRinging","showForm","setShowForm","isSvgClicked","setIsSvgClicked","showTooltip","setShowTooltip","interval","setInterval","checkAlarms","clearInterval","formattedCurrentTime","toLocaleTimeString","hour","minute","hour12","forEach","alarm","time","isActive","prev","map","a","id","setTimeout","handleSetAlarm","newAlarm","formatAlarmTime","now","hours","minutes","split","date","setHours","setMinutes","calculateRemainingTime","alarmHours","alarmMinutes","Number","alarmDate","getFullYear","getMonth","getDate","setDate","diff","getTime","Math","floor","seconds","toggleAlarm","handleSvgClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","second","onMouseEnter","onMouseLeave","onClick","style","cursor","position","width","height","viewBox","fill","xmlns","strokeWidth","strokeLinecap","strokeLinejoin","d","fillRule","clipRule","top","left","transform","pointerEvents","type","value","onChange","e","target","length","marginLeft","checked","_c","$RefreshReg$"],"sources":["/Users/solomonrojer/Desktop/Patrick/Project/mini-project/src/component/Alarm.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./../style/alarm.css\";\n\nconst Alarm = () => {\n  const [alarmTime, setAlarmTime] = useState(\"\");\n  const [alarms, setAlarms] = useState([]); // Array to hold all alarms\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [alarmMessage, setAlarmMessage] = useState(\"\");\n  const [isAlarmRinging, setIsAlarmRinging] = useState(false);\n  const [showForm, setShowForm] = useState(false); // Toggle visibility of the form\n  const [isSvgClicked, setIsSvgClicked] = useState(false); // Track if SVG has been clicked\n  const [showTooltip, setShowTooltip] = useState(false); // State to control tooltip visibility\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentTime(new Date());\n      checkAlarms(); // Check alarms every second\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [alarms]); // Only depend on alarms\n\n  const checkAlarms = () => {\n    const formattedCurrentTime = currentTime.toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      hour12: true,\n    });\n\n    alarms.forEach((alarm) => {\n      if (\n        formattedCurrentTime === alarm.time &&\n        alarm.isActive &&\n        !isAlarmRinging\n      ) {\n        setIsAlarmRinging(true);\n        setAlarmMessage(`Alarm ringing for ${alarm.time}!`);\n        // Automatically toggle off the alarm after it rings\n        setAlarms((prev) =>\n          prev.map((a) => (a.id === alarm.id ? { ...a, isActive: false } : a))\n        );\n\n        // Clear the alarm message after 5 seconds\n        setTimeout(() => {\n          setAlarmMessage(\"\");\n          setIsAlarmRinging(false);\n        }, 5000);\n      }\n    });\n  };\n\n  const handleSetAlarm = () => {\n    if (alarmTime) {\n      const newAlarm = {\n        time: formatAlarmTime(alarmTime),\n        id: Date.now(),\n        isActive: true,\n      };\n      setAlarms((prev) => [...prev, newAlarm]);\n      setAlarmMessage(`Alarm set for ${newAlarm.time}`);\n      setAlarmTime(\"\");\n\n      // Clear the alarm message after 3 seconds\n      setTimeout(() => {\n        setAlarmMessage(\"\");\n      }, 3000);\n\n      // Hide the form after setting the alarm\n      setShowForm(false);\n    } else {\n      setAlarmMessage(\"Please enter a valid time\");\n    }\n  };\n\n  const formatAlarmTime = (time) => {\n    const [hours, minutes] = time.split(\":\");\n    const date = new Date();\n    date.setHours(hours);\n    date.setMinutes(minutes);\n    return date.toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      hour12: true,\n    });\n  };\n\n  const calculateRemainingTime = (alarm) => {\n    const [alarmHours, alarmMinutes] = alarm.time.split(\":\").map(Number);\n    const now = new Date();\n    const alarmDate = new Date(\n      now.getFullYear(),\n      now.getMonth(),\n      now.getDate(),\n      alarmHours,\n      alarmMinutes\n    );\n\n    if (alarmDate <= now) {\n      alarmDate.setDate(alarmDate.getDate() + 1); // Set for next day if the time has passed\n    }\n\n    const diff = alarmDate.getTime() - now.getTime();\n\n    if (diff < 0) {\n      return \"Alarm time is invalid\"; // Check if the difference is negative\n    }\n\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n    const seconds = Math.floor((diff % (1000 * 60)) / 1000);\n\n    return `Alarm in ${hours}h ${minutes}m ${seconds}s`; // Format the remaining time\n  };\n\n  const toggleAlarm = (id) => {\n    setAlarms((prev) =>\n      prev.map((alarm) =>\n        alarm.id === id ? { ...alarm, isActive: !alarm.isActive } : alarm\n      )\n    );\n  };\n\n  // Handle the click on the SVG to show the form\n  const handleSvgClick = () => {\n    setShowForm(true); // Show the form every time the SVG is clicked\n    setIsSvgClicked(true); // Set to true after the first click\n  };\n\n  return (\n    <div className=\"container\">\n      {alarmMessage && <div className=\"notification\">{alarmMessage}</div>}\n\n      {/* Hide the Alarm Clock text after the first SVG click */}\n      {!isSvgClicked && <h2>Alarm Clock</h2>}\n\n      <div className=\"timeDisplay\">\n        <h3>\n          {currentTime.toLocaleTimeString([], {\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n            second: \"2-digit\",\n            hour12: true,\n          })}\n        </h3>\n\n        {/* Always show SVG with tooltip */}\n        <div\n          onMouseEnter={() => setShowTooltip(true)}\n          onMouseLeave={() => setShowTooltip(false)}\n          onClick={handleSvgClick}\n          style={{ cursor: \"pointer\", position: \"relative\" }}\n        >\n          <svg\n            width=\"50px\"\n            height=\"50px\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <g id=\"SVGRepo_bgCarrier\" strokeWidth=\"0\"></g>\n            <g\n              id=\"SVGRepo_tracerCarrier\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            ></g>\n            <g id=\"SVGRepo_iconCarrier\">\n              <path\n                d=\"M11 8C11 7.44772 11.4477 7 12 7C12.5523 7 13 7.44772 13 8V11H16C16.5523 11 17 11.4477 17 12C17 12.5523 16.5523 13 16 13H13V16C13 16.5523 12.5523 17 12 17C11.4477 17 11 16.5523 11 16V13H8C7.44771 13 7 12.5523 7 12C7 11.4477 7.44772 11 8 11H11V8Z\"\n                fill=\"#0F0F0F\"\n              ></path>\n              <path\n                fillRule=\"evenodd\"\n                clipRule=\"evenodd\"\n                d=\"M23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12ZM3.00683 12C3.00683 16.9668 7.03321 20.9932 12 20.9932C16.9668 20.9932 20.9932 16.9668 20.9932 12C20.9932 7.03321 16.9668 3.00683 12 3.00683C7.03321 3.00683 3.00683 7.03321 3.00683 12Z\"\n                fill=\"#0F0F0F\"\n              ></path>\n            </g>\n          </svg>\n\n          {/* Tooltip */}\n          {showTooltip && (\n            <div\n              className=\"tooltip\"\n              style={{\n                top: \"-30px\",\n                left: \"50%\",\n                transform: \"translateX(-50%)\",\n                pointerEvents: \"none\", // Prevent mouse events on tooltip\n              }}\n            >\n              Click to set alarm\n            </div>\n          )}\n        </div>\n\n        {/* Show alarm form only if the SVG is clicked */}\n        {showForm && (\n          <div>\n            <input\n              type=\"time\"\n              value={alarmTime}\n              onChange={(e) => setAlarmTime(e.target.value)}\n              className=\"input\"\n            />\n            <button onClick={handleSetAlarm} className=\"button\">\n              Set Alarm\n            </button>\n          </div>\n        )}\n\n        {alarms.length > 0 && (\n          <div>\n            <h4>Alarms Set:</h4>\n            <ul>\n              {alarms.map((alarm) => (\n                <li key={alarm.id}>\n                  {alarm.time} -{\" \"}\n                  {alarm.isActive\n                    ? calculateRemainingTime(alarm)\n                    : \"Alarm Disabled\"}\n                  <label className=\"switch\" style={{ marginLeft: \"10px\" }}>\n                    <input\n                      type=\"checkbox\"\n                      checked={alarm.isActive}\n                      onChange={() => toggleAlarm(alarm.id)}\n                    />\n                    <span\n                      className={`slider ${alarm.isActive ? \"\" : \"round\"}`}\n                    ></span>\n                  </label>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Alarm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}