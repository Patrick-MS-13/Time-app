{"ast":null,"code":"var _jsxFileName = \"/Users/solomonrojer/Desktop/Patrick/Project/mini-project/src/component/TimeZonePicker.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Select from \"react-select\";\nimport './../style/timezonepicker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimeZonePicker = () => {\n  _s();\n  const [timeZones, setTimeZones] = useState([]);\n  const [selectedTimeZone, setSelectedTimeZone] = useState(\"\");\n  const [currentTime, setCurrentTime] = useState(\"\");\n  const [currentLocationTime, setCurrentLocationTime] = useState(\"\");\n  const [timeDifference, setTimeDifference] = useState(\"\");\n  useEffect(() => {\n    const getTimeZones = () => {\n      try {\n        return Intl.supportedValuesOf(\"timeZone\");\n      } catch (err) {\n        return [\"America/New_York\", \"Europe/London\", \"Asia/Tokyo\", \"Australia/Sydney\", \"UTC\"];\n      }\n    };\n\n    // Get the supported time zones and map them\n    const supportedZones = getTimeZones().map(zone => ({\n      value: zone,\n      label: zone\n    }));\n\n    // Set time zones to state\n    setTimeZones(supportedZones);\n  }, []);\n  useEffect(() => {\n    const updateTime = () => {\n      const now = new Date();\n      // Update current time\n      const options = {\n        timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n        // Get user's current time zone\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        second: \"2-digit\",\n        hour12: true\n      };\n      const formatter = new Intl.DateTimeFormat([], options);\n      setCurrentLocationTime(formatter.format(now));\n\n      // Update selected time zone\n      if (selectedTimeZone) {\n        const selectedOptions = {\n          timeZone: selectedTimeZone,\n          hour: \"2-digit\",\n          minute: \"2-digit\",\n          second: \"2-digit\",\n          hour12: true\n        };\n        const selectedFormatter = new Intl.DateTimeFormat([], selectedOptions);\n        const selectedTime = selectedFormatter.format(now);\n\n        // Calculate time difference\n        const currentUTC = now.getTime() + now.getTimezoneOffset() * 60000;\n        const selectedUTC = now.toLocaleString(\"en-US\", {\n          timeZone: selectedTimeZone\n        });\n        const selectedDate = new Date(selectedUTC).getTime();\n        const differenceInHours = (selectedDate - currentUTC) / (1000 * 60 * 60);\n        const differenceString = `${Math.floor(Math.abs(differenceInHours))} hour(s) ${Math.abs(Math.round(differenceInHours % 1 * 60))} minute(s)`;\n        setTimeDifference(differenceString);\n      }\n    };\n    const interval = setInterval(updateTime, 1000);\n    return () => clearInterval(interval);\n  }, [selectedTimeZone]);\n  const handleTimeZoneChange = selectedOption => {\n    console.log(\"Selected Option:\", selectedOption);\n    setSelectedTimeZone(selectedOption.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"timezone-picker-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"timezone\",\n      children: \"Select Time Zone:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      id: \"timezone\",\n      options: timeZones,\n      onChange: handleTimeZoneChange,\n      placeholder: \"Search and select a time zone\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), selectedTimeZone && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Selected Time Zone: \", selectedTimeZone]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: currentLocationTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Selected Location Time Difference: \", timeDifference]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(TimeZonePicker, \"FVpsIB4O/jKCPm3sKVS93mUUPaM=\");\n_c = TimeZonePicker;\nexport default TimeZonePicker;\nvar _c;\n$RefreshReg$(_c, \"TimeZonePicker\");","map":{"version":3,"names":["React","useState","useEffect","Select","jsxDEV","_jsxDEV","TimeZonePicker","_s","timeZones","setTimeZones","selectedTimeZone","setSelectedTimeZone","currentTime","setCurrentTime","currentLocationTime","setCurrentLocationTime","timeDifference","setTimeDifference","getTimeZones","Intl","supportedValuesOf","err","supportedZones","map","zone","value","label","updateTime","now","Date","options","timeZone","DateTimeFormat","resolvedOptions","hour","minute","second","hour12","formatter","format","selectedOptions","selectedFormatter","selectedTime","currentUTC","getTime","getTimezoneOffset","selectedUTC","toLocaleString","selectedDate","differenceInHours","differenceString","Math","floor","abs","round","interval","setInterval","clearInterval","handleTimeZoneChange","selectedOption","console","log","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","onChange","placeholder","_c","$RefreshReg$"],"sources":["/Users/solomonrojer/Desktop/Patrick/Project/mini-project/src/component/TimeZonePicker.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Select from \"react-select\";\nimport './../style/timezonepicker.css';\n\nconst TimeZonePicker = () => {\n  const [timeZones, setTimeZones] = useState([]);\n  const [selectedTimeZone, setSelectedTimeZone] = useState(\"\");\n  const [currentTime, setCurrentTime] = useState(\"\");\n  const [currentLocationTime, setCurrentLocationTime] = useState(\"\");\n  const [timeDifference, setTimeDifference] = useState(\"\");\n\n  useEffect(() => {\n    const getTimeZones = () => {\n      try {\n        return Intl.supportedValuesOf(\"timeZone\");\n      } catch (err) {\n        return [\n          \"America/New_York\",\n          \"Europe/London\",\n          \"Asia/Tokyo\",\n          \"Australia/Sydney\",\n          \"UTC\",\n        ];\n      }\n    };\n\n    // Get the supported time zones and map them\n    const supportedZones = getTimeZones().map((zone) => ({\n      value: zone,\n      label: zone,\n    }));\n\n    // Set time zones to state\n    setTimeZones(supportedZones);\n  }, []);\n\n  useEffect(() => {\n    const updateTime = () => {\n      const now = new Date();\n      // Update current time\n      const options = {\n        timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone, // Get user's current time zone\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        second: \"2-digit\",\n        hour12: true,\n      };\n      const formatter = new Intl.DateTimeFormat([], options);\n      setCurrentLocationTime(formatter.format(now));\n\n      // Update selected time zone\n      if (selectedTimeZone) {\n        const selectedOptions = {\n          timeZone: selectedTimeZone,\n          hour: \"2-digit\",\n          minute: \"2-digit\",\n          second: \"2-digit\",\n          hour12: true,\n        };\n        const selectedFormatter = new Intl.DateTimeFormat([], selectedOptions);\n        const selectedTime = selectedFormatter.format(now);\n\n        // Calculate time difference\n        const currentUTC = now.getTime() + (now.getTimezoneOffset() * 60000);\n        const selectedUTC = now.toLocaleString(\"en-US\", { timeZone: selectedTimeZone });\n        const selectedDate = new Date(selectedUTC).getTime();\n        const differenceInHours = (selectedDate - currentUTC) / (1000 * 60 * 60);\n        const differenceString = `${Math.floor(Math.abs(differenceInHours))} hour(s) ${Math.abs(Math.round((differenceInHours % 1) * 60))} minute(s)`;\n\n        setTimeDifference(differenceString);\n      }\n    };\n\n    const interval = setInterval(updateTime, 1000);\n    return () => clearInterval(interval);\n  }, [selectedTimeZone]);\n\n  const handleTimeZoneChange = (selectedOption) => {\n    console.log(\"Selected Option:\", selectedOption);\n    setSelectedTimeZone(selectedOption.value);\n  };\n\n  return (\n    <div className=\"timezone-picker-container\">\n      <label htmlFor=\"timezone\">Select Time Zone:</label>\n      <Select\n        id=\"timezone\"\n        options={timeZones}\n        onChange={handleTimeZoneChange}\n        placeholder=\"Search and select a time zone\"\n      />\n      {selectedTimeZone && (\n        <div>\n          <h3>Selected Time Zone: {selectedTimeZone}</h3>\n          <p>{currentLocationTime}</p>\n          <p>Selected Location Time Difference: {timeDifference}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TimeZonePicker;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}