{"ast":null,"code":"var _jsxFileName = \"/Users/solomonrojer/Desktop/Patrick/Project/mini-project/src/component/Alarm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './../style/alarm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Alarm = () => {\n  _s();\n  const [alarmTime, setAlarmTime] = useState('');\n  const [alarms, setAlarms] = useState([]); // Array to hold all alarms\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [alarmMessage, setAlarmMessage] = useState('');\n  const [isAlarmRinging, setIsAlarmRinging] = useState(false);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentTime(new Date());\n      checkAlarms(); // Check alarms every second\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [alarms]); // Only depend on alarms\n\n  const checkAlarms = () => {\n    const formattedCurrentTime = currentTime.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: true\n    });\n    alarms.forEach(alarm => {\n      if (formattedCurrentTime === alarm.time && !isAlarmRinging) {\n        setIsAlarmRinging(true);\n        setAlarmMessage(`Alarm ringing for ${alarm.time}!`);\n        setAlarms(prev => prev.filter(a => a.time !== alarm.time)); // Remove ringing alarm\n\n        // Clear the alarm message after 5 seconds\n        setTimeout(() => {\n          setAlarmMessage('');\n          setIsAlarmRinging(false);\n        }, 5000);\n      }\n    });\n  };\n  const handleSetAlarm = () => {\n    if (alarmTime) {\n      const newAlarm = {\n        time: formatAlarmTime(alarmTime),\n        id: Date.now()\n      };\n      setAlarms(prev => [...prev, newAlarm]);\n      setAlarmMessage(`Alarm set for ${newAlarm.time}`);\n      setAlarmTime('');\n\n      // Clear the alarm message after 3 seconds\n      setTimeout(() => {\n        setAlarmMessage('');\n      }, 3000);\n    } else {\n      setAlarmMessage('Please enter a valid time');\n    }\n  };\n  const formatAlarmTime = time => {\n    const [hours, minutes] = time.split(':');\n    const date = new Date();\n    date.setHours(hours);\n    date.setMinutes(minutes);\n    return date.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: true\n    });\n  };\n  const calculateRemainingTime = alarm => {\n    const [alarmHours, alarmMinutes] = alarm.time.split(':').map(Number);\n    const now = new Date();\n    const alarmDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), alarmHours, alarmMinutes);\n    if (alarmDate <= now) {\n      alarmDate.setDate(alarmDate.getDate() + 1); // Set for next day if the time has passed\n    }\n    const diff = alarmDate.getTime() - now.getTime();\n    if (diff < 0) {\n      return \"Alarm time is invalid\"; // Check if the difference is negative\n    }\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const minutes = Math.floor(diff % (1000 * 60 * 60) / (1000 * 60));\n    const seconds = Math.floor(diff % (1000 * 60) / 1000);\n    return `Alarm in ${hours}h ${minutes}m ${seconds}s`; // Format the remaining time\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [alarmMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification\",\n      children: alarmMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Alarm Clock\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"time\",\n      value: alarmTime,\n      onChange: e => setAlarmTime(e.target.value),\n      className: \"input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSetAlarm,\n      className: \"button\",\n      children: \"Set Alarm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timeDisplay\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Current Time: \", currentTime.toLocaleTimeString([], {\n          hour: '2-digit',\n          minute: '2-digit',\n          second: '2-digit',\n          hour12: true\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), alarms.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Alarms Set:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: alarms.map(alarm => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [alarm.time, \" - \", calculateRemainingTime(alarm)]\n          }, alarm.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"No alarms set.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(Alarm, \"COAE+yzB5IeAE6DwK/2TtsJthcg=\");\n_c = Alarm;\nexport default Alarm;\nvar _c;\n$RefreshReg$(_c, \"Alarm\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Alarm","_s","alarmTime","setAlarmTime","alarms","setAlarms","currentTime","setCurrentTime","Date","alarmMessage","setAlarmMessage","isAlarmRinging","setIsAlarmRinging","interval","setInterval","checkAlarms","clearInterval","formattedCurrentTime","toLocaleTimeString","hour","minute","hour12","forEach","alarm","time","prev","filter","a","setTimeout","handleSetAlarm","newAlarm","formatAlarmTime","id","now","hours","minutes","split","date","setHours","setMinutes","calculateRemainingTime","alarmHours","alarmMinutes","map","Number","alarmDate","getFullYear","getMonth","getDate","setDate","diff","getTime","Math","floor","seconds","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","second","length","_c","$RefreshReg$"],"sources":["/Users/solomonrojer/Desktop/Patrick/Project/mini-project/src/component/Alarm.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './../style/alarm.css';\n\nconst Alarm = () => {\n  const [alarmTime, setAlarmTime] = useState('');\n  const [alarms, setAlarms] = useState([]); // Array to hold all alarms\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [alarmMessage, setAlarmMessage] = useState('');\n  const [isAlarmRinging, setIsAlarmRinging] = useState(false);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentTime(new Date());\n      checkAlarms(); // Check alarms every second\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [alarms]); // Only depend on alarms\n\n  const checkAlarms = () => {\n    const formattedCurrentTime = currentTime.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: true,\n    });\n\n    alarms.forEach((alarm) => {\n      if (formattedCurrentTime === alarm.time && !isAlarmRinging) {\n        setIsAlarmRinging(true);\n        setAlarmMessage(`Alarm ringing for ${alarm.time}!`);\n        setAlarms((prev) => prev.filter(a => a.time !== alarm.time)); // Remove ringing alarm\n\n        // Clear the alarm message after 5 seconds\n        setTimeout(() => {\n          setAlarmMessage('');\n          setIsAlarmRinging(false);\n        }, 5000);\n      }\n    });\n  };\n\n  const handleSetAlarm = () => {\n    if (alarmTime) {\n      const newAlarm = { time: formatAlarmTime(alarmTime), id: Date.now() };\n      setAlarms((prev) => [...prev, newAlarm]);\n      setAlarmMessage(`Alarm set for ${newAlarm.time}`);\n      setAlarmTime('');\n\n      // Clear the alarm message after 3 seconds\n      setTimeout(() => {\n        setAlarmMessage('');\n      }, 3000);\n    } else {\n      setAlarmMessage('Please enter a valid time');\n    }\n  };\n\n  const formatAlarmTime = (time) => {\n    const [hours, minutes] = time.split(':');\n    const date = new Date();\n    date.setHours(hours);\n    date.setMinutes(minutes);\n    return date.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: true,\n    });\n  };\n\n  const calculateRemainingTime = (alarm) => {\n    const [alarmHours, alarmMinutes] = alarm.time.split(':').map(Number);\n    const now = new Date();\n    const alarmDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), alarmHours, alarmMinutes);\n\n    if (alarmDate <= now) {\n        alarmDate.setDate(alarmDate.getDate() + 1); // Set for next day if the time has passed\n    }\n\n    const diff = alarmDate.getTime() - now.getTime();\n\n    if (diff < 0) {\n        return \"Alarm time is invalid\"; // Check if the difference is negative\n    }\n\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n    const seconds = Math.floor((diff % (1000 * 60)) / 1000);\n\n    return `Alarm in ${hours}h ${minutes}m ${seconds}s`; // Format the remaining time\n  };\n\n  return (\n    <div className=\"container\">\n      {alarmMessage && <div className=\"notification\">{alarmMessage}</div>}\n      <h2>Alarm Clock</h2>\n      <input\n        type=\"time\"\n        value={alarmTime}\n        onChange={(e) => setAlarmTime(e.target.value)}\n        className=\"input\"\n      />\n      <button onClick={handleSetAlarm} className=\"button\">\n        Set Alarm\n      </button>\n      <div className=\"timeDisplay\">\n        <h3>Current Time: {currentTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: true })}</h3>\n        {alarms.length > 0 ? (\n          <div>\n            <h4>Alarms Set:</h4>\n            <ul>\n              {alarms.map((alarm) => (\n                <li key={alarm.id}>\n                  {alarm.time} - {calculateRemainingTime(alarm)}\n                </li>\n              ))}\n            </ul>\n          </div>\n        ) : (\n          <h4>No alarms set.</h4>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Alarm;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,IAAIY,IAAI,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACe,cAAc,EAAEC,iBAAiB,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAE3DC,SAAS,CAAC,MAAM;IACd,MAAMgB,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjCP,cAAc,CAAC,IAAIC,IAAI,CAAC,CAAC,CAAC;MAC1BO,WAAW,CAAC,CAAC,CAAC,CAAC;IACjB,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAMC,aAAa,CAACH,QAAQ,CAAC;EACtC,CAAC,EAAE,CAACT,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEd,MAAMW,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAME,oBAAoB,GAAGX,WAAW,CAACY,kBAAkB,CAAC,EAAE,EAAE;MAC9DC,IAAI,EAAE,SAAS;MACfC,MAAM,EAAE,SAAS;MACjBC,MAAM,EAAE;IACV,CAAC,CAAC;IAEFjB,MAAM,CAACkB,OAAO,CAAEC,KAAK,IAAK;MACxB,IAAIN,oBAAoB,KAAKM,KAAK,CAACC,IAAI,IAAI,CAACb,cAAc,EAAE;QAC1DC,iBAAiB,CAAC,IAAI,CAAC;QACvBF,eAAe,CAAC,qBAAqBa,KAAK,CAACC,IAAI,GAAG,CAAC;QACnDnB,SAAS,CAAEoB,IAAI,IAAKA,IAAI,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACH,IAAI,KAAKD,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;;QAE9D;QACAI,UAAU,CAAC,MAAM;UACflB,eAAe,CAAC,EAAE,CAAC;UACnBE,iBAAiB,CAAC,KAAK,CAAC;QAC1B,CAAC,EAAE,IAAI,CAAC;MACV;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAMiB,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAI3B,SAAS,EAAE;MACb,MAAM4B,QAAQ,GAAG;QAAEN,IAAI,EAAEO,eAAe,CAAC7B,SAAS,CAAC;QAAE8B,EAAE,EAAExB,IAAI,CAACyB,GAAG,CAAC;MAAE,CAAC;MACrE5B,SAAS,CAAEoB,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEK,QAAQ,CAAC,CAAC;MACxCpB,eAAe,CAAC,iBAAiBoB,QAAQ,CAACN,IAAI,EAAE,CAAC;MACjDrB,YAAY,CAAC,EAAE,CAAC;;MAEhB;MACAyB,UAAU,CAAC,MAAM;QACflB,eAAe,CAAC,EAAE,CAAC;MACrB,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,MAAM;MACLA,eAAe,CAAC,2BAA2B,CAAC;IAC9C;EACF,CAAC;EAED,MAAMqB,eAAe,GAAIP,IAAI,IAAK;IAChC,MAAM,CAACU,KAAK,EAAEC,OAAO,CAAC,GAAGX,IAAI,CAACY,KAAK,CAAC,GAAG,CAAC;IACxC,MAAMC,IAAI,GAAG,IAAI7B,IAAI,CAAC,CAAC;IACvB6B,IAAI,CAACC,QAAQ,CAACJ,KAAK,CAAC;IACpBG,IAAI,CAACE,UAAU,CAACJ,OAAO,CAAC;IACxB,OAAOE,IAAI,CAACnB,kBAAkB,CAAC,EAAE,EAAE;MACjCC,IAAI,EAAE,SAAS;MACfC,MAAM,EAAE,SAAS;MACjBC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC;EAED,MAAMmB,sBAAsB,GAAIjB,KAAK,IAAK;IACxC,MAAM,CAACkB,UAAU,EAAEC,YAAY,CAAC,GAAGnB,KAAK,CAACC,IAAI,CAACY,KAAK,CAAC,GAAG,CAAC,CAACO,GAAG,CAACC,MAAM,CAAC;IACpE,MAAMX,GAAG,GAAG,IAAIzB,IAAI,CAAC,CAAC;IACtB,MAAMqC,SAAS,GAAG,IAAIrC,IAAI,CAACyB,GAAG,CAACa,WAAW,CAAC,CAAC,EAAEb,GAAG,CAACc,QAAQ,CAAC,CAAC,EAAEd,GAAG,CAACe,OAAO,CAAC,CAAC,EAAEP,UAAU,EAAEC,YAAY,CAAC;IAEtG,IAAIG,SAAS,IAAIZ,GAAG,EAAE;MAClBY,SAAS,CAACI,OAAO,CAACJ,SAAS,CAACG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAChD;IAEA,MAAME,IAAI,GAAGL,SAAS,CAACM,OAAO,CAAC,CAAC,GAAGlB,GAAG,CAACkB,OAAO,CAAC,CAAC;IAEhD,IAAID,IAAI,GAAG,CAAC,EAAE;MACV,OAAO,uBAAuB,CAAC,CAAC;IACpC;IAEA,MAAMhB,KAAK,GAAGkB,IAAI,CAACC,KAAK,CAACH,IAAI,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;IACjD,MAAMf,OAAO,GAAGiB,IAAI,CAACC,KAAK,CAAEH,IAAI,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,IAAK,IAAI,GAAG,EAAE,CAAC,CAAC;IACnE,MAAMI,OAAO,GAAGF,IAAI,CAACC,KAAK,CAAEH,IAAI,IAAI,IAAI,GAAG,EAAE,CAAC,GAAI,IAAI,CAAC;IAEvD,OAAO,YAAYhB,KAAK,KAAKC,OAAO,KAAKmB,OAAO,GAAG,CAAC,CAAC;EACvD,CAAC;EAED,oBACEvD,OAAA;IAAKwD,SAAS,EAAC,WAAW;IAAAC,QAAA,GACvB/C,YAAY,iBAAIV,OAAA;MAAKwD,SAAS,EAAC,cAAc;MAAAC,QAAA,EAAE/C;IAAY;MAAAgD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACnE7D,OAAA;MAAAyD,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpB7D,OAAA;MACE8D,IAAI,EAAC,MAAM;MACXC,KAAK,EAAE5D,SAAU;MACjB6D,QAAQ,EAAGC,CAAC,IAAK7D,YAAY,CAAC6D,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC9CP,SAAS,EAAC;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB,CAAC,eACF7D,OAAA;MAAQmE,OAAO,EAAErC,cAAe;MAAC0B,SAAS,EAAC,QAAQ;MAAAC,QAAA,EAAC;IAEpD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACT7D,OAAA;MAAKwD,SAAS,EAAC,aAAa;MAAAC,QAAA,gBAC1BzD,OAAA;QAAAyD,QAAA,GAAI,gBAAc,EAAClD,WAAW,CAACY,kBAAkB,CAAC,EAAE,EAAE;UAAEC,IAAI,EAAE,SAAS;UAAEC,MAAM,EAAE,SAAS;UAAE+C,MAAM,EAAE,SAAS;UAAE9C,MAAM,EAAE;QAAK,CAAC,CAAC;MAAA;QAAAoC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EACnIxD,MAAM,CAACgE,MAAM,GAAG,CAAC,gBAChBrE,OAAA;QAAAyD,QAAA,gBACEzD,OAAA;UAAAyD,QAAA,EAAI;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACpB7D,OAAA;UAAAyD,QAAA,EACGpD,MAAM,CAACuC,GAAG,CAAEpB,KAAK,iBAChBxB,OAAA;YAAAyD,QAAA,GACGjC,KAAK,CAACC,IAAI,EAAC,KAAG,EAACgB,sBAAsB,CAACjB,KAAK,CAAC;UAAA,GADtCA,KAAK,CAACS,EAAE;YAAAyB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEb,CACL;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,gBAEN7D,OAAA;QAAAyD,QAAA,EAAI;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CACvB;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC3D,EAAA,CAxHID,KAAK;AAAAqE,EAAA,GAALrE,KAAK;AA0HX,eAAeA,KAAK;AAAC,IAAAqE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}