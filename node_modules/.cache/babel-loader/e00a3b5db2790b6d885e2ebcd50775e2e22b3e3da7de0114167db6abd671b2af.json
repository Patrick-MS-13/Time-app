{"ast":null,"code":"var _jsxFileName = \"/Users/solomonrojer/Desktop/Patrick/Project/mini-project/src/component/TimeZonePicker.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Select from \"react-select\";\nimport './../style/timezonepicker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimeZonePicker = () => {\n  _s();\n  const [timeZones, setTimeZones] = useState([]);\n  const [selectedTimeZone, setSelectedTimeZone] = useState(\"\");\n  const [timeDifference, setTimeDifference] = useState(\"00:00:00\"); // Initialize time difference\n  const [selectedLocationTime, setSelectedLocationTime] = useState(\"\"); // Selected location time for display\n  const [isAheadOrBehind, setIsAheadOrBehind] = useState(\"\"); // State to track if selected time zone is ahead or behind\n\n  useEffect(() => {\n    const getTimeZones = () => {\n      try {\n        return Intl.supportedValuesOf(\"timeZone\");\n      } catch (err) {\n        return [\"America/New_York\", \"Europe/London\", \"Asia/Tokyo\", \"Australia/Sydney\", \"UTC\"];\n      }\n    };\n\n    // Get the supported time zones and map them\n    const supportedZones = getTimeZones().map(zone => ({\n      value: zone,\n      label: zone\n    }));\n\n    // Set time zones to state\n    setTimeZones(supportedZones);\n  }, []);\n  useEffect(() => {\n    const updateTime = () => {\n      if (selectedTimeZone) {\n        const now = new Date();\n\n        // Get the current location time\n        const currentOptions = {\n          timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone\n        };\n        const currentTime = now.toLocaleString(\"en-US\", currentOptions);\n\n        // Get the selected time zone time\n        const selectedOptions = {\n          timeZone: selectedTimeZone\n        };\n        const selectedTime = now.toLocaleString(\"en-US\", selectedOptions);\n\n        // Calculate time difference in seconds\n        const currentDateTime = new Date(currentTime).getTime();\n        const selectedDateTime = new Date(selectedTime).getTime();\n        const differenceInSeconds = Math.floor((selectedDateTime - currentDateTime) / 1000);\n\n        // Convert difference to hh:mm:ss format\n        const hours = String(Math.floor(Math.abs(differenceInSeconds) / 3600)).padStart(2, '0');\n        const minutes = String(Math.floor(Math.abs(differenceInSeconds) % 3600 / 60)).padStart(2, '0');\n        const seconds = String(Math.abs(differenceInSeconds) % 60).padStart(2, '0');\n        setTimeDifference(`${hours}:${minutes}:${seconds}`);\n\n        // Determine if current time is ahead or behind\n        if (differenceInSeconds > 0) {\n          setIsAheadOrBehind(\"Ahead of the current location\");\n        } else if (differenceInSeconds < 0) {\n          setIsAheadOrBehind(\"Behind the current location\");\n        } else {\n          setIsAheadOrBehind(\"Both locations are at the same time\");\n        }\n\n        // Format selected location time to dd/mm/yyyy\n        const selectedDateObj = new Date(selectedTime);\n        const formattedDate = `${String(selectedDateObj.getDate()).padStart(2, '0')}/${String(selectedDateObj.getMonth() + 1).padStart(2, '0')}/${selectedDateObj.getFullYear()}`;\n        const formattedTime = selectedDateObj.toLocaleTimeString([], {\n          hour: '2-digit',\n          minute: '2-digit',\n          second: '2-digit'\n        });\n        setSelectedLocationTime(`${formattedDate} ${formattedTime}`); // Set formatted date and time\n      }\n    };\n    const interval = setInterval(updateTime, 1000);\n    return () => clearInterval(interval);\n  }, [selectedTimeZone]);\n  const handleTimeZoneChange = selectedOption => {\n    setSelectedTimeZone(selectedOption.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"timezone-picker-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"timezone\",\n      children: \"Select Time Zone:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      id: \"timezone\",\n      options: timeZones,\n      onChange: handleTimeZoneChange,\n      placeholder: \"Search and select a time zone\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), selectedTimeZone && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"(`$\", formattedDate, \" | $\", formattedTime, \"`);\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: selectedLocationTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Time Difference: \", timeDifference]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: isAheadOrBehind\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(TimeZonePicker, \"BTEETLU6g0aFrDNsECyfB5LA7cM=\");\n_c = TimeZonePicker;\nexport default TimeZonePicker;\nvar _c;\n$RefreshReg$(_c, \"TimeZonePicker\");","map":{"version":3,"names":["React","useState","useEffect","Select","jsxDEV","_jsxDEV","TimeZonePicker","_s","timeZones","setTimeZones","selectedTimeZone","setSelectedTimeZone","timeDifference","setTimeDifference","selectedLocationTime","setSelectedLocationTime","isAheadOrBehind","setIsAheadOrBehind","getTimeZones","Intl","supportedValuesOf","err","supportedZones","map","zone","value","label","updateTime","now","Date","currentOptions","timeZone","DateTimeFormat","resolvedOptions","currentTime","toLocaleString","selectedOptions","selectedTime","currentDateTime","getTime","selectedDateTime","differenceInSeconds","Math","floor","hours","String","abs","padStart","minutes","seconds","selectedDateObj","formattedDate","getDate","getMonth","getFullYear","formattedTime","toLocaleTimeString","hour","minute","second","interval","setInterval","clearInterval","handleTimeZoneChange","selectedOption","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","options","onChange","placeholder","_c","$RefreshReg$"],"sources":["/Users/solomonrojer/Desktop/Patrick/Project/mini-project/src/component/TimeZonePicker.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Select from \"react-select\";\nimport './../style/timezonepicker.css';\n\nconst TimeZonePicker = () => {\n  const [timeZones, setTimeZones] = useState([]);\n  const [selectedTimeZone, setSelectedTimeZone] = useState(\"\");\n  const [timeDifference, setTimeDifference] = useState(\"00:00:00\"); // Initialize time difference\n  const [selectedLocationTime, setSelectedLocationTime] = useState(\"\"); // Selected location time for display\n  const [isAheadOrBehind, setIsAheadOrBehind] = useState(\"\"); // State to track if selected time zone is ahead or behind\n\n  useEffect(() => {\n    const getTimeZones = () => {\n      try {\n        return Intl.supportedValuesOf(\"timeZone\");\n      } catch (err) {\n        return [\n          \"America/New_York\",\n          \"Europe/London\",\n          \"Asia/Tokyo\",\n          \"Australia/Sydney\",\n          \"UTC\",\n        ];\n      }\n    };\n\n    // Get the supported time zones and map them\n    const supportedZones = getTimeZones().map((zone) => ({\n      value: zone,\n      label: zone,\n    }));\n\n    // Set time zones to state\n    setTimeZones(supportedZones);\n  }, []);\n\n  useEffect(() => {\n    const updateTime = () => {\n      if (selectedTimeZone) {\n        const now = new Date();\n\n        // Get the current location time\n        const currentOptions = {\n          timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n        };\n        const currentTime = now.toLocaleString(\"en-US\", currentOptions);\n\n        // Get the selected time zone time\n        const selectedOptions = {\n          timeZone: selectedTimeZone,\n        };\n        const selectedTime = now.toLocaleString(\"en-US\", selectedOptions);\n\n        // Calculate time difference in seconds\n        const currentDateTime = new Date(currentTime).getTime();\n        const selectedDateTime = new Date(selectedTime).getTime();\n        const differenceInSeconds = Math.floor((selectedDateTime - currentDateTime) / 1000);\n\n        // Convert difference to hh:mm:ss format\n        const hours = String(Math.floor(Math.abs(differenceInSeconds) / 3600)).padStart(2, '0');\n        const minutes = String(Math.floor((Math.abs(differenceInSeconds) % 3600) / 60)).padStart(2, '0');\n        const seconds = String(Math.abs(differenceInSeconds) % 60).padStart(2, '0');\n        setTimeDifference(`${hours}:${minutes}:${seconds}`);\n\n        // Determine if current time is ahead or behind\n        if (differenceInSeconds > 0) {\n          setIsAheadOrBehind(\"Ahead of the current location\");\n        } else if (differenceInSeconds < 0) {\n          setIsAheadOrBehind(\"Behind the current location\");\n        } else {\n          setIsAheadOrBehind(\"Both locations are at the same time\");\n        }\n\n        // Format selected location time to dd/mm/yyyy\n        const selectedDateObj = new Date(selectedTime);\n        const formattedDate = `${String(selectedDateObj.getDate()).padStart(2, '0')}/${String(selectedDateObj.getMonth() + 1).padStart(2, '0')}/${selectedDateObj.getFullYear()}`;\n        const formattedTime = selectedDateObj.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });\n\n        setSelectedLocationTime(`${formattedDate} ${formattedTime}`); // Set formatted date and time\n      }\n    };\n\n    const interval = setInterval(updateTime, 1000);\n    return () => clearInterval(interval);\n  }, [selectedTimeZone]);\n\n  const handleTimeZoneChange = (selectedOption) => {\n    setSelectedTimeZone(selectedOption.value);\n  };\n\n  return (\n    <div className=\"timezone-picker-container\">\n      <label htmlFor=\"timezone\">Select Time Zone:</label>\n      <Select\n        id=\"timezone\"\n        options={timeZones}\n        onChange={handleTimeZoneChange}\n        placeholder=\"Search and select a time zone\"\n      />\n      {selectedTimeZone && (\n        <div>\n          <h3>(`${formattedDate} | ${formattedTime}`);\n          </h3>\n          <p>{selectedLocationTime}</p>\n          <p>Time Difference: {timeDifference}</p>\n          <p>{isAheadOrBehind}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TimeZonePicker;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}