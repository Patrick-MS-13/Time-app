{"ast":null,"code":"var _jsxFileName = \"/Users/solomonrojer/Desktop/Patrick/Project/mini-project/src/component/Alarm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./../style/alarm.css\"; // Ensure your CSS file is correctly linked\nimport Modal from \"./Modal\"; // Import your modal component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Alarm = () => {\n  _s();\n  const [alarmTime, setAlarmTime] = useState(\"\");\n  const [alarms, setAlarms] = useState([]); // Array to hold all alarms\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [alarmMessage, setAlarmMessage] = useState(\"\");\n  const [showForm, setShowForm] = useState(false);\n  const [isSvgClicked, setIsSvgClicked] = useState(false);\n  const [showModal, setShowModal] = useState(false); // State to control modal visibility\n  const [selectedAlarmId, setSelectedAlarmId] = useState(null); // State to hold the alarm ID for confirmation\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const now = new Date();\n      setCurrentTime(now);\n      checkAlarms(now); // Pass current time to check alarms\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [alarms]); // Only depend on alarms\n\n  const checkAlarms = now => {\n    setAlarms(prevAlarms => prevAlarms.map(alarm => {\n      const [alarmHours, alarmMinutes] = alarm.time24.split(\":\").map(Number);\n      const alarmDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), alarmHours, alarmMinutes);\n      if (alarmDate < now) {\n        alarmDate.setDate(alarmDate.getDate() + 1); // Set for the next day if time has passed\n      }\n\n      // Check if the alarm should ring\n      if (now.getHours() === alarmHours && now.getMinutes() === alarmMinutes && alarm.isActive) {\n        // Alarm is ringing, disable it\n        setAlarmMessage(`Alarm ringing for ${alarm.time12}!`);\n        return {\n          ...alarm,\n          isActive: false\n        }; // Turn off the alarm after it rings\n      }\n      return alarm; // Return unchanged if the alarm shouldn't ring yet\n    }));\n\n    // Clear the alarm message after 5 seconds\n    setTimeout(() => {\n      setAlarmMessage(\"\");\n    }, 5000);\n  };\n  const handleSetAlarm = () => {\n    if (alarmTime) {\n      const newAlarm = {\n        time24: alarmTime,\n        time12: formatAlarmTime(alarmTime),\n        id: Date.now(),\n        isActive: true\n      };\n      setAlarms(prev => [...prev, newAlarm]);\n      setAlarmMessage(`Alarm set for ${newAlarm.time12}`);\n      setAlarmTime(\"\");\n      setShowForm(false);\n\n      // Clear the alarm message after 3 seconds\n      setTimeout(() => {\n        setAlarmMessage(\"\");\n      }, 3000);\n    } else {\n      setAlarmMessage(\"Please enter a valid time\");\n    }\n  };\n  const formatAlarmTime = time => {\n    const [hours, minutes] = time.split(\":\").map(Number);\n    const ampm = hours >= 12 ? \"PM\" : \"AM\";\n    const formattedHours = hours % 12 || 12;\n    return `${formattedHours}:${minutes < 10 ? \"0\" + minutes : minutes} ${ampm}`;\n  };\n  const calculateRemainingTime = alarm => {\n    const [alarmHours, alarmMinutes] = alarm.time24.split(\":\").map(Number);\n    const now = new Date();\n    const alarmDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), alarmHours, alarmMinutes);\n    if (alarmDate < now) {\n      alarmDate.setDate(alarmDate.getDate() + 1);\n    }\n    return alarmDate.getTime() - now.getTime(); // Return the difference in milliseconds\n  };\n  const toggleAlarm = id => {\n    const alarmToToggle = alarms.find(alarm => alarm.id === id);\n\n    // Show the modal for confirmation\n    if (alarmToToggle.isActive) {\n      setSelectedAlarmId(id);\n      setShowModal(true);\n    } else {\n      // If the alarm is inactive, simply toggle it\n      setAlarms(prev => prev.map(alarm => alarm.id === id ? {\n        ...alarm,\n        isActive: !alarm.isActive\n      } : alarm));\n    }\n  };\n  const confirmToggleAlarm = () => {\n    setAlarms(prev => prev.map(alarm => {\n      if (alarm.id === selectedAlarmId) {\n        return {\n          ...alarm,\n          isActive: false\n        }; // Deactivate the alarm\n      }\n      return alarm; // Return unchanged if it's not the selected alarm\n    }));\n    setShowModal(false);\n    setSelectedAlarmId(null);\n  };\n  const cancelToggleAlarm = () => {\n    setShowModal(false);\n    setSelectedAlarmId(null);\n  };\n  const handleSvgClick = () => {\n    setShowForm(true);\n    setIsSvgClicked(true);\n  };\n  const sortedAlarms = [...alarms].sort((a, b) => calculateRemainingTime(a) - calculateRemainingTime(b));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [alarmMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification\",\n      children: alarmMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 24\n    }, this), !isSvgClicked && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Alarm Clock\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timeDisplay\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: currentTime.toLocaleTimeString([], {\n          hour: \"2-digit\",\n          minute: \"2-digit\",\n          second: \"2-digit\",\n          hour12: true\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: handleSvgClick,\n        style: {\n          cursor: \"pointer\",\n          position: \"relative\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"50px\",\n          height: \"50px\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          children: [/*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M11 8C11 7.44772 11.4477 7 12 7C12.5523 7 13 7.44772 13 8V11H16C16.5523 11 17 11.4477 17 12C17 12.5523 16.5523 13 16 13H13V16C13 16.5523 12.5523 17 12 17C11.4477 17 11 16.5523 11 16V13H8C7.44771 13 7 12.5523 7 12C7 11.4477 7.44772 11 8 11H11V8Z\",\n            fill: \"#0F0F0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M12 4C11.4477 4 11 4.44772 11 5V6C6.262 6 2 10.262 2 15C2 15.5523 2.44772 16 3 16C3.55228 16 4 15.5523 4 15C4 10.5817 7.58172 7 12 7C12.5523 7 13 6.55228 13 6V5C13 4.44772 12.5523 4 12 4Z\",\n            fill: \"#0F0F0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M12 20C12.5523 20 13 20.4477 13 21V22C13 22.5523 12.5523 23 12 23C11.4477 23 11 22.5523 11 22V21C11 20.4477 11.4477 20 12 20Z\",\n            fill: \"#0F0F0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M20.7071 17.2929C20.3166 16.9024 19.6834 16.9024 19.2929 17.2929L18.5858 18L17.8787 17.2929C17.4882 16.9024 16.855 16.9024 16.4645 17.2929C16.074 17.6834 16.074 18.3166 16.4645 18.7071L17.2929 19.5355C17.6834 19.926 18.3166 19.926 18.7071 19.5355L20.7071 17.5355C21.0976 17.145 21.0976 16.5118 20.7071 17.2929Z\",\n            fill: \"#0F0F0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), showModal && /*#__PURE__*/_jsxDEV(Modal, {\n      message: \"Are you sure you want to deactivate this alarm?\",\n      onConfirm: confirmToggleAlarm,\n      onCancel: cancelToggleAlarm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }, this), showForm && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"time\",\n        value: alarmTime,\n        onChange: e => setAlarmTime(e.target.value),\n        className: \"input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSetAlarm,\n        className: \"button\",\n        children: \"Set Alarm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }, this), sortedAlarms.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: sortedAlarms.map(alarm => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"glassy-effect\",\n          style: {\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            margin: \"10px 0\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              flex: 1,\n              textAlign: \"left\",\n              padding: \"0px 100px 0px 0px\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                fontSize: \"1.5em\",\n                display: \"flex\",\n                alignItems: \"baseline\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: alarm.time12.split(\" \")[0]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 21\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  fontSize: \"0.4em\",\n                  marginLeft: \"5px\"\n                },\n                children: alarm.time12.split(\" \")[1]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 21\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                fontSize: \"0.6em\",\n                marginTop: \"2px\"\n              },\n              children: alarm.isActive ? `Alarm in ${Math.floor(calculateRemainingTime(alarm) / (1000 * 60 * 60))}h ${Math.floor(calculateRemainingTime(alarm) % (1000 * 60 * 60) / (1000 * 60))}m ${Math.floor(calculateRemainingTime(alarm) % (1000 * 60) / 1000)}s` : \"Alarm Disabled\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"switch\",\n            style: {\n              marginLeft: \"10px\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: alarm.isActive,\n              onChange: () => toggleAlarm(alarm.id),\n              style: {\n                transform: \"scale(0.8)\"\n              } // Adjust slider size\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `slider ${alarm.isActive ? \"\" : \"round\"}`,\n              style: {\n                width: \"49px\",\n                height: \"22px\"\n              } // Adjust slider size\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 17\n          }, this)]\n        }, alarm.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s(Alarm, \"AqZppZx6ucxtvkbatkmvGiaZjcE=\");\n_c = Alarm;\nexport default Alarm;\nvar _c;\n$RefreshReg$(_c, \"Alarm\");","map":{"version":3,"names":["React","useState","useEffect","Modal","jsxDEV","_jsxDEV","Alarm","_s","alarmTime","setAlarmTime","alarms","setAlarms","currentTime","setCurrentTime","Date","alarmMessage","setAlarmMessage","showForm","setShowForm","isSvgClicked","setIsSvgClicked","showModal","setShowModal","selectedAlarmId","setSelectedAlarmId","interval","setInterval","now","checkAlarms","clearInterval","prevAlarms","map","alarm","alarmHours","alarmMinutes","time24","split","Number","alarmDate","getFullYear","getMonth","getDate","setDate","getHours","getMinutes","isActive","time12","setTimeout","handleSetAlarm","newAlarm","formatAlarmTime","id","prev","time","hours","minutes","ampm","formattedHours","calculateRemainingTime","getTime","toggleAlarm","alarmToToggle","find","confirmToggleAlarm","cancelToggleAlarm","handleSvgClick","sortedAlarms","sort","a","b","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleTimeString","hour","minute","second","hour12","onClick","style","cursor","position","width","height","viewBox","fill","xmlns","d","message","onConfirm","onCancel","type","value","onChange","e","target","length","display","justifyContent","alignItems","margin","flex","textAlign","padding","fontSize","marginLeft","marginTop","Math","floor","checked","transform","_c","$RefreshReg$"],"sources":["/Users/solomonrojer/Desktop/Patrick/Project/mini-project/src/component/Alarm.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./../style/alarm.css\"; // Ensure your CSS file is correctly linked\nimport Modal from \"./Modal\"; // Import your modal component\n\nconst Alarm = () => {\n  const [alarmTime, setAlarmTime] = useState(\"\");\n  const [alarms, setAlarms] = useState([]); // Array to hold all alarms\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [alarmMessage, setAlarmMessage] = useState(\"\");\n  const [showForm, setShowForm] = useState(false);\n  const [isSvgClicked, setIsSvgClicked] = useState(false);\n  const [showModal, setShowModal] = useState(false); // State to control modal visibility\n  const [selectedAlarmId, setSelectedAlarmId] = useState(null); // State to hold the alarm ID for confirmation\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const now = new Date();\n      setCurrentTime(now);\n      checkAlarms(now); // Pass current time to check alarms\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [alarms]); // Only depend on alarms\n\n  const checkAlarms = (now) => {\n    setAlarms((prevAlarms) =>\n      prevAlarms.map((alarm) => {\n        const [alarmHours, alarmMinutes] = alarm.time24.split(\":\").map(Number);\n        const alarmDate = new Date(\n          now.getFullYear(),\n          now.getMonth(),\n          now.getDate(),\n          alarmHours,\n          alarmMinutes\n        );\n\n        if (alarmDate < now) {\n          alarmDate.setDate(alarmDate.getDate() + 1); // Set for the next day if time has passed\n        }\n\n        // Check if the alarm should ring\n        if (\n          now.getHours() === alarmHours &&\n          now.getMinutes() === alarmMinutes &&\n          alarm.isActive\n        ) {\n          // Alarm is ringing, disable it\n          setAlarmMessage(`Alarm ringing for ${alarm.time12}!`);\n          return { ...alarm, isActive: false }; // Turn off the alarm after it rings\n        }\n\n        return alarm; // Return unchanged if the alarm shouldn't ring yet\n      })\n    );\n\n    // Clear the alarm message after 5 seconds\n    setTimeout(() => {\n      setAlarmMessage(\"\");\n    }, 5000);\n  };\n\n  const handleSetAlarm = () => {\n    if (alarmTime) {\n      const newAlarm = {\n        time24: alarmTime,\n        time12: formatAlarmTime(alarmTime),\n        id: Date.now(),\n        isActive: true,\n      };\n      setAlarms((prev) => [...prev, newAlarm]);\n      setAlarmMessage(`Alarm set for ${newAlarm.time12}`);\n      setAlarmTime(\"\");\n      setShowForm(false);\n\n      // Clear the alarm message after 3 seconds\n      setTimeout(() => {\n        setAlarmMessage(\"\");\n      }, 3000);\n    } else {\n      setAlarmMessage(\"Please enter a valid time\");\n    }\n  };\n\n  const formatAlarmTime = (time) => {\n    const [hours, minutes] = time.split(\":\").map(Number);\n    const ampm = hours >= 12 ? \"PM\" : \"AM\";\n    const formattedHours = hours % 12 || 12;\n    return `${formattedHours}:${minutes < 10 ? \"0\" + minutes : minutes} ${ampm}`;\n  };\n\n  const calculateRemainingTime = (alarm) => {\n    const [alarmHours, alarmMinutes] = alarm.time24.split(\":\").map(Number);\n    const now = new Date();\n    const alarmDate = new Date(\n      now.getFullYear(),\n      now.getMonth(),\n      now.getDate(),\n      alarmHours,\n      alarmMinutes\n    );\n\n    if (alarmDate < now) {\n      alarmDate.setDate(alarmDate.getDate() + 1);\n    }\n\n    return alarmDate.getTime() - now.getTime(); // Return the difference in milliseconds\n  };\n\n  const toggleAlarm = (id) => {\n    const alarmToToggle = alarms.find((alarm) => alarm.id === id);\n    \n    // Show the modal for confirmation\n    if (alarmToToggle.isActive) {\n      setSelectedAlarmId(id);\n      setShowModal(true);\n    } else {\n      // If the alarm is inactive, simply toggle it\n      setAlarms((prev) => \n        prev.map((alarm) =>\n          alarm.id === id ? { ...alarm, isActive: !alarm.isActive } : alarm\n        )\n      );\n    }\n  };\n\n  const confirmToggleAlarm = () => {\n    setAlarms((prev) =>\n      prev.map((alarm) => {\n        if (alarm.id === selectedAlarmId) {\n          return { ...alarm, isActive: false }; // Deactivate the alarm\n        }\n        return alarm; // Return unchanged if it's not the selected alarm\n      })\n    );\n    setShowModal(false);\n    setSelectedAlarmId(null);\n  };\n\n  const cancelToggleAlarm = () => {\n    setShowModal(false);\n    setSelectedAlarmId(null);\n  };\n\n  const handleSvgClick = () => {\n    setShowForm(true);\n    setIsSvgClicked(true);\n  };\n\n  const sortedAlarms = [...alarms].sort((a, b) => calculateRemainingTime(a) - calculateRemainingTime(b));\n\n  return (\n    <div className=\"container\">\n      {alarmMessage && <div className=\"notification\">{alarmMessage}</div>}\n      {!isSvgClicked && <h2>Alarm Clock</h2>}\n      <div className=\"timeDisplay\">\n        <h3>\n          {currentTime.toLocaleTimeString([], {\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n            second: \"2-digit\",\n            hour12: true,\n          })}\n        </h3>\n        <div\n          onClick={handleSvgClick}\n          style={{ cursor: \"pointer\", position: \"relative\" }}\n        >\n          <svg\n            width=\"50px\"\n            height=\"50px\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M11 8C11 7.44772 11.4477 7 12 7C12.5523 7 13 7.44772 13 8V11H16C16.5523 11 17 11.4477 17 12C17 12.5523 16.5523 13 16 13H13V16C13 16.5523 12.5523 17 12 17C11.4477 17 11 16.5523 11 16V13H8C7.44771 13 7 12.5523 7 12C7 11.4477 7.44772 11 8 11H11V8Z\"\n              fill=\"#0F0F0F\"\n            />\n            <path\n              d=\"M12 4C11.4477 4 11 4.44772 11 5V6C6.262 6 2 10.262 2 15C2 15.5523 2.44772 16 3 16C3.55228 16 4 15.5523 4 15C4 10.5817 7.58172 7 12 7C12.5523 7 13 6.55228 13 6V5C13 4.44772 12.5523 4 12 4Z\"\n              fill=\"#0F0F0F\"\n            />\n            <path\n              d=\"M12 20C12.5523 20 13 20.4477 13 21V22C13 22.5523 12.5523 23 12 23C11.4477 23 11 22.5523 11 22V21C11 20.4477 11.4477 20 12 20Z\"\n              fill=\"#0F0F0F\"\n            />\n            <path\n              d=\"M20.7071 17.2929C20.3166 16.9024 19.6834 16.9024 19.2929 17.2929L18.5858 18L17.8787 17.2929C17.4882 16.9024 16.855 16.9024 16.4645 17.2929C16.074 17.6834 16.074 18.3166 16.4645 18.7071L17.2929 19.5355C17.6834 19.926 18.3166 19.926 18.7071 19.5355L20.7071 17.5355C21.0976 17.145 21.0976 16.5118 20.7071 17.2929Z\"\n              fill=\"#0F0F0F\"\n            />\n          </svg>\n        </div>\n      </div>\n      {showModal && (\n        <Modal\n          message=\"Are you sure you want to deactivate this alarm?\"\n          onConfirm={confirmToggleAlarm}\n          onCancel={cancelToggleAlarm}\n        />\n      )}\n      {showForm && (\n        <div>\n          <input\n            type=\"time\"\n            value={alarmTime}\n            onChange={(e) => setAlarmTime(e.target.value)}\n            className=\"input\"\n          />\n          <button onClick={handleSetAlarm} className=\"button\">\n            Set Alarm\n          </button>\n        </div>\n      )}\n      {sortedAlarms.length > 0 && (\n        <div>\n          <ul>\n            {sortedAlarms.map((alarm) => (\n              <li\n                key={alarm.id}\n                className=\"glassy-effect\"\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"space-between\",\n                  alignItems: \"center\",\n                  margin: \"10px 0\",\n                }}\n              >\n                <div\n                  style={{\n                    flex: 1,\n                    textAlign: \"left\",\n                    padding: \"0px 100px 0px 0px\",\n                  }}\n                >\n                  <div\n                    style={{\n                      fontSize: \"1.5em\",\n                      display: \"flex\",\n                      alignItems: \"baseline\",\n                    }}\n                  >\n                    <span>{alarm.time12.split(\" \")[0]}</span>{\" \"}\n                    <span style={{ fontSize: \"0.4em\", marginLeft: \"5px\" }}>\n                      {alarm.time12.split(\" \")[1]}\n                    </span>{\" \"}\n                  </div>\n                  <div style={{ fontSize: \"0.6em\", marginTop: \"2px\" }}>\n                    {alarm.isActive\n                      ? `Alarm in ${Math.floor(calculateRemainingTime(alarm) / (1000 * 60 * 60))}h ${Math.floor((calculateRemainingTime(alarm) % (1000 * 60 * 60)) / (1000 * 60))}m ${Math.floor((calculateRemainingTime(alarm) % (1000 * 60)) / 1000)}s`\n                      : \"Alarm Disabled\"}\n                  </div>\n                </div>\n                <label className=\"switch\" style={{ marginLeft: \"10px\" }}>\n                  <input\n                    type=\"checkbox\"\n                    checked={alarm.isActive}\n                    onChange={() => toggleAlarm(alarm.id)}\n                    style={{ transform: \"scale(0.8)\" }} // Adjust slider size\n                  />\n                  <span\n                    className={`slider ${alarm.isActive ? \"\" : \"round\"}`}\n                    style={{ width: \"49px\", height: \"22px\" }} // Adjust slider size\n                  ></span>\n                </label>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Alarm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}