{"ast":null,"code":"var _jsxFileName = \"/Users/solomonrojer/Desktop/Patrick/Project/mini-project/src/component/Alarm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './../style/alarm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Alarm = () => {\n  _s();\n  const [alarmTime, setAlarmTime] = useState('');\n  const [alarms, setAlarms] = useState([]); // Array to hold all alarms\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [alarmMessage, setAlarmMessage] = useState('');\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  useEffect(() => {\n    checkAlarms();\n  }, [currentTime, alarms]);\n  const checkAlarms = () => {\n    const formattedCurrentTime = currentTime.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: true // Use 12-hour format\n    });\n    alarms.forEach(alarm => {\n      if (formattedCurrentTime === alarm.time) {\n        alert(`Alarm ringing for ${alarm.time}!`);\n        setAlarms(prev => prev.filter(a => a.time !== alarm.time)); // Remove ringing alarm\n      }\n    });\n  };\n  const handleSetAlarm = () => {\n    if (alarmTime) {\n      const newAlarm = {\n        time: alarmTime,\n        id: Date.now()\n      }; // Create a new alarm object\n      setAlarms(prev => [...prev, newAlarm]); // Add the new alarm to the list\n      setAlarmMessage(`Alarm set for ${alarmTime}`);\n      setAlarmTime(''); // Clear input after setting alarm\n    } else {\n      setAlarmMessage('Please enter a valid time');\n    }\n  };\n  const timeUntilAlarm = alarmTime => {\n    const now = new Date();\n    const alarmDate = new Date(now);\n    const [hours, minutes] = alarmTime.split(':');\n    alarmDate.setHours(hours);\n    alarmDate.setMinutes(minutes);\n    alarmDate.setSeconds(0);\n    if (alarmDate < now) {\n      alarmDate.setDate(alarmDate.getDate() + 1); // If the alarm time is in the past, set for the next day\n    }\n    const timeDifference = alarmDate - now;\n    const hoursLeft = Math.floor(timeDifference % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n    const minutesLeft = Math.floor(timeDifference % (1000 * 60 * 60) / (1000 * 60));\n    return `Alarm in ${hoursLeft} hours ${minutesLeft} minutes`;\n  };\n  const formatAlarmTime = time => {\n    const [hours, minutes] = time.split(':');\n    const date = new Date();\n    date.setHours(hours);\n    date.setMinutes(minutes);\n    return date.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: true // Use 12-hour format\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Alarm Clock\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"time\",\n      value: alarmTime,\n      onChange: e => setAlarmTime(e.target.value),\n      className: \"input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSetAlarm,\n      className: \"button\",\n      children: \"Set Alarm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timeDisplay\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Current Time: \", currentTime.toLocaleTimeString([], {\n          hour: '2-digit',\n          minute: '2-digit',\n          hour12: true\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), alarms.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Alarms Set:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: alarms.map(alarm => {\n            const alarmTimeRemaining = timeUntilAlarm(alarm.time);\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [formatAlarmTime(alarm.time), \" - \", alarmTimeRemaining]\n            }, alarm.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"No alarms set.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), alarmMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message\",\n        children: alarmMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(Alarm, \"70RMYFjCNhB6dUPXAw7K1aGcQB8=\");\n_c = Alarm;\nexport default Alarm;\nvar _c;\n$RefreshReg$(_c, \"Alarm\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Alarm","_s","alarmTime","setAlarmTime","alarms","setAlarms","currentTime","setCurrentTime","Date","alarmMessage","setAlarmMessage","interval","setInterval","clearInterval","checkAlarms","formattedCurrentTime","toLocaleTimeString","hour","minute","hour12","forEach","alarm","time","alert","prev","filter","a","handleSetAlarm","newAlarm","id","now","timeUntilAlarm","alarmDate","hours","minutes","split","setHours","setMinutes","setSeconds","setDate","getDate","timeDifference","hoursLeft","Math","floor","minutesLeft","formatAlarmTime","date","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","length","map","alarmTimeRemaining","_c","$RefreshReg$"],"sources":["/Users/solomonrojer/Desktop/Patrick/Project/mini-project/src/component/Alarm.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './../style/alarm.css';\n\nconst Alarm = () => {\n  const [alarmTime, setAlarmTime] = useState('');\n  const [alarms, setAlarms] = useState([]); // Array to hold all alarms\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [alarmMessage, setAlarmMessage] = useState('');\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  useEffect(() => {\n    checkAlarms();\n  }, [currentTime, alarms]);\n\n  const checkAlarms = () => {\n    const formattedCurrentTime = currentTime.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: true, // Use 12-hour format\n    });\n\n    alarms.forEach((alarm) => {\n      if (formattedCurrentTime === alarm.time) {\n        alert(`Alarm ringing for ${alarm.time}!`);\n        setAlarms((prev) => prev.filter(a => a.time !== alarm.time)); // Remove ringing alarm\n      }\n    });\n  };\n\n  const handleSetAlarm = () => {\n    if (alarmTime) {\n      const newAlarm = { time: alarmTime, id: Date.now() }; // Create a new alarm object\n      setAlarms((prev) => [...prev, newAlarm]); // Add the new alarm to the list\n      setAlarmMessage(`Alarm set for ${alarmTime}`);\n      setAlarmTime(''); // Clear input after setting alarm\n    } else {\n      setAlarmMessage('Please enter a valid time');\n    }\n  };\n\n  const timeUntilAlarm = (alarmTime) => {\n    const now = new Date();\n    const alarmDate = new Date(now);\n    const [hours, minutes] = alarmTime.split(':');\n    alarmDate.setHours(hours);\n    alarmDate.setMinutes(minutes);\n    alarmDate.setSeconds(0);\n\n    if (alarmDate < now) {\n      alarmDate.setDate(alarmDate.getDate() + 1); // If the alarm time is in the past, set for the next day\n    }\n\n    const timeDifference = alarmDate - now;\n    const hoursLeft = Math.floor((timeDifference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    const minutesLeft = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));\n\n    return `Alarm in ${hoursLeft} hours ${minutesLeft} minutes`;\n  };\n\n  const formatAlarmTime = (time) => {\n    const [hours, minutes] = time.split(':');\n    const date = new Date();\n    date.setHours(hours);\n    date.setMinutes(minutes);\n    return date.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: true, // Use 12-hour format\n    });\n  };\n\n  return (\n    <div className=\"container\">\n      <h2>Alarm Clock</h2>\n      <input\n        type=\"time\"\n        value={alarmTime}\n        onChange={(e) => setAlarmTime(e.target.value)}\n        className=\"input\"\n      />\n      <button onClick={handleSetAlarm} className=\"button\">\n        Set Alarm\n      </button>\n      <div className=\"timeDisplay\">\n        <h3>Current Time: {currentTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true })}</h3>\n        {alarms.length > 0 ? (\n          <div>\n            <h4>Alarms Set:</h4>\n            <ul>\n              {alarms.map((alarm) => {\n                const alarmTimeRemaining = timeUntilAlarm(alarm.time);\n                return (\n                  <li key={alarm.id}>\n                    {formatAlarmTime(alarm.time)} - {alarmTimeRemaining}\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n        ) : (\n          <h4>No alarms set.</h4>\n        )}\n        {alarmMessage && <p className=\"message\">{alarmMessage}</p>}\n      </div>\n    </div>\n  );\n};\n\nexport default Alarm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}