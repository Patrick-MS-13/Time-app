{"ast":null,"code":"var _jsxFileName = \"/Users/solomonrojer/Desktop/Patrick/Project/mini-project/src/component/Alarm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Alarm.css'; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Alarm = () => {\n  _s();\n  const [alarmTime, setAlarmTime] = useState('');\n  const [isAlarmSet, setIsAlarmSet] = useState(false);\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [alarmMessage, setAlarmMessage] = useState('');\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentTime(new Date());\n      checkAlarm();\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [alarmTime, isAlarmSet]);\n  const checkAlarm = () => {\n    if (isAlarmSet) {\n      const formattedCurrentTime = currentTime.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n      if (formattedCurrentTime === alarmTime) {\n        setAlarmMessage('Alarm ringing!');\n        setIsAlarmSet(false);\n        setAlarmTime('');\n      } else {\n        setAlarmMessage('');\n      }\n    }\n  };\n  const handleSetAlarm = () => {\n    if (alarmTime) {\n      setIsAlarmSet(true);\n      setAlarmMessage(`Alarm set for ${alarmTime}`);\n    } else {\n      setAlarmMessage('Please enter a valid time');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Alarm Clock\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"time\",\n      value: alarmTime,\n      onChange: e => setAlarmTime(e.target.value),\n      className: \"input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSetAlarm,\n      className: \"button\",\n      children: \"Set Alarm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timeDisplay\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Current Time: \", currentTime.toLocaleTimeString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), isAlarmSet && /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Alarm Set for: \", alarmTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 24\n      }, this), alarmMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message\",\n        children: alarmMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(Alarm, \"DQloTzI9OJbqocpX3jC+Gmd5b2g=\");\n_c = Alarm;\nexport default Alarm;\nvar _c;\n$RefreshReg$(_c, \"Alarm\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Alarm","_s","alarmTime","setAlarmTime","isAlarmSet","setIsAlarmSet","currentTime","setCurrentTime","Date","alarmMessage","setAlarmMessage","interval","setInterval","checkAlarm","clearInterval","formattedCurrentTime","toLocaleTimeString","hour","minute","handleSetAlarm","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/solomonrojer/Desktop/Patrick/Project/mini-project/src/component/Alarm.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Alarm.css'; // Import the CSS file\n\nconst Alarm = () => {\n  const [alarmTime, setAlarmTime] = useState('');\n  const [isAlarmSet, setIsAlarmSet] = useState(false);\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [alarmMessage, setAlarmMessage] = useState('');\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentTime(new Date());\n      checkAlarm();\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [alarmTime, isAlarmSet]);\n\n  const checkAlarm = () => {\n    if (isAlarmSet) {\n      const formattedCurrentTime = currentTime.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit',\n      });\n      if (formattedCurrentTime === alarmTime) {\n        setAlarmMessage('Alarm ringing!');\n        setIsAlarmSet(false);\n        setAlarmTime('');\n      } else {\n        setAlarmMessage('');\n      }\n    }\n  };\n\n  const handleSetAlarm = () => {\n    if (alarmTime) {\n      setIsAlarmSet(true);\n      setAlarmMessage(`Alarm set for ${alarmTime}`);\n    } else {\n      setAlarmMessage('Please enter a valid time');\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h2>Alarm Clock</h2>\n      <input\n        type=\"time\"\n        value={alarmTime}\n        onChange={(e) => setAlarmTime(e.target.value)}\n        className=\"input\"\n      />\n      <button onClick={handleSetAlarm} className=\"button\">\n        Set Alarm\n      </button>\n      <div className=\"timeDisplay\">\n        <h3>Current Time: {currentTime.toLocaleTimeString()}</h3>\n        {isAlarmSet && <h4>Alarm Set for: {alarmTime}</h4>}\n        {alarmMessage && <p className=\"message\">{alarmMessage}</p>}\n      </div>\n    </div>\n  );\n};\n\nexport default Alarm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}