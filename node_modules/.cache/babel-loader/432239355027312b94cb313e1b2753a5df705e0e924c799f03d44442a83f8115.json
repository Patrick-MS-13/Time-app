{"ast":null,"code":"var _jsxFileName = \"/Users/solomonrojer/Desktop/Patrick/Project/mini-project/src/component/Alarm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./../style/alarm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Alarm = () => {\n  _s();\n  const [alarmTime, setAlarmTime] = useState(\"\");\n  const [alarms, setAlarms] = useState([]); // Array to hold all alarms\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [alarmMessage, setAlarmMessage] = useState(\"\");\n  const [isAlarmRinging, setIsAlarmRinging] = useState(false);\n  const [showForm, setShowForm] = useState(false); // Toggle visibility of the form\n  const [isSvgClicked, setIsSvgClicked] = useState(false); // Track if SVG has been clicked\n  const [showTooltip, setShowTooltip] = useState(false); // State to control tooltip visibility\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const now = new Date();\n      setCurrentTime(now);\n      checkAlarms(now); // Pass current time to check alarms\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [alarms]); // Only depend on alarms\n\n  const checkAlarms = now => {\n    alarms.forEach(alarm => {\n      const [alarmHours, alarmMinutes] = alarm.time24.split(\":\").map(Number); // Use 24-hour format for comparison\n      const alarmDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), alarmHours, alarmMinutes);\n\n      // Adjust alarmDate if the time has already passed today\n      if (alarmDate < now) {\n        alarmDate.setDate(alarmDate.getDate() + 1); // Set for the next day\n      }\n\n      // Check if the alarm should ring\n      if (now.getHours() === alarmHours && now.getMinutes() === alarmMinutes && alarm.isActive && !isAlarmRinging) {\n        setIsAlarmRinging(true);\n        setAlarmMessage(`Alarm ringing for ${alarm.time12}!`); // Show the 12-hour format\n\n        // Automatically toggle off the alarm after it rings\n        setAlarms(prev => prev.map(a => a.id === alarm.id ? {\n          ...a,\n          isActive: false\n        } : a));\n\n        // Clear the alarm message after 5 seconds\n        setTimeout(() => {\n          setAlarmMessage(\"\");\n          setIsAlarmRinging(false);\n        }, 5000);\n      }\n    });\n  };\n  const handleSetAlarm = () => {\n    if (alarmTime) {\n      const newAlarm = {\n        time24: alarmTime,\n        // Store the time in 24-hour format\n        time12: formatAlarmTime(alarmTime),\n        // Display in 12-hour format\n        id: Date.now(),\n        isActive: true\n      };\n      setAlarms(prev => [...prev, newAlarm]);\n      setAlarmMessage(`Alarm set for ${newAlarm.time12}`); // Show the formatted time in the message\n      setAlarmTime(\"\");\n\n      // Clear the alarm message after 3 seconds\n      setTimeout(() => {\n        setAlarmMessage(\"\");\n      }, 3000);\n\n      // Hide the form after setting the alarm\n      setShowForm(false);\n    } else {\n      setAlarmMessage(\"Please enter a valid time\");\n    }\n  };\n\n  // Function to format time to 12-hour format with AM/PM\n  const formatAlarmTime = time => {\n    const [hours, minutes] = time.split(\":\").map(Number);\n    const ampm = hours >= 12 ? \"PM\" : \"AM\";\n    const formattedHours = hours % 12 || 12; // Convert 0 to 12 for midnight\n    return `${formattedHours}:${minutes < 10 ? \"0\" + minutes : minutes} ${ampm}`;\n  };\n  const calculateRemainingTime = alarm => {\n    const [alarmHours, alarmMinutes] = alarm.time24.split(\":\").map(Number); // Use 24-hour format for calculation\n    const now = new Date();\n    const alarmDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), alarmHours, alarmMinutes);\n\n    // Adjust for next day if the alarm time is in the past\n    if (alarmDate < now) {\n      alarmDate.setDate(alarmDate.getDate() + 1);\n    }\n    const diff = alarmDate.getTime() - now.getTime();\n    if (diff < 0) {\n      return \"Alarm time is invalid\"; // Check if the difference is negative\n    }\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const minutes = Math.floor(diff % (1000 * 60 * 60) / (1000 * 60));\n    const seconds = Math.floor(diff % (1000 * 60) / 1000);\n    return `Alarm in ${hours}h ${minutes}m ${seconds}s`; // Format the remaining time\n  };\n  const toggleAlarm = id => {\n    setAlarms(prev => prev.map(alarm => alarm.id === id ? {\n      ...alarm,\n      isActive: !alarm.isActive\n    } : alarm));\n  };\n\n  // Handle the click on the SVG to show the form\n  const handleSvgClick = () => {\n    setShowForm(true); // Show the form every time the SVG is clicked\n    setIsSvgClicked(true); // Set to true after the first click\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [alarmMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification\",\n      children: alarmMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 24\n    }, this), !isSvgClicked && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Alarm Clock\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timeDisplay\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: currentTime.toLocaleTimeString([], {\n          hour: \"2-digit\",\n          minute: \"2-digit\",\n          second: \"2-digit\",\n          hour12: true\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onMouseEnter: () => setShowTooltip(true),\n        onMouseLeave: () => setShowTooltip(false),\n        onClick: handleSvgClick,\n        style: {\n          cursor: \"pointer\",\n          position: \"relative\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"50px\",\n          height: \"50px\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          children: [/*#__PURE__*/_jsxDEV(\"g\", {\n            id: \"SVGRepo_bgCarrier\",\n            strokeWidth: \"0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n            id: \"SVGRepo_tracerCarrier\",\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n            id: \"SVGRepo_iconCarrier\",\n            children: [/*#__PURE__*/_jsxDEV(\"path\", {\n              d: \"M11 8C11 7.44772 11.4477 7 12 7C12.5523 7 13 7.44772 13 8V11H16C16.5523 11 17 11.4477 17 12C17 12.5523 16.5523 13 16 13H13V16C13 16.5523 12.5523 17 12 17C11.4477 17 11 16.5523 11 16V13H8C7.44771 13 7 12.5523 7 12C7 11.4477 7.44772 11 8 11H11V8Z\",\n              fill: \"#0F0F0F\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n              fillRule: \"evenodd\",\n              clipRule: \"evenodd\",\n              d: \"M23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12ZM3.00683 12C3.00683 16.9668 7.03321 20.9932 12 20.9932C16.9668 20.9932 20.9932 16.9668 20.9932 12C20.9932 7.03321 16.9668 3.00683 12 3.00683C7.03321 3.00683 3.00683 7.03321 3.00683 12Z\",\n              fill: \"#0F0F0F\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), showTooltip && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tooltip\",\n          children: \"Click to set alarm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), showForm && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          value: alarmTime,\n          onChange: e => setAlarmTime(e.target.value),\n          className: \"input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSetAlarm,\n          className: \"button\",\n          children: \"Set Alarm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this), alarms.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Alarms Set:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: alarms.map(alarm => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [alarm.time12, \" -\", \" \", \" \", alarm.isActive ? calculateRemainingTime(alarm) : \"Alarm Disabled\", /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"switch\",\n              style: {\n                marginLeft: \"10px\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: alarm.isActive,\n                onChange: () => toggleAlarm(alarm.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: `slider ${alarm.isActive ? \"\" : \"round\"}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 19\n            }, this)]\n          }, alarm.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n_s(Alarm, \"c2MotG8kJ5CbZka518F3WkUhOVM=\");\n_c = Alarm;\nexport default Alarm;\nvar _c;\n$RefreshReg$(_c, \"Alarm\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Alarm","_s","alarmTime","setAlarmTime","alarms","setAlarms","currentTime","setCurrentTime","Date","alarmMessage","setAlarmMessage","isAlarmRinging","setIsAlarmRinging","showForm","setShowForm","isSvgClicked","setIsSvgClicked","showTooltip","setShowTooltip","interval","setInterval","now","checkAlarms","clearInterval","forEach","alarm","alarmHours","alarmMinutes","time24","split","map","Number","alarmDate","getFullYear","getMonth","getDate","setDate","getHours","getMinutes","isActive","time12","prev","a","id","setTimeout","handleSetAlarm","newAlarm","formatAlarmTime","time","hours","minutes","ampm","formattedHours","calculateRemainingTime","diff","getTime","Math","floor","seconds","toggleAlarm","handleSvgClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleTimeString","hour","minute","second","hour12","onMouseEnter","onMouseLeave","onClick","style","cursor","position","width","height","viewBox","fill","xmlns","strokeWidth","strokeLinecap","strokeLinejoin","d","fillRule","clipRule","type","value","onChange","e","target","length","marginLeft","checked","_c","$RefreshReg$"],"sources":["/Users/solomonrojer/Desktop/Patrick/Project/mini-project/src/component/Alarm.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./../style/alarm.css\";\n\nconst Alarm = () => {\n  const [alarmTime, setAlarmTime] = useState(\"\");\n  const [alarms, setAlarms] = useState([]); // Array to hold all alarms\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [alarmMessage, setAlarmMessage] = useState(\"\");\n  const [isAlarmRinging, setIsAlarmRinging] = useState(false);\n  const [showForm, setShowForm] = useState(false); // Toggle visibility of the form\n  const [isSvgClicked, setIsSvgClicked] = useState(false); // Track if SVG has been clicked\n  const [showTooltip, setShowTooltip] = useState(false); // State to control tooltip visibility\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const now = new Date();\n      setCurrentTime(now);\n      checkAlarms(now); // Pass current time to check alarms\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [alarms]); // Only depend on alarms\n\n  const checkAlarms = (now) => {\n    alarms.forEach((alarm) => {\n      const [alarmHours, alarmMinutes] = alarm.time24.split(\":\").map(Number); // Use 24-hour format for comparison\n      const alarmDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), alarmHours, alarmMinutes);\n\n      // Adjust alarmDate if the time has already passed today\n      if (alarmDate < now) {\n        alarmDate.setDate(alarmDate.getDate() + 1); // Set for the next day\n      }\n\n      // Check if the alarm should ring\n      if (\n        now.getHours() === alarmHours &&\n        now.getMinutes() === alarmMinutes &&\n        alarm.isActive &&\n        !isAlarmRinging\n      ) {\n        setIsAlarmRinging(true);\n        setAlarmMessage(`Alarm ringing for ${alarm.time12}!`); // Show the 12-hour format\n\n        // Automatically toggle off the alarm after it rings\n        setAlarms((prev) =>\n          prev.map((a) =>\n            a.id === alarm.id ? { ...a, isActive: false } : a\n          )\n        );\n\n        // Clear the alarm message after 5 seconds\n        setTimeout(() => {\n          setAlarmMessage(\"\");\n          setIsAlarmRinging(false);\n        }, 5000);\n      }\n    });\n  };\n\n  const handleSetAlarm = () => {\n    if (alarmTime) {\n      const newAlarm = {\n        time24: alarmTime, // Store the time in 24-hour format\n        time12: formatAlarmTime(alarmTime), // Display in 12-hour format\n        id: Date.now(),\n        isActive: true,\n      };\n      setAlarms((prev) => [...prev, newAlarm]);\n      setAlarmMessage(`Alarm set for ${newAlarm.time12}`); // Show the formatted time in the message\n      setAlarmTime(\"\");\n\n      // Clear the alarm message after 3 seconds\n      setTimeout(() => {\n        setAlarmMessage(\"\");\n      }, 3000);\n\n      // Hide the form after setting the alarm\n      setShowForm(false);\n    } else {\n      setAlarmMessage(\"Please enter a valid time\");\n    }\n  };\n\n  // Function to format time to 12-hour format with AM/PM\n  const formatAlarmTime = (time) => {\n    const [hours, minutes] = time.split(\":\").map(Number);\n    const ampm = hours >= 12 ? \"PM\" : \"AM\";\n    const formattedHours = hours % 12 || 12; // Convert 0 to 12 for midnight\n    return `${formattedHours}:${minutes < 10 ? \"0\" + minutes : minutes} ${ampm}`;\n  };\n\n  const calculateRemainingTime = (alarm) => {\n    const [alarmHours, alarmMinutes] = alarm.time24.split(\":\").map(Number); // Use 24-hour format for calculation\n    const now = new Date();\n    const alarmDate = new Date(\n      now.getFullYear(),\n      now.getMonth(),\n      now.getDate(),\n      alarmHours,\n      alarmMinutes\n    );\n\n    // Adjust for next day if the alarm time is in the past\n    if (alarmDate < now) {\n      alarmDate.setDate(alarmDate.getDate() + 1);\n    }\n\n    const diff = alarmDate.getTime() - now.getTime();\n\n    if (diff < 0) {\n      return \"Alarm time is invalid\"; // Check if the difference is negative\n    }\n\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n    const seconds = Math.floor((diff % (1000 * 60)) / 1000);\n\n    return `Alarm in ${hours}h ${minutes}m ${seconds}s`; // Format the remaining time\n  };\n\n  const toggleAlarm = (id) => {\n    setAlarms((prev) =>\n      prev.map((alarm) =>\n        alarm.id === id ? { ...alarm, isActive: !alarm.isActive } : alarm\n      )\n    );\n  };\n\n  // Handle the click on the SVG to show the form\n  const handleSvgClick = () => {\n    setShowForm(true); // Show the form every time the SVG is clicked\n    setIsSvgClicked(true); // Set to true after the first click\n  };\n\n  return (\n    <div className=\"container\">\n      {alarmMessage && <div className=\"notification\">{alarmMessage}</div>}\n\n      {/* Hide the Alarm Clock text after the first SVG click */}\n      {!isSvgClicked && <h2>Alarm Clock</h2>}\n\n      <div className=\"timeDisplay\">\n        <h3>\n          {currentTime.toLocaleTimeString([], {\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n            second: \"2-digit\",\n            hour12: true,\n          })}\n        </h3>\n\n        {/* Always show SVG with tooltip */}\n        <div\n          onMouseEnter={() => setShowTooltip(true)}\n          onMouseLeave={() => setShowTooltip(false)}\n          onClick={handleSvgClick}\n          style={{ cursor: \"pointer\", position: \"relative\" }}\n        >\n          <svg\n            width=\"50px\"\n            height=\"50px\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <g id=\"SVGRepo_bgCarrier\" strokeWidth=\"0\"></g>\n            <g\n              id=\"SVGRepo_tracerCarrier\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            ></g>\n            <g id=\"SVGRepo_iconCarrier\">\n              <path\n                d=\"M11 8C11 7.44772 11.4477 7 12 7C12.5523 7 13 7.44772 13 8V11H16C16.5523 11 17 11.4477 17 12C17 12.5523 16.5523 13 16 13H13V16C13 16.5523 12.5523 17 12 17C11.4477 17 11 16.5523 11 16V13H8C7.44771 13 7 12.5523 7 12C7 11.4477 7.44772 11 8 11H11V8Z\"\n                fill=\"#0F0F0F\"\n              ></path>\n              <path\n                fillRule=\"evenodd\"\n                clipRule=\"evenodd\"\n                d=\"M23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12ZM3.00683 12C3.00683 16.9668 7.03321 20.9932 12 20.9932C16.9668 20.9932 20.9932 16.9668 20.9932 12C20.9932 7.03321 16.9668 3.00683 12 3.00683C7.03321 3.00683 3.00683 7.03321 3.00683 12Z\"\n                fill=\"#0F0F0F\"\n              ></path>\n            </g>\n          </svg>\n\n          {/* Tooltip */}\n          {showTooltip && (\n            <div className=\"tooltip\">\n              Click to set alarm\n            </div>\n          )}\n        </div>\n\n        {/* Show alarm form only if the SVG is clicked */}\n        {showForm && (\n          <div>\n            <input\n              type=\"time\"\n              value={alarmTime}\n              onChange={(e) => setAlarmTime(e.target.value)}\n              className=\"input\"\n            />\n            <button onClick={handleSetAlarm} className=\"button\">\n              Set Alarm\n            </button>\n          </div>\n        )}\n\n        {alarms.length > 0 && (\n          <div>\n            <h4>Alarms Set:</h4>\n            <ul>\n              {alarms.map((alarm) => (\n                <li key={alarm.id}>\n                  {alarm.time12} -{\" \"} {/* Display the 12-hour format */}\n                  {alarm.isActive\n                    ? calculateRemainingTime(alarm)\n                    : \"Alarm Disabled\"}\n                  <label className=\"switch\" style={{ marginLeft: \"10px\" }}>\n                    <input\n                      type=\"checkbox\"\n                      checked={alarm.isActive}\n                      onChange={() => toggleAlarm(alarm.id)}\n                    />\n                    <span\n                      className={`slider ${alarm.isActive ? \"\" : \"round\"}`}\n                    ></span>\n                  </label>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Alarm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}