{"ast":null,"code":"var _jsxFileName = \"/Users/solomonrojer/Desktop/Patrick/Project/mini-project/src/component/Alarm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./../style/alarm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Alarm = () => {\n  _s();\n  const [alarmTime, setAlarmTime] = useState(\"\");\n  const [alarms, setAlarms] = useState([]); // Array to hold all alarms\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [alarmMessage, setAlarmMessage] = useState(\"\");\n  const [isAlarmRinging, setIsAlarmRinging] = useState(false);\n  const [showForm, setShowForm] = useState(false); // Toggle visibility of the form\n  const [isSvgClicked, setIsSvgClicked] = useState(false); // Track if SVG has been clicked\n  const [showTooltip, setShowTooltip] = useState(false); // State to control tooltip visibility\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentTime(new Date());\n      checkAlarms(); // Check alarms every second\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [alarms]); // Only depend on alarms\n\n  const checkAlarms = () => {\n    const now = new Date();\n    alarms.forEach(alarm => {\n      const [alarmHours, alarmMinutes] = alarm.time.split(\":\").map(Number);\n      const alarmDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), alarmHours, alarmMinutes);\n\n      // Check if the alarm time matches the current time\n      if (now.getHours() === alarmHours && now.getMinutes() === alarmMinutes && alarm.isActive && !isAlarmRinging) {\n        setIsAlarmRinging(true);\n        setAlarmMessage(`Alarm ringing for ${alarm.time}!`);\n\n        // Automatically toggle off the alarm after it rings\n        setAlarms(prev => prev.map(a => a.id === alarm.id ? {\n          ...a,\n          isActive: false\n        } : a));\n\n        // Clear the alarm message after 5 seconds\n        setTimeout(() => {\n          setAlarmMessage(\"\");\n          setIsAlarmRinging(false);\n        }, 5000);\n      }\n    });\n  };\n  const handleSetAlarm = () => {\n    if (alarmTime) {\n      const formattedTime = formatAlarmTime(alarmTime);\n      const newAlarm = {\n        time: formattedTime,\n        id: Date.now(),\n        isActive: true\n      };\n      setAlarms(prev => [...prev, newAlarm]);\n      setAlarmMessage(`Alarm set for ${newAlarm.time}`);\n      setAlarmTime(\"\");\n\n      // Clear the alarm message after 3 seconds\n      setTimeout(() => {\n        setAlarmMessage(\"\");\n      }, 3000);\n\n      // Hide the form after setting the alarm\n      setShowForm(false);\n    } else {\n      setAlarmMessage(\"Please enter a valid time\");\n    }\n  };\n  const formatAlarmTime = time => {\n    const [hours, minutes] = time.split(\":\").map(Number);\n    const date = new Date();\n    date.setHours(hours, minutes, 0, 0); // Set seconds and milliseconds to 0\n    return date.toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      hour12: true\n    });\n  };\n  const calculateRemainingTime = alarm => {\n    const [alarmHours, alarmMinutes] = alarm.time.split(\":\").map(Number);\n    const now = new Date();\n    const alarmDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), alarmHours, alarmMinutes);\n    if (alarmDate <= now) {\n      alarmDate.setDate(alarmDate.getDate() + 1); // Set for next day if the time has passed\n    }\n    const diff = alarmDate.getTime() - now.getTime();\n    if (diff < 0) {\n      return \"Alarm time is invalid\"; // Check if the difference is negative\n    }\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const minutes = Math.floor(diff % (1000 * 60 * 60) / (1000 * 60));\n    const seconds = Math.floor(diff % (1000 * 60) / 1000);\n    return `Alarm in ${hours}h ${minutes}m ${seconds}s`; // Format the remaining time\n  };\n  const toggleAlarm = id => {\n    setAlarms(prev => prev.map(alarm => alarm.id === id ? {\n      ...alarm,\n      isActive: !alarm.isActive\n    } : alarm));\n  };\n\n  // Handle the click on the SVG to show the form\n  const handleSvgClick = () => {\n    setShowForm(true); // Show the form every time the SVG is clicked\n    setIsSvgClicked(true); // Set to true after the first click\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [alarmMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification\",\n      children: alarmMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 24\n    }, this), !isSvgClicked && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Alarm Clock\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timeDisplay\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: currentTime.toLocaleTimeString([], {\n          hour: \"2-digit\",\n          minute: \"2-digit\",\n          second: \"2-digit\",\n          hour12: true\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onMouseEnter: () => setShowTooltip(true),\n        onMouseLeave: () => setShowTooltip(false),\n        onClick: handleSvgClick,\n        style: {\n          cursor: \"pointer\",\n          position: \"relative\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"50px\",\n          height: \"50px\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          children: [/*#__PURE__*/_jsxDEV(\"g\", {\n            id: \"SVGRepo_bgCarrier\",\n            strokeWidth: \"0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n            id: \"SVGRepo_tracerCarrier\",\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n            id: \"SVGRepo_iconCarrier\",\n            children: [/*#__PURE__*/_jsxDEV(\"path\", {\n              d: \"M11 8C11 7.44772 11.4477 7 12 7C12.5523 7 13 7.44772 13 8V11H16C16.5523 11 17 11.4477 17 12C17 12.5523 16.5523 13 16 13H13V16C13 16.5523 12.5523 17 12 17C11.4477 17 11 16.5523 11 16V13H8C7.44771 13 7 12.5523 7 12C7 11.4477 7.44772 11 8 11H11V8Z\",\n              fill: \"#0F0F0F\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n              fillRule: \"evenodd\",\n              clipRule: \"evenodd\",\n              d: \"M23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12ZM3.00683 12C3.00683 16.9668 7.03321 20.9932 12 20.9932C16.9668 20.9932 20.9932 16.9668 20.9932 12C20.9932 7.03321 16.9668 3.00683 12 3.00683C7.03321 3.00683 3.00683 7.03321 3.00683 12Z\",\n              fill: \"#0F0F0F\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), showTooltip && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tooltip\",\n          children: \"Click to set alarm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), showForm && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          value: alarmTime,\n          onChange: e => setAlarmTime(e.target.value),\n          className: \"input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSetAlarm,\n          className: \"button\",\n          children: \"Set Alarm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this), alarms.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Alarms Set:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: alarms.map(alarm => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [alarm.time, \" -\", \" \", alarm.isActive ? calculateRemainingTime(alarm) : \"Alarm Disabled\", /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"switch\",\n              style: {\n                marginLeft: \"10px\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: alarm.isActive,\n                onChange: () => toggleAlarm(alarm.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 213,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: `slider ${alarm.isActive ? \"\" : \"round\"}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 19\n            }, this)]\n          }, alarm.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n_s(Alarm, \"c2MotG8kJ5CbZka518F3WkUhOVM=\");\n_c = Alarm;\nexport default Alarm;\nvar _c;\n$RefreshReg$(_c, \"Alarm\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Alarm","_s","alarmTime","setAlarmTime","alarms","setAlarms","currentTime","setCurrentTime","Date","alarmMessage","setAlarmMessage","isAlarmRinging","setIsAlarmRinging","showForm","setShowForm","isSvgClicked","setIsSvgClicked","showTooltip","setShowTooltip","interval","setInterval","checkAlarms","clearInterval","now","forEach","alarm","alarmHours","alarmMinutes","time","split","map","Number","alarmDate","getFullYear","getMonth","getDate","getHours","getMinutes","isActive","prev","a","id","setTimeout","handleSetAlarm","formattedTime","formatAlarmTime","newAlarm","hours","minutes","date","setHours","toLocaleTimeString","hour","minute","hour12","calculateRemainingTime","setDate","diff","getTime","Math","floor","seconds","toggleAlarm","handleSvgClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","second","onMouseEnter","onMouseLeave","onClick","style","cursor","position","width","height","viewBox","fill","xmlns","strokeWidth","strokeLinecap","strokeLinejoin","d","fillRule","clipRule","type","value","onChange","e","target","length","marginLeft","checked","_c","$RefreshReg$"],"sources":["/Users/solomonrojer/Desktop/Patrick/Project/mini-project/src/component/Alarm.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./../style/alarm.css\";\n\nconst Alarm = () => {\n  const [alarmTime, setAlarmTime] = useState(\"\");\n  const [alarms, setAlarms] = useState([]); // Array to hold all alarms\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [alarmMessage, setAlarmMessage] = useState(\"\");\n  const [isAlarmRinging, setIsAlarmRinging] = useState(false);\n  const [showForm, setShowForm] = useState(false); // Toggle visibility of the form\n  const [isSvgClicked, setIsSvgClicked] = useState(false); // Track if SVG has been clicked\n  const [showTooltip, setShowTooltip] = useState(false); // State to control tooltip visibility\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentTime(new Date());\n      checkAlarms(); // Check alarms every second\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [alarms]); // Only depend on alarms\n\n  const checkAlarms = () => {\n    const now = new Date();\n\n    alarms.forEach((alarm) => {\n      const [alarmHours, alarmMinutes] = alarm.time.split(\":\").map(Number);\n      const alarmDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), alarmHours, alarmMinutes);\n\n      // Check if the alarm time matches the current time\n      if (now.getHours() === alarmHours && now.getMinutes() === alarmMinutes && alarm.isActive && !isAlarmRinging) {\n        setIsAlarmRinging(true);\n        setAlarmMessage(`Alarm ringing for ${alarm.time}!`);\n\n        // Automatically toggle off the alarm after it rings\n        setAlarms((prev) =>\n          prev.map((a) =>\n            a.id === alarm.id ? { ...a, isActive: false } : a\n          )\n        );\n\n        // Clear the alarm message after 5 seconds\n        setTimeout(() => {\n          setAlarmMessage(\"\");\n          setIsAlarmRinging(false);\n        }, 5000);\n      }\n    });\n  };\n\n  const handleSetAlarm = () => {\n    if (alarmTime) {\n      const formattedTime = formatAlarmTime(alarmTime);\n      const newAlarm = {\n        time: formattedTime,\n        id: Date.now(),\n        isActive: true,\n      };\n      setAlarms((prev) => [...prev, newAlarm]);\n      setAlarmMessage(`Alarm set for ${newAlarm.time}`);\n      setAlarmTime(\"\");\n\n      // Clear the alarm message after 3 seconds\n      setTimeout(() => {\n        setAlarmMessage(\"\");\n      }, 3000);\n\n      // Hide the form after setting the alarm\n      setShowForm(false);\n    } else {\n      setAlarmMessage(\"Please enter a valid time\");\n    }\n  };\n\n  const formatAlarmTime = (time) => {\n    const [hours, minutes] = time.split(\":\").map(Number);\n    const date = new Date();\n    date.setHours(hours, minutes, 0, 0); // Set seconds and milliseconds to 0\n    return date.toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      hour12: true,\n    });\n  };\n\n  const calculateRemainingTime = (alarm) => {\n    const [alarmHours, alarmMinutes] = alarm.time.split(\":\").map(Number);\n    const now = new Date();\n    const alarmDate = new Date(\n      now.getFullYear(),\n      now.getMonth(),\n      now.getDate(),\n      alarmHours,\n      alarmMinutes\n    );\n\n    if (alarmDate <= now) {\n      alarmDate.setDate(alarmDate.getDate() + 1); // Set for next day if the time has passed\n    }\n\n    const diff = alarmDate.getTime() - now.getTime();\n\n    if (diff < 0) {\n      return \"Alarm time is invalid\"; // Check if the difference is negative\n    }\n\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n    const seconds = Math.floor((diff % (1000 * 60)) / 1000);\n\n    return `Alarm in ${hours}h ${minutes}m ${seconds}s`; // Format the remaining time\n  };\n\n  const toggleAlarm = (id) => {\n    setAlarms((prev) =>\n      prev.map((alarm) =>\n        alarm.id === id ? { ...alarm, isActive: !alarm.isActive } : alarm\n      )\n    );\n  };\n\n  // Handle the click on the SVG to show the form\n  const handleSvgClick = () => {\n    setShowForm(true); // Show the form every time the SVG is clicked\n    setIsSvgClicked(true); // Set to true after the first click\n  };\n\n  return (\n    <div className=\"container\">\n      {alarmMessage && <div className=\"notification\">{alarmMessage}</div>}\n\n      {/* Hide the Alarm Clock text after the first SVG click */}\n      {!isSvgClicked && <h2>Alarm Clock</h2>}\n\n      <div className=\"timeDisplay\">\n        <h3>\n          {currentTime.toLocaleTimeString([], {\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n            second: \"2-digit\",\n            hour12: true,\n          })}\n        </h3>\n\n        {/* Always show SVG with tooltip */}\n        <div\n          onMouseEnter={() => setShowTooltip(true)}\n          onMouseLeave={() => setShowTooltip(false)}\n          onClick={handleSvgClick}\n          style={{ cursor: \"pointer\", position: \"relative\" }}\n        >\n          <svg\n            width=\"50px\"\n            height=\"50px\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <g id=\"SVGRepo_bgCarrier\" strokeWidth=\"0\"></g>\n            <g\n              id=\"SVGRepo_tracerCarrier\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            ></g>\n            <g id=\"SVGRepo_iconCarrier\">\n              <path\n                d=\"M11 8C11 7.44772 11.4477 7 12 7C12.5523 7 13 7.44772 13 8V11H16C16.5523 11 17 11.4477 17 12C17 12.5523 16.5523 13 16 13H13V16C13 16.5523 12.5523 17 12 17C11.4477 17 11 16.5523 11 16V13H8C7.44771 13 7 12.5523 7 12C7 11.4477 7.44772 11 8 11H11V8Z\"\n                fill=\"#0F0F0F\"\n              ></path>\n              <path\n                fillRule=\"evenodd\"\n                clipRule=\"evenodd\"\n                d=\"M23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12ZM3.00683 12C3.00683 16.9668 7.03321 20.9932 12 20.9932C16.9668 20.9932 20.9932 16.9668 20.9932 12C20.9932 7.03321 16.9668 3.00683 12 3.00683C7.03321 3.00683 3.00683 7.03321 3.00683 12Z\"\n                fill=\"#0F0F0F\"\n              ></path>\n            </g>\n          </svg>\n\n          {/* Tooltip */}\n          {showTooltip && (\n            <div className=\"tooltip\">\n              Click to set alarm\n            </div>\n          )}\n        </div>\n\n        {/* Show alarm form only if the SVG is clicked */}\n        {showForm && (\n          <div>\n            <input\n              type=\"time\"\n              value={alarmTime}\n              onChange={(e) => setAlarmTime(e.target.value)}\n              className=\"input\"\n            />\n            <button onClick={handleSetAlarm} className=\"button\">\n              Set Alarm\n            </button>\n          </div>\n        )}\n\n        {alarms.length > 0 && (\n          <div>\n            <h4>Alarms Set:</h4>\n            <ul>\n              {alarms.map((alarm) => (\n                <li key={alarm.id}>\n                  {alarm.time} -{\" \"}\n                  {alarm.isActive\n                    ? calculateRemainingTime(alarm)\n                    : \"Alarm Disabled\"}\n                  <label className=\"switch\" style={{ marginLeft: \"10px\" }}>\n                    <input\n                      type=\"checkbox\"\n                      checked={alarm.isActive}\n                      onChange={() => toggleAlarm(alarm.id)}\n                    />\n                    <span\n                      className={`slider ${alarm.isActive ? \"\" : \"round\"}`}\n                    ></span>\n                  </label>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Alarm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}