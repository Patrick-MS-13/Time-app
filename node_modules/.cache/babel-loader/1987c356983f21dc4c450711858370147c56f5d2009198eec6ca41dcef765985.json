{"ast":null,"code":"var _jsxFileName = \"/Users/solomonrojer/Desktop/Patrick/Project/mini-project/src/component/TimeZonePicker.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Select from \"react-select\";\nimport './../style/timezonepicker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimeZonePicker = () => {\n  _s();\n  const [timeZones, setTimeZones] = useState([]);\n  const [selectedTimeZone, setSelectedTimeZone] = useState(\"\");\n  const [isAheadOrBehind, setIsAheadOrBehind] = useState(\"\"); // State to track if selected time zone is ahead or behind\n\n  useEffect(() => {\n    const getTimeZones = () => {\n      try {\n        return Intl.supportedValuesOf(\"timeZone\");\n      } catch (err) {\n        return [\"America/New_York\", \"Europe/London\", \"Asia/Tokyo\", \"Australia/Sydney\", \"UTC\"];\n      }\n    };\n\n    // Get the supported time zones and map them\n    const supportedZones = getTimeZones().map(zone => ({\n      value: zone,\n      label: zone\n    }));\n\n    // Set time zones to state\n    setTimeZones(supportedZones);\n  }, []);\n  useEffect(() => {\n    const updateTime = () => {\n      if (selectedTimeZone) {\n        const now = new Date();\n\n        // Get the current location time\n        const currentOptions = {\n          timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone\n        };\n        const currentTime = now.toLocaleString(\"en-US\", currentOptions);\n\n        // Get the selected time zone time\n        const selectedOptions = {\n          timeZone: selectedTimeZone\n        };\n        const selectedTime = now.toLocaleString(\"en-US\", selectedOptions);\n\n        // Calculate time difference in seconds\n        const currentDateTime = new Date(currentTime).getTime();\n        const selectedDateTime = new Date(selectedTime).getTime();\n        const differenceInSeconds = Math.floor((selectedDateTime - currentDateTime) / 1000);\n\n        // Determine if current time is ahead or behind\n        if (differenceInSeconds > 0) {\n          setIsAheadOrBehind(\"ahead of the current location\");\n        } else if (differenceInSeconds < 0) {\n          setIsAheadOrBehind(\"behind the current location\");\n        } else {\n          setIsAheadOrBehind(\"location are at the same time\");\n        }\n      }\n    };\n    const interval = setInterval(updateTime, 1000);\n    return () => clearInterval(interval);\n  }, [selectedTimeZone]);\n  const handleTimeZoneChange = selectedOption => {\n    setSelectedTimeZone(selectedOption.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"timezone-picker-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"timezone\",\n      children: \"Select Time Zone:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      id: \"timezone\",\n      options: timeZones,\n      onChange: handleTimeZoneChange,\n      placeholder: \"Search and select a time zone\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), selectedTimeZone && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Selected Time Zone: \", selectedTimeZone]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: isAheadOrBehind\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(TimeZonePicker, \"qWc4SxqmcYDBrN/CAjxUku4AijY=\");\n_c = TimeZonePicker;\nexport default TimeZonePicker;\nvar _c;\n$RefreshReg$(_c, \"TimeZonePicker\");","map":{"version":3,"names":["React","useState","useEffect","Select","jsxDEV","_jsxDEV","TimeZonePicker","_s","timeZones","setTimeZones","selectedTimeZone","setSelectedTimeZone","isAheadOrBehind","setIsAheadOrBehind","getTimeZones","Intl","supportedValuesOf","err","supportedZones","map","zone","value","label","updateTime","now","Date","currentOptions","timeZone","DateTimeFormat","resolvedOptions","currentTime","toLocaleString","selectedOptions","selectedTime","currentDateTime","getTime","selectedDateTime","differenceInSeconds","Math","floor","interval","setInterval","clearInterval","handleTimeZoneChange","selectedOption","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","options","onChange","placeholder","_c","$RefreshReg$"],"sources":["/Users/solomonrojer/Desktop/Patrick/Project/mini-project/src/component/TimeZonePicker.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Select from \"react-select\";\nimport './../style/timezonepicker.css';\n\nconst TimeZonePicker = () => {\n  const [timeZones, setTimeZones] = useState([]);\n  const [selectedTimeZone, setSelectedTimeZone] = useState(\"\");\n  const [isAheadOrBehind, setIsAheadOrBehind] = useState(\"\"); // State to track if selected time zone is ahead or behind\n\n  useEffect(() => {\n    const getTimeZones = () => {\n      try {\n        return Intl.supportedValuesOf(\"timeZone\");\n      } catch (err) {\n        return [\n          \"America/New_York\",\n          \"Europe/London\",\n          \"Asia/Tokyo\",\n          \"Australia/Sydney\",\n          \"UTC\",\n        ];\n      }\n    };\n\n    // Get the supported time zones and map them\n    const supportedZones = getTimeZones().map((zone) => ({\n      value: zone,\n      label: zone,\n    }));\n\n    // Set time zones to state\n    setTimeZones(supportedZones);\n  }, []);\n\n  useEffect(() => {\n    const updateTime = () => {\n      if (selectedTimeZone) {\n        const now = new Date();\n\n        // Get the current location time\n        const currentOptions = {\n          timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n        };\n        const currentTime = now.toLocaleString(\"en-US\", currentOptions);\n\n        // Get the selected time zone time\n        const selectedOptions = {\n          timeZone: selectedTimeZone,\n        };\n        const selectedTime = now.toLocaleString(\"en-US\", selectedOptions);\n\n        // Calculate time difference in seconds\n        const currentDateTime = new Date(currentTime).getTime();\n        const selectedDateTime = new Date(selectedTime).getTime();\n        const differenceInSeconds = Math.floor((selectedDateTime - currentDateTime) / 1000);\n\n        // Determine if current time is ahead or behind\n        if (differenceInSeconds > 0) {\n          setIsAheadOrBehind(\"ahead of the current location\");\n        } else if (differenceInSeconds < 0) {\n          setIsAheadOrBehind(\"behind the current location\");\n        } else {\n          setIsAheadOrBehind(\"location are at the same time\");\n        }\n      }\n    };\n\n    const interval = setInterval(updateTime, 1000);\n    return () => clearInterval(interval);\n  }, [selectedTimeZone]);\n\n  const handleTimeZoneChange = (selectedOption) => {\n    setSelectedTimeZone(selectedOption.value);\n  };\n\n  return (\n    <div className=\"timezone-picker-container\">\n      <label htmlFor=\"timezone\">Select Time Zone:</label>\n      <Select\n        id=\"timezone\"\n        options={timeZones}\n        onChange={handleTimeZoneChange}\n        placeholder=\"Search and select a time zone\"\n      />\n      {selectedTimeZone && (\n        <div>\n          <h3>Selected Time Zone: {selectedTimeZone}</h3>\n          <p>{isAheadOrBehind}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TimeZonePicker;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,cAAc;AACjC,OAAO,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACS,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACW,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE5DC,SAAS,CAAC,MAAM;IACd,MAAMY,YAAY,GAAGA,CAAA,KAAM;MACzB,IAAI;QACF,OAAOC,IAAI,CAACC,iBAAiB,CAAC,UAAU,CAAC;MAC3C,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZ,OAAO,CACL,kBAAkB,EAClB,eAAe,EACf,YAAY,EACZ,kBAAkB,EAClB,KAAK,CACN;MACH;IACF,CAAC;;IAED;IACA,MAAMC,cAAc,GAAGJ,YAAY,CAAC,CAAC,CAACK,GAAG,CAAEC,IAAI,KAAM;MACnDC,KAAK,EAAED,IAAI;MACXE,KAAK,EAAEF;IACT,CAAC,CAAC,CAAC;;IAEH;IACAX,YAAY,CAACS,cAAc,CAAC;EAC9B,CAAC,EAAE,EAAE,CAAC;EAENhB,SAAS,CAAC,MAAM;IACd,MAAMqB,UAAU,GAAGA,CAAA,KAAM;MACvB,IAAIb,gBAAgB,EAAE;QACpB,MAAMc,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;;QAEtB;QACA,MAAMC,cAAc,GAAG;UACrBC,QAAQ,EAAEZ,IAAI,CAACa,cAAc,CAAC,CAAC,CAACC,eAAe,CAAC,CAAC,CAACF;QACpD,CAAC;QACD,MAAMG,WAAW,GAAGN,GAAG,CAACO,cAAc,CAAC,OAAO,EAAEL,cAAc,CAAC;;QAE/D;QACA,MAAMM,eAAe,GAAG;UACtBL,QAAQ,EAAEjB;QACZ,CAAC;QACD,MAAMuB,YAAY,GAAGT,GAAG,CAACO,cAAc,CAAC,OAAO,EAAEC,eAAe,CAAC;;QAEjE;QACA,MAAME,eAAe,GAAG,IAAIT,IAAI,CAACK,WAAW,CAAC,CAACK,OAAO,CAAC,CAAC;QACvD,MAAMC,gBAAgB,GAAG,IAAIX,IAAI,CAACQ,YAAY,CAAC,CAACE,OAAO,CAAC,CAAC;QACzD,MAAME,mBAAmB,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACH,gBAAgB,GAAGF,eAAe,IAAI,IAAI,CAAC;;QAEnF;QACA,IAAIG,mBAAmB,GAAG,CAAC,EAAE;UAC3BxB,kBAAkB,CAAC,+BAA+B,CAAC;QACrD,CAAC,MAAM,IAAIwB,mBAAmB,GAAG,CAAC,EAAE;UAClCxB,kBAAkB,CAAC,6BAA6B,CAAC;QACnD,CAAC,MAAM;UACLA,kBAAkB,CAAC,+BAA+B,CAAC;QACrD;MACF;IACF,CAAC;IAED,MAAM2B,QAAQ,GAAGC,WAAW,CAAClB,UAAU,EAAE,IAAI,CAAC;IAC9C,OAAO,MAAMmB,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,CAAC9B,gBAAgB,CAAC,CAAC;EAEtB,MAAMiC,oBAAoB,GAAIC,cAAc,IAAK;IAC/CjC,mBAAmB,CAACiC,cAAc,CAACvB,KAAK,CAAC;EAC3C,CAAC;EAED,oBACEhB,OAAA;IAAKwC,SAAS,EAAC,2BAA2B;IAAAC,QAAA,gBACxCzC,OAAA;MAAO0C,OAAO,EAAC,UAAU;MAAAD,QAAA,EAAC;IAAiB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACnD9C,OAAA,CAACF,MAAM;MACLiD,EAAE,EAAC,UAAU;MACbC,OAAO,EAAE7C,SAAU;MACnB8C,QAAQ,EAAEX,oBAAqB;MAC/BY,WAAW,EAAC;IAA+B;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CAAC,EACDzC,gBAAgB,iBACfL,OAAA;MAAAyC,QAAA,gBACEzC,OAAA;QAAAyC,QAAA,GAAI,sBAAoB,EAACpC,gBAAgB;MAAA;QAAAsC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC/C9C,OAAA;QAAAyC,QAAA,EAAIlC;MAAe;QAAAoC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrB,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC5C,EAAA,CAxFID,cAAc;AAAAkD,EAAA,GAAdlD,cAAc;AA0FpB,eAAeA,cAAc;AAAC,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}