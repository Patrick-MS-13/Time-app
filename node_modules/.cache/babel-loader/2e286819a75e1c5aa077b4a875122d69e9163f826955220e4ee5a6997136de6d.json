{"ast":null,"code":"var _jsxFileName = \"/Users/solomonrojer/Desktop/Patrick/Time-Management/src/component/TimeReminder.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\nimport \"./../style/timereminder.css\"; // Ensure this path is correct\nimport sound from \"./../audio/reminder.mp3\"; // Import the audio file\nimport deleteIcon from \"./../img/delete.svg\"; // Import the delete SVG\nimport timealart from './../img/time-alert-2-svgrepo-com.svg'; // Import time alert SVG\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TimeReminder = () => {\n  _s();\n  const [reminderTime, setReminderTime] = useState(\"\");\n  const [reminders, setReminders] = useState([]);\n  const [reminderMessage, setReminderMessage] = useState(\"\"); // Notification message\n  const [reminderAudio, setReminderAudio] = useState(null); // Store the audio object for silencing\n  const [isReminderPlaying, setIsReminderPlaying] = useState(false); // Track if the reminder is playing\n  const [currentReminderId, setCurrentReminderId] = useState(null); // Track current ringing reminder ID\n  const [activeNotification, setActiveNotification] = useState(null); // Track active notification\n  const [isSilenced, setIsSilenced] = useState(false); // Track if reminder is silenced\n  const [showTimeReminder, setShowTimeReminder] = useState(false); // Control visibility of the reminder component\n\n  // Request permission for browser notifications on component mount\n  useEffect(() => {\n    if (Notification.permission !== \"granted\") {\n      Notification.requestPermission().then(permission => {\n        if (permission !== \"granted\") {\n          console.warn(\"Notifications are not allowed\");\n        }\n      });\n    }\n  }, []);\n\n  // Helper function to format time in 12-hour format\n  const formatTime12Hour = date => {\n    return date.toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      hour12: true\n    });\n  };\n\n  // Helper function to show notifications\n  const showNotification = (message, isPersistent = false, isBrowserNotification = true) => {\n    setReminderMessage(message);\n\n    // Automatically clear the notification message after 5 seconds unless itâ€™s the persistent ringing notification\n    if (!isPersistent) {\n      setTimeout(() => {\n        setReminderMessage(\"\");\n      }, 5000); // Disappear after 5 seconds\n    }\n\n    // Create a browser notification if enabled\n    if (isBrowserNotification && Notification.permission === \"granted\") {\n      const notification = new Notification(\"Time Reminder\", {\n        body: message,\n        icon: \"/icon.png\",\n        // You can specify an icon if you want\n        requireInteraction: isPersistent // Prevent auto-dismiss for persistent notifications\n      });\n\n      // Add click event listener to the notification (for silencing reminder)\n      notification.onclick = () => {\n        if (isPersistent) {\n          silenceReminder(); // Only silence when the notification is for the ringing reminder\n        }\n        notification.close(); // Close the notification when clicked\n      };\n\n      // Store the notification reference to close it later in silenceReminder\n      if (isPersistent) {\n        setActiveNotification(notification);\n      }\n    }\n  };\n\n  // Handle setting the reminder\n  const handleSetReminder = () => {\n    if (!reminderTime) {\n      showNotification(\"Please select a time for the reminder.\");\n      return;\n    }\n    const now = new Date();\n    const [hours, minutes] = reminderTime.split(\":\");\n    const reminderDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), hours, minutes, 0);\n\n    // Ensure the selected time is at least 1 minute in the future\n    const oneMinuteAhead = new Date(now.getTime() + 60 * 1000); // 1 minute ahead of the current time\n\n    // If reminder is in the past or the same as the current time, show a dynamic message with current time\n    if (reminderDate <= oneMinuteAhead) {\n      const currentTimeFormatted = formatTime12Hour(now); // Get the current time in 12-hour format\n      showNotification(`Please select a future time at least 1 minute from ${currentTimeFormatted}.`);\n      return;\n    }\n\n    // Calculate the maximum reminder time (now + 23 hours + 59 minutes + 59 seconds)\n    const maxReminderTime = new Date(now.getTime() + 23 * 60 * 60 * 1000 + 59 * 60 * 1000 + 59 * 1000);\n\n    // Ensure reminder is within the next 23 hours, 59 minutes, and 59 seconds\n    if (reminderDate >= maxReminderTime) {\n      showNotification(\"Please select a time within the next 23 hours and 59 minutes.\");\n      return;\n    }\n\n    // Calculate the time difference in milliseconds\n    const timeDifference = reminderDate - now;\n\n    // Use a unique ID for each reminder\n    const id = `${reminderDate.getTime()}-${Math.random()}`; // Create a unique ID using timestamp and random value\n\n    // Set a timeout for the reminder\n    const timeoutId = setTimeout(() => {\n      const audio = new Audio(sound); // Use the imported audio file\n      audio.loop = true; // Enable continuous play until silenced\n      setReminderAudio(audio); // Store the audio object for later use\n      audio.play().catch(err => {\n        console.error(\"Error playing audio:\", err);\n      });\n      setIsReminderPlaying(true); // Set reminder as playing\n      setCurrentReminderId(id); // Store the current reminder ID\n      const message = `Reminder: It's now ${formatTime12Hour(reminderDate)}`;\n      showNotification(message, true); // Persistent notification for ringing reminder\n    }, timeDifference);\n\n    // Add the new reminder to the list\n    setReminders(prevReminders => [...prevReminders, {\n      id,\n      time: reminderDate,\n      timeoutId\n    }]);\n    showNotification(`Reminder set for ${formatTime12Hour(reminderDate)}`); // Auto-dismissing notification\n  };\n\n  // Handle silencing the reminder\n  const silenceReminder = () => {\n    if (reminderAudio) {\n      reminderAudio.pause(); // Stop the audio\n      reminderAudio.currentTime = 0; // Reset the audio to the start\n      setReminderAudio(null); // Clear the stored audio object\n      setIsReminderPlaying(false); // Reset reminder playing state\n\n      // Show notification that the reminder has been silenced\n      setReminderMessage(\"Silenced.\"); // Set the message first\n      setIsSilenced(true); // Mark as silenced\n      const notificationElement = document.querySelector(\".reminder-notification\");\n      notificationElement.classList.add(\"silenced\"); // Then add the \"silenced\" class\n\n      // Close the active notification if it exists\n      if (activeNotification) {\n        activeNotification.close(); // Manually close the browser notification\n        setActiveNotification(null); // Clear the reference\n      }\n\n      // Remove the \"silenced\" class and clear the message after 5 seconds\n      setTimeout(() => {\n        notificationElement.classList.remove(\"silenced\");\n        setReminderMessage(\"\"); // Clear the silenced notification after timeout\n        setIsSilenced(false); // Reset silenced state\n      }, 5000); // Clear after 5 seconds\n\n      // Clear the reminder list after silencing\n      setReminders([]); // Clear all reminders after silencing\n    }\n  };\n\n  // Handle clearing a reminder\n  const handleClearReminder = id => {\n    const reminder = reminders.find(rem => rem.id === id);\n    if (reminder) {\n      clearTimeout(reminder.timeoutId); // Clear the timeout\n      setReminders(prevReminders => prevReminders.filter(rem => rem.id !== id)); // Remove from list\n\n      // Show notification that the reminder has been cleared only when delete icon is clicked\n      if (!isSilenced) {\n        showNotification(`Reminder for ${formatTime12Hour(reminder.time)} has been cleared.`);\n      }\n    }\n  };\n\n  // Handle time change from the input\n  const handleTimeChange = e => {\n    setReminderTime(e.target.value);\n  };\n\n  // Clean up timeouts on unmount\n  useEffect(() => {\n    return () => {\n      reminders.forEach(reminder => clearTimeout(reminder.timeoutId));\n    };\n  }, [reminders]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"time-reminder-container\",\n    children: !showTimeReminder ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: timealart,\n      alt: \"Time Alert\",\n      className: \"time-alert-icon\",\n      onClick: () => setShowTimeReminder(true) // Show the reminder UI on click\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [reminderMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `reminder-notification ${isReminderPlaying ? \"slide-in reminder-active\" : \"slide-in\"} ${isSilenced ? \"silenced-notification\" : \"\"}`,\n        children: [reminderMessage, isReminderPlaying && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: silenceReminder,\n          className: \"silence-button\",\n          children: \"Silence\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Time Reminder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"time\",\n        id: \"reminderTime\",\n        value: reminderTime,\n        onChange: handleTimeChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSetReminder,\n        children: \"Set Reminder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: reminders.slice() // Create a shallow copy to avoid mutating state\n        .sort((a, b) => a.time - b.time) // Sort reminders by time (earliest first)\n        .map(reminder => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [formatTime12Hour(reminder.time), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: deleteIcon // Use the imported delete icon\n            ,\n            alt: \"Delete\",\n            onClick: () => handleClearReminder(reminder.id) // Call the clear function on click\n            ,\n            className: \"delete-icon\" // Optional: add a class for styling\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 19\n          }, this)]\n        }, reminder.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 5\n  }, this);\n};\n_s(TimeReminder, \"e45gyPTgudTU72ZKnUwprem6OFc=\");\n_c = TimeReminder;\nexport default TimeReminder;\nvar _c;\n$RefreshReg$(_c, \"TimeReminder\");","map":{"version":3,"names":["sound","deleteIcon","timealart","jsxDEV","_jsxDEV","Fragment","_Fragment","TimeReminder","_s","reminderTime","setReminderTime","useState","reminders","setReminders","reminderMessage","setReminderMessage","reminderAudio","setReminderAudio","isReminderPlaying","setIsReminderPlaying","currentReminderId","setCurrentReminderId","activeNotification","setActiveNotification","isSilenced","setIsSilenced","showTimeReminder","setShowTimeReminder","useEffect","Notification","permission","requestPermission","then","console","warn","formatTime12Hour","date","toLocaleTimeString","hour","minute","hour12","showNotification","message","isPersistent","isBrowserNotification","setTimeout","notification","body","icon","requireInteraction","onclick","silenceReminder","close","handleSetReminder","now","Date","hours","minutes","split","reminderDate","getFullYear","getMonth","getDate","oneMinuteAhead","getTime","currentTimeFormatted","maxReminderTime","timeDifference","id","Math","random","timeoutId","audio","Audio","loop","play","catch","err","error","prevReminders","time","pause","currentTime","notificationElement","document","querySelector","classList","add","remove","handleClearReminder","reminder","find","rem","clearTimeout","filter","handleTimeChange","e","target","value","forEach","className","children","src","alt","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","required","slice","sort","a","b","map","_c","$RefreshReg$"],"sources":["/Users/solomonrojer/Desktop/Patrick/Time-Management/src/component/TimeReminder.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\nimport \"./../style/timereminder.css\"; // Ensure this path is correct\nimport sound from \"./../audio/reminder.mp3\"; // Import the audio file\nimport deleteIcon from \"./../img/delete.svg\"; // Import the delete SVG\nimport timealart from './../img/time-alert-2-svgrepo-com.svg'; // Import time alert SVG\n\nconst TimeReminder = () => {\n  const [reminderTime, setReminderTime] = useState(\"\");\n  const [reminders, setReminders] = useState([]);\n  const [reminderMessage, setReminderMessage] = useState(\"\"); // Notification message\n  const [reminderAudio, setReminderAudio] = useState(null); // Store the audio object for silencing\n  const [isReminderPlaying, setIsReminderPlaying] = useState(false); // Track if the reminder is playing\n  const [currentReminderId, setCurrentReminderId] = useState(null); // Track current ringing reminder ID\n  const [activeNotification, setActiveNotification] = useState(null); // Track active notification\n  const [isSilenced, setIsSilenced] = useState(false); // Track if reminder is silenced\n  const [showTimeReminder, setShowTimeReminder] = useState(false); // Control visibility of the reminder component\n\n  // Request permission for browser notifications on component mount\n  useEffect(() => {\n    if (Notification.permission !== \"granted\") {\n      Notification.requestPermission().then((permission) => {\n        if (permission !== \"granted\") {\n          console.warn(\"Notifications are not allowed\");\n        }\n      });\n    }\n  }, []);\n\n  // Helper function to format time in 12-hour format\n  const formatTime12Hour = (date) => {\n    return date.toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      hour12: true,\n    });\n  };\n\n  // Helper function to show notifications\n  const showNotification = (\n    message,\n    isPersistent = false,\n    isBrowserNotification = true\n  ) => {\n    setReminderMessage(message);\n\n    // Automatically clear the notification message after 5 seconds unless itâ€™s the persistent ringing notification\n    if (!isPersistent) {\n      setTimeout(() => {\n        setReminderMessage(\"\");\n      }, 5000); // Disappear after 5 seconds\n    }\n\n    // Create a browser notification if enabled\n    if (isBrowserNotification && Notification.permission === \"granted\") {\n      const notification = new Notification(\"Time Reminder\", {\n        body: message,\n        icon: \"/icon.png\", // You can specify an icon if you want\n        requireInteraction: isPersistent, // Prevent auto-dismiss for persistent notifications\n      });\n\n      // Add click event listener to the notification (for silencing reminder)\n      notification.onclick = () => {\n        if (isPersistent) {\n          silenceReminder(); // Only silence when the notification is for the ringing reminder\n        }\n        notification.close(); // Close the notification when clicked\n      };\n\n      // Store the notification reference to close it later in silenceReminder\n      if (isPersistent) {\n        setActiveNotification(notification);\n      }\n    }\n  };\n\n  // Handle setting the reminder\n  const handleSetReminder = () => {\n    if (!reminderTime) {\n      showNotification(\"Please select a time for the reminder.\");\n      return;\n    }\n\n    const now = new Date();\n    const [hours, minutes] = reminderTime.split(\":\");\n    const reminderDate = new Date(\n      now.getFullYear(),\n      now.getMonth(),\n      now.getDate(),\n      hours,\n      minutes,\n      0\n    );\n\n    // Ensure the selected time is at least 1 minute in the future\n    const oneMinuteAhead = new Date(now.getTime() + 60 * 1000); // 1 minute ahead of the current time\n\n    // If reminder is in the past or the same as the current time, show a dynamic message with current time\n    if (reminderDate <= oneMinuteAhead) {\n      const currentTimeFormatted = formatTime12Hour(now); // Get the current time in 12-hour format\n      showNotification(\n        `Please select a future time at least 1 minute from ${currentTimeFormatted}.`\n      );\n      return;\n    }\n\n    // Calculate the maximum reminder time (now + 23 hours + 59 minutes + 59 seconds)\n    const maxReminderTime = new Date(\n      now.getTime() + 23 * 60 * 60 * 1000 + 59 * 60 * 1000 + 59 * 1000\n    );\n\n    // Ensure reminder is within the next 23 hours, 59 minutes, and 59 seconds\n    if (reminderDate >= maxReminderTime) {\n      showNotification(\n        \"Please select a time within the next 23 hours and 59 minutes.\"\n      );\n      return;\n    }\n\n    // Calculate the time difference in milliseconds\n    const timeDifference = reminderDate - now;\n\n    // Use a unique ID for each reminder\n    const id = `${reminderDate.getTime()}-${Math.random()}`; // Create a unique ID using timestamp and random value\n\n    // Set a timeout for the reminder\n    const timeoutId = setTimeout(() => {\n      const audio = new Audio(sound); // Use the imported audio file\n      audio.loop = true; // Enable continuous play until silenced\n      setReminderAudio(audio); // Store the audio object for later use\n      audio.play().catch((err) => {\n        console.error(\"Error playing audio:\", err);\n      });\n      setIsReminderPlaying(true); // Set reminder as playing\n      setCurrentReminderId(id); // Store the current reminder ID\n      const message = `Reminder: It's now ${formatTime12Hour(reminderDate)}`;\n      showNotification(message, true); // Persistent notification for ringing reminder\n    }, timeDifference);\n\n    // Add the new reminder to the list\n    setReminders((prevReminders) => [\n      ...prevReminders,\n      { id, time: reminderDate, timeoutId },\n    ]);\n    showNotification(`Reminder set for ${formatTime12Hour(reminderDate)}`); // Auto-dismissing notification\n  };\n\n  // Handle silencing the reminder\n  const silenceReminder = () => {\n    if (reminderAudio) {\n      reminderAudio.pause(); // Stop the audio\n      reminderAudio.currentTime = 0; // Reset the audio to the start\n      setReminderAudio(null); // Clear the stored audio object\n      setIsReminderPlaying(false); // Reset reminder playing state\n\n      // Show notification that the reminder has been silenced\n      setReminderMessage(\"Silenced.\"); // Set the message first\n      setIsSilenced(true); // Mark as silenced\n      const notificationElement = document.querySelector(\".reminder-notification\");\n      notificationElement.classList.add(\"silenced\"); // Then add the \"silenced\" class\n\n      // Close the active notification if it exists\n      if (activeNotification) {\n        activeNotification.close(); // Manually close the browser notification\n        setActiveNotification(null); // Clear the reference\n      }\n\n      // Remove the \"silenced\" class and clear the message after 5 seconds\n      setTimeout(() => {\n        notificationElement.classList.remove(\"silenced\");\n        setReminderMessage(\"\"); // Clear the silenced notification after timeout\n        setIsSilenced(false); // Reset silenced state\n      }, 5000); // Clear after 5 seconds\n\n      // Clear the reminder list after silencing\n      setReminders([]); // Clear all reminders after silencing\n    }\n  };\n\n  // Handle clearing a reminder\n  const handleClearReminder = (id) => {\n    const reminder = reminders.find((rem) => rem.id === id);\n    if (reminder) {\n      clearTimeout(reminder.timeoutId); // Clear the timeout\n      setReminders((prevReminders) =>\n        prevReminders.filter((rem) => rem.id !== id)\n      ); // Remove from list\n\n      // Show notification that the reminder has been cleared only when delete icon is clicked\n      if (!isSilenced) {\n        showNotification(`Reminder for ${formatTime12Hour(reminder.time)} has been cleared.`);\n      }\n    }\n  };\n\n  // Handle time change from the input\n  const handleTimeChange = (e) => {\n    setReminderTime(e.target.value);\n  };\n\n  // Clean up timeouts on unmount\n  useEffect(() => {\n    return () => {\n      reminders.forEach((reminder) => clearTimeout(reminder.timeoutId));\n    };\n  }, [reminders]);\n\n  return (\n    <div className=\"time-reminder-container\">\n      {/* Conditionally show time alert SVG or the reminder UI */}\n      {!showTimeReminder ? (\n        <img\n          src={timealart}\n          alt=\"Time Alert\"\n          className=\"time-alert-icon\"\n          onClick={() => setShowTimeReminder(true)} // Show the reminder UI on click\n        />\n      ) : (\n        <>\n          {/* Notification message display in the app */}\n          {reminderMessage && (\n            <div\n              className={`reminder-notification ${\n                isReminderPlaying ? \"slide-in reminder-active\" : \"slide-in\"\n              } ${isSilenced ? \"silenced-notification\" : \"\"}`}\n            >\n              {reminderMessage}\n              {isReminderPlaying && (\n                <button onClick={silenceReminder} className=\"silence-button\">\n                  Silence\n                </button>\n              )}\n            </div>\n          )}\n          <h1>Time Reminder</h1>\n          <input\n            type=\"time\"\n            id=\"reminderTime\"\n            value={reminderTime}\n            onChange={handleTimeChange}\n            required\n          />\n          <button onClick={handleSetReminder}>Set Reminder</button>\n          <ul>\n            {reminders\n              .slice() // Create a shallow copy to avoid mutating state\n              .sort((a, b) => a.time - b.time) // Sort reminders by time (earliest first)\n              .map((reminder) => (\n                <li key={reminder.id}>\n                  {formatTime12Hour(reminder.time)}\n                  <img\n                    src={deleteIcon} // Use the imported delete icon\n                    alt=\"Delete\"\n                    onClick={() => handleClearReminder(reminder.id)} // Call the clear function on click\n                    className=\"delete-icon\" // Optional: add a class for styling\n                  />\n                </li>\n              ))}\n          </ul>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default TimeReminder;\n"],"mappings":";;AAAA;AACA,OAAO,6BAA6B,CAAC,CAAC;AACtC,OAAOA,KAAK,MAAM,yBAAyB,CAAC,CAAC;AAC7C,OAAOC,UAAU,MAAM,qBAAqB,CAAC,CAAC;AAC9C,OAAOC,SAAS,MAAM,uCAAuC,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE/D,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGF,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACG,eAAe,EAAEC,kBAAkB,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC5D,MAAM,CAACK,aAAa,EAAEC,gBAAgB,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACO,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACnE,MAAM,CAACS,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAClE,MAAM,CAACW,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACpE,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACrD,MAAM,CAACe,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEjE;EACAiB,SAAS,CAAC,MAAM;IACd,IAAIC,YAAY,CAACC,UAAU,KAAK,SAAS,EAAE;MACzCD,YAAY,CAACE,iBAAiB,CAAC,CAAC,CAACC,IAAI,CAAEF,UAAU,IAAK;QACpD,IAAIA,UAAU,KAAK,SAAS,EAAE;UAC5BG,OAAO,CAACC,IAAI,CAAC,+BAA+B,CAAC;QAC/C;MACF,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,gBAAgB,GAAIC,IAAI,IAAK;IACjC,OAAOA,IAAI,CAACC,kBAAkB,CAAC,EAAE,EAAE;MACjCC,IAAI,EAAE,SAAS;MACfC,MAAM,EAAE,SAAS;MACjBC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMC,gBAAgB,GAAGA,CACvBC,OAAO,EACPC,YAAY,GAAG,KAAK,EACpBC,qBAAqB,GAAG,IAAI,KACzB;IACH7B,kBAAkB,CAAC2B,OAAO,CAAC;;IAE3B;IACA,IAAI,CAACC,YAAY,EAAE;MACjBE,UAAU,CAAC,MAAM;QACf9B,kBAAkB,CAAC,EAAE,CAAC;MACxB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IACZ;;IAEA;IACA,IAAI6B,qBAAqB,IAAIf,YAAY,CAACC,UAAU,KAAK,SAAS,EAAE;MAClE,MAAMgB,YAAY,GAAG,IAAIjB,YAAY,CAAC,eAAe,EAAE;QACrDkB,IAAI,EAAEL,OAAO;QACbM,IAAI,EAAE,WAAW;QAAE;QACnBC,kBAAkB,EAAEN,YAAY,CAAE;MACpC,CAAC,CAAC;;MAEF;MACAG,YAAY,CAACI,OAAO,GAAG,MAAM;QAC3B,IAAIP,YAAY,EAAE;UAChBQ,eAAe,CAAC,CAAC,CAAC,CAAC;QACrB;QACAL,YAAY,CAACM,KAAK,CAAC,CAAC,CAAC,CAAC;MACxB,CAAC;;MAED;MACA,IAAIT,YAAY,EAAE;QAChBpB,qBAAqB,CAACuB,YAAY,CAAC;MACrC;IACF;EACF,CAAC;;EAED;EACA,MAAMO,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAI,CAAC5C,YAAY,EAAE;MACjBgC,gBAAgB,CAAC,wCAAwC,CAAC;MAC1D;IACF;IAEA,MAAMa,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;IACtB,MAAM,CAACC,KAAK,EAAEC,OAAO,CAAC,GAAGhD,YAAY,CAACiD,KAAK,CAAC,GAAG,CAAC;IAChD,MAAMC,YAAY,GAAG,IAAIJ,IAAI,CAC3BD,GAAG,CAACM,WAAW,CAAC,CAAC,EACjBN,GAAG,CAACO,QAAQ,CAAC,CAAC,EACdP,GAAG,CAACQ,OAAO,CAAC,CAAC,EACbN,KAAK,EACLC,OAAO,EACP,CACF,CAAC;;IAED;IACA,MAAMM,cAAc,GAAG,IAAIR,IAAI,CAACD,GAAG,CAACU,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;;IAE5D;IACA,IAAIL,YAAY,IAAII,cAAc,EAAE;MAClC,MAAME,oBAAoB,GAAG9B,gBAAgB,CAACmB,GAAG,CAAC,CAAC,CAAC;MACpDb,gBAAgB,CACd,sDAAsDwB,oBAAoB,GAC5E,CAAC;MACD;IACF;;IAEA;IACA,MAAMC,eAAe,GAAG,IAAIX,IAAI,CAC9BD,GAAG,CAACU,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,GAAG,EAAE,GAAG,IAC9D,CAAC;;IAED;IACA,IAAIL,YAAY,IAAIO,eAAe,EAAE;MACnCzB,gBAAgB,CACd,+DACF,CAAC;MACD;IACF;;IAEA;IACA,MAAM0B,cAAc,GAAGR,YAAY,GAAGL,GAAG;;IAEzC;IACA,MAAMc,EAAE,GAAG,GAAGT,YAAY,CAACK,OAAO,CAAC,CAAC,IAAIK,IAAI,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;;IAEzD;IACA,MAAMC,SAAS,GAAG1B,UAAU,CAAC,MAAM;MACjC,MAAM2B,KAAK,GAAG,IAAIC,KAAK,CAACzE,KAAK,CAAC,CAAC,CAAC;MAChCwE,KAAK,CAACE,IAAI,GAAG,IAAI,CAAC,CAAC;MACnBzD,gBAAgB,CAACuD,KAAK,CAAC,CAAC,CAAC;MACzBA,KAAK,CAACG,IAAI,CAAC,CAAC,CAACC,KAAK,CAAEC,GAAG,IAAK;QAC1B5C,OAAO,CAAC6C,KAAK,CAAC,sBAAsB,EAAED,GAAG,CAAC;MAC5C,CAAC,CAAC;MACF1D,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC;MAC5BE,oBAAoB,CAAC+C,EAAE,CAAC,CAAC,CAAC;MAC1B,MAAM1B,OAAO,GAAG,sBAAsBP,gBAAgB,CAACwB,YAAY,CAAC,EAAE;MACtElB,gBAAgB,CAACC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;IACnC,CAAC,EAAEyB,cAAc,CAAC;;IAElB;IACAtD,YAAY,CAAEkE,aAAa,IAAK,CAC9B,GAAGA,aAAa,EAChB;MAAEX,EAAE;MAAEY,IAAI,EAAErB,YAAY;MAAEY;IAAU,CAAC,CACtC,CAAC;IACF9B,gBAAgB,CAAC,oBAAoBN,gBAAgB,CAACwB,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1E,CAAC;;EAED;EACA,MAAMR,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAInC,aAAa,EAAE;MACjBA,aAAa,CAACiE,KAAK,CAAC,CAAC,CAAC,CAAC;MACvBjE,aAAa,CAACkE,WAAW,GAAG,CAAC,CAAC,CAAC;MAC/BjE,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;MACxBE,oBAAoB,CAAC,KAAK,CAAC,CAAC,CAAC;;MAE7B;MACAJ,kBAAkB,CAAC,WAAW,CAAC,CAAC,CAAC;MACjCU,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;MACrB,MAAM0D,mBAAmB,GAAGC,QAAQ,CAACC,aAAa,CAAC,wBAAwB,CAAC;MAC5EF,mBAAmB,CAACG,SAAS,CAACC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;;MAE/C;MACA,IAAIjE,kBAAkB,EAAE;QACtBA,kBAAkB,CAAC8B,KAAK,CAAC,CAAC,CAAC,CAAC;QAC5B7B,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC;MAC/B;;MAEA;MACAsB,UAAU,CAAC,MAAM;QACfsC,mBAAmB,CAACG,SAAS,CAACE,MAAM,CAAC,UAAU,CAAC;QAChDzE,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC;QACxBU,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;MACxB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;MAEV;MACAZ,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;IACpB;EACF,CAAC;;EAED;EACA,MAAM4E,mBAAmB,GAAIrB,EAAE,IAAK;IAClC,MAAMsB,QAAQ,GAAG9E,SAAS,CAAC+E,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACxB,EAAE,KAAKA,EAAE,CAAC;IACvD,IAAIsB,QAAQ,EAAE;MACZG,YAAY,CAACH,QAAQ,CAACnB,SAAS,CAAC,CAAC,CAAC;MAClC1D,YAAY,CAAEkE,aAAa,IACzBA,aAAa,CAACe,MAAM,CAAEF,GAAG,IAAKA,GAAG,CAACxB,EAAE,KAAKA,EAAE,CAC7C,CAAC,CAAC,CAAC;;MAEH;MACA,IAAI,CAAC5C,UAAU,EAAE;QACfiB,gBAAgB,CAAC,gBAAgBN,gBAAgB,CAACuD,QAAQ,CAACV,IAAI,CAAC,oBAAoB,CAAC;MACvF;IACF;EACF,CAAC;;EAED;EACA,MAAMe,gBAAgB,GAAIC,CAAC,IAAK;IAC9BtF,eAAe,CAACsF,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EACjC,CAAC;;EAED;EACAtE,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACXhB,SAAS,CAACuF,OAAO,CAAET,QAAQ,IAAKG,YAAY,CAACH,QAAQ,CAACnB,SAAS,CAAC,CAAC;IACnE,CAAC;EACH,CAAC,EAAE,CAAC3D,SAAS,CAAC,CAAC;EAEf,oBACER,OAAA;IAAKgG,SAAS,EAAC,yBAAyB;IAAAC,QAAA,EAErC,CAAC3E,gBAAgB,gBAChBtB,OAAA;MACEkG,GAAG,EAAEpG,SAAU;MACfqG,GAAG,EAAC,YAAY;MAChBH,SAAS,EAAC,iBAAiB;MAC3BI,OAAO,EAAEA,CAAA,KAAM7E,mBAAmB,CAAC,IAAI,CAAE,CAAC;IAAA;MAAA8E,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CAAC,gBAEFxG,OAAA,CAAAE,SAAA;MAAA+F,QAAA,GAEGvF,eAAe,iBACdV,OAAA;QACEgG,SAAS,EAAE,yBACTlF,iBAAiB,GAAG,0BAA0B,GAAG,UAAU,IACzDM,UAAU,GAAG,uBAAuB,GAAG,EAAE,EAAG;QAAA6E,QAAA,GAE/CvF,eAAe,EACfI,iBAAiB,iBAChBd,OAAA;UAAQoG,OAAO,EAAErD,eAAgB;UAACiD,SAAS,EAAC,gBAAgB;UAAAC,QAAA,EAAC;QAE7D;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CACT;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CACN,eACDxG,OAAA;QAAAiG,QAAA,EAAI;MAAa;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtBxG,OAAA;QACEyG,IAAI,EAAC,MAAM;QACXzC,EAAE,EAAC,cAAc;QACjB8B,KAAK,EAAEzF,YAAa;QACpBqG,QAAQ,EAAEf,gBAAiB;QAC3BgB,QAAQ;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC,eACFxG,OAAA;QAAQoG,OAAO,EAAEnD,iBAAkB;QAAAgD,QAAA,EAAC;MAAY;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACzDxG,OAAA;QAAAiG,QAAA,EACGzF,SAAS,CACPoG,KAAK,CAAC,CAAC,CAAC;QAAA,CACRC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAAClC,IAAI,GAAGmC,CAAC,CAACnC,IAAI,CAAC,CAAC;QAAA,CAChCoC,GAAG,CAAE1B,QAAQ,iBACZtF,OAAA;UAAAiG,QAAA,GACGlE,gBAAgB,CAACuD,QAAQ,CAACV,IAAI,CAAC,eAChC5E,OAAA;YACEkG,GAAG,EAAErG,UAAW,CAAC;YAAA;YACjBsG,GAAG,EAAC,QAAQ;YACZC,OAAO,EAAEA,CAAA,KAAMf,mBAAmB,CAACC,QAAQ,CAACtB,EAAE,CAAE,CAAC;YAAA;YACjDgC,SAAS,EAAC,aAAa,CAAC;UAAA;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACzB,CAAC;QAAA,GAPKlB,QAAQ,CAACtB,EAAE;UAAAqC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAQhB,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC;IAAA,eACL;EACH;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACpG,EAAA,CAhQID,YAAY;AAAA8G,EAAA,GAAZ9G,YAAY;AAkQlB,eAAeA,YAAY;AAAC,IAAA8G,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}