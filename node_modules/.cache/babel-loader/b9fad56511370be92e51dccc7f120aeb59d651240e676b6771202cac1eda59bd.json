{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import \"./../style/cursor.css\";\n// const Cursor = () => {\n//   const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);\n\n//   const handleResize = () => {\n//     setIsMobile(window.innerWidth <= 768);\n//   };\n\n//   useEffect(() => {\n//     window.addEventListener(\"resize\", handleResize);\n//     return () => {\n//       window.removeEventListener(\"resize\", handleResize);\n//     };\n//   }, []);\n\n//   useEffect(() => {\n//     const cursor = document.querySelector(\".cursor\");\n\n//     // Move cursor with mouse movement\n//     const moveCursor = (e) => {\n//       if (cursor) {\n//         const x = e.clientX;\n//         const y = e.clientY;\n//         cursor.style.left = `${x}px`;\n//         cursor.style.top = `${y + window.scrollY}px`; // Account for scrolling\n//       }\n//     };\n\n//     // Change cursor style on hover over specific text or button elements\n//     const handleHover = (e) => {\n//       if (cursor) {\n//         // Check if the target element is an H1, H2, BUTTON, A (link), or IMG\n//         if (\n//           e.target.tagName === \"H1\" ||\n//           e.target.tagName === \"H2\" ||\n//           // e.target.tagName === 'H3' ||\n//           // e.target.tagName === 'IMG' ||\n//           e.target.tagName === \"BUTTON\" ||\n//           e.target.tagName === \"A\" // Include links\n//         ) {\n//           // Get the dimensions of the target element\n//           const { width, height } = e.target.getBoundingClientRect();\n//           cursor.style.width = `${width}px`;\n//           cursor.style.height = `${height}px`;\n//           cursor.style.borderRadius = \"8px\";\n//           cursor.style.transform = `translate(-50%, -50%) scale(1.2)`; // Scale up for a more interactive effect\n//         } else {\n//           // Reset the cursor when it's not hovering over the specified elements\n//           cursor.style.width = \"30px\"; // Reset to original size\n//           cursor.style.height = \"30px\";\n//           cursor.style.borderRadius = \"50%\"; // Reset to circular shape\n//           cursor.style.transform = `translate(-50%, -50%) scale(1)`; // Reset to original scale\n//         }\n//       }\n//     };\n\n//     // Add event listeners\n//     document.addEventListener(\"mousemove\", moveCursor);\n//     document.addEventListener(\"mouseover\", handleHover);\n//     document.addEventListener(\"mouseout\", handleHover);\n\n//     // Cleanup on component unmount\n//     return () => {\n//       document.removeEventListener(\"mousemove\", moveCursor);\n//       document.removeEventListener(\"mouseover\", handleHover);\n//       document.removeEventListener(\"mouseout\", handleHover);\n//     };\n//   }, []);\n\n//   if (isMobile) {\n//     return null; // Don't render the cursor on mobile screens\n//   }\n\n//   return <div className=\"cursor\"></div>; // Render the cursor for larger screens\n// };\n\n// export default Cursor;","map":{"version":3,"names":[],"sources":["/Users/solomonrojer/Desktop/Patrick/Time-Management/src/component/Cursor.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import \"./../style/cursor.css\";\n// const Cursor = () => {\n//   const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);\n\n//   const handleResize = () => {\n//     setIsMobile(window.innerWidth <= 768);\n//   };\n\n//   useEffect(() => {\n//     window.addEventListener(\"resize\", handleResize);\n//     return () => {\n//       window.removeEventListener(\"resize\", handleResize);\n//     };\n//   }, []);\n\n//   useEffect(() => {\n//     const cursor = document.querySelector(\".cursor\");\n\n//     // Move cursor with mouse movement\n//     const moveCursor = (e) => {\n//       if (cursor) {\n//         const x = e.clientX;\n//         const y = e.clientY;\n//         cursor.style.left = `${x}px`;\n//         cursor.style.top = `${y + window.scrollY}px`; // Account for scrolling\n//       }\n//     };\n\n//     // Change cursor style on hover over specific text or button elements\n//     const handleHover = (e) => {\n//       if (cursor) {\n//         // Check if the target element is an H1, H2, BUTTON, A (link), or IMG\n//         if (\n//           e.target.tagName === \"H1\" ||\n//           e.target.tagName === \"H2\" ||\n//           // e.target.tagName === 'H3' ||\n//           // e.target.tagName === 'IMG' ||\n//           e.target.tagName === \"BUTTON\" ||\n//           e.target.tagName === \"A\" // Include links\n//         ) {\n//           // Get the dimensions of the target element\n//           const { width, height } = e.target.getBoundingClientRect();\n//           cursor.style.width = `${width}px`;\n//           cursor.style.height = `${height}px`;\n//           cursor.style.borderRadius = \"8px\";\n//           cursor.style.transform = `translate(-50%, -50%) scale(1.2)`; // Scale up for a more interactive effect\n//         } else {\n//           // Reset the cursor when it's not hovering over the specified elements\n//           cursor.style.width = \"30px\"; // Reset to original size\n//           cursor.style.height = \"30px\";\n//           cursor.style.borderRadius = \"50%\"; // Reset to circular shape\n//           cursor.style.transform = `translate(-50%, -50%) scale(1)`; // Reset to original scale\n//         }\n//       }\n//     };\n\n//     // Add event listeners\n//     document.addEventListener(\"mousemove\", moveCursor);\n//     document.addEventListener(\"mouseover\", handleHover);\n//     document.addEventListener(\"mouseout\", handleHover);\n\n//     // Cleanup on component unmount\n//     return () => {\n//       document.removeEventListener(\"mousemove\", moveCursor);\n//       document.removeEventListener(\"mouseover\", handleHover);\n//       document.removeEventListener(\"mouseout\", handleHover);\n//     };\n//   }, []);\n\n//   if (isMobile) {\n//     return null; // Don't render the cursor on mobile screens\n//   }\n\n//   return <div className=\"cursor\"></div>; // Render the cursor for larger screens\n// };\n\n// export default Cursor;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}