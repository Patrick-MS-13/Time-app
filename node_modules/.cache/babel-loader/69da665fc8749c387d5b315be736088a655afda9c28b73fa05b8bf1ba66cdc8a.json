{"ast":null,"code":"var _jsxFileName = \"/Users/solomonrojer/Desktop/Patrick/Project/mini-project/src/component/Alarm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./../style/alarm.css\"; // Ensure your CSS file is correctly linked\nimport add from './../img/add.svg'; // Import your new SVG\nimport Delete from './../img/delete.svg'; // Import your delete SVG\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AlarmItem = ({\n  alarm,\n  onToggle,\n  onCheckboxToggle,\n  isSelected\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    className: \"glassy-effect\",\n    style: {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      margin: \"10px 0\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        textAlign: \"left\",\n        padding: \"0px 100px 0px 0px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: \"1.5em\",\n          display: \"flex\",\n          alignItems: \"baseline\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: alarm.time12.split(\" \")[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontSize: \"0.4em\",\n            marginLeft: \"5px\"\n          },\n          children: alarm.time12.split(\" \")[1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: \"0.6em\",\n          marginTop: \"2px\"\n        },\n        children: alarm.isActive ? `Alarm in ${Math.floor(calculateRemainingTime(alarm) / (1000 * 60 * 60))}h ${Math.floor(calculateRemainingTime(alarm) % (1000 * 60 * 60) / (1000 * 60))}m ${Math.floor(calculateRemainingTime(alarm) % (1000 * 60) / 1000)}s` : \"Alarm Disabled\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center'\n      },\n      children: showCheckboxes ? /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"round-checkbox\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: isSelected,\n          onChange: onCheckboxToggle,\n          style: {\n            display: \"none\"\n          } // Hide the default checkbox\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"checkmark\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"switch\",\n        style: {\n          marginLeft: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: alarm.isActive,\n          onChange: onToggle,\n          style: {\n            display: \"none\"\n          } // Hide the default checkbox\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `slider ${alarm.isActive ? \"\" : \"round\"}`,\n          style: {\n            width: \"49px\",\n            height: \"22px\"\n          } // Adjust slider size\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n_c = AlarmItem;\nconst Alarm = () => {\n  _s();\n  const [alarmTime, setAlarmTime] = useState(\"\");\n  const [alarms, setAlarms] = useState([]); // Array to hold all alarms\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [alarmMessage, setAlarmMessage] = useState(\"\"); // Notification message\n  const [showForm, setShowForm] = useState(false); // Control visibility of form\n  const [showCheckboxes, setShowCheckboxes] = useState(false); // Control checkbox display\n  const [selectedAlarms, setSelectedAlarms] = useState({}); // Track selected alarms for deletion\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const now = new Date();\n      setCurrentTime(now);\n      checkAlarms(now); // Pass current time to check alarms\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [alarms]); // Only depend on alarms\n\n  const checkAlarms = now => {\n    setAlarms(prevAlarms => prevAlarms.map(alarm => {\n      const [alarmHours, alarmMinutes] = alarm.time24.split(\":\").map(Number);\n      const alarmDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), alarmHours, alarmMinutes);\n      if (alarmDate < now) {\n        alarmDate.setDate(alarmDate.getDate() + 1); // Set for the next day if time has passed\n      }\n\n      // Check if the alarm should ring\n      if (now.getHours() === alarmHours && now.getMinutes() === alarmMinutes && alarm.isActive) {\n        // Alarm is ringing, disable it\n        setAlarmMessage(`Alarm ringing for ${alarm.time12}!`);\n        return {\n          ...alarm,\n          isActive: false\n        }; // Turn off the alarm after it rings\n      }\n      return alarm; // Return unchanged if the alarm shouldn't ring yet\n    }));\n\n    // Clear the alarm message after 5 seconds\n    setTimeout(() => {\n      setAlarmMessage(\"\");\n    }, 5000);\n  };\n  const handleSetAlarm = () => {\n    if (alarmTime) {\n      const newAlarm = {\n        time24: alarmTime,\n        time12: formatAlarmTime(alarmTime),\n        id: Date.now(),\n        isActive: true\n      };\n      setAlarms(prev => [...prev, newAlarm]);\n      setAlarmMessage(`Alarm set for ${newAlarm.time12}`);\n      setAlarmTime(\"\");\n      setShowForm(false); // Hide form after setting the alarm\n\n      // Clear the alarm message after 3 seconds\n      setTimeout(() => {\n        setAlarmMessage(\"\");\n      }, 3000);\n    } else {\n      setAlarmMessage(\"Please enter a valid time\");\n      // Clear the alarm message after 3 seconds\n      setTimeout(() => {\n        setAlarmMessage(\"\");\n      }, 3000);\n    }\n  };\n  const formatAlarmTime = time => {\n    const [hours, minutes] = time.split(\":\").map(Number);\n    const ampm = hours >= 12 ? \"PM\" : \"AM\";\n    const formattedHours = hours % 12 || 12;\n    return `${formattedHours}:${minutes < 10 ? \"0\" + minutes : minutes} ${ampm}`;\n  };\n  const calculateRemainingTime = alarm => {\n    const [alarmHours, alarmMinutes] = alarm.time24.split(\":\").map(Number);\n    const now = new Date();\n    const alarmDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), alarmHours, alarmMinutes);\n    if (alarmDate < now) {\n      alarmDate.setDate(alarmDate.getDate() + 1);\n    }\n    return alarmDate.getTime() - now.getTime(); // Return the difference in milliseconds\n  };\n  const toggleAlarm = id => {\n    setAlarms(prev => prev.map(alarm => {\n      if (alarm.id === id) {\n        const updatedAlarm = {\n          ...alarm,\n          isActive: !alarm.isActive\n        };\n        setAlarmMessage(updatedAlarm.isActive ? `Alarm re-enabled for ${updatedAlarm.time12}` : `Alarm disabled for ${updatedAlarm.time12}`);\n        return updatedAlarm;\n      }\n      return alarm; // Return unchanged if it's not the selected alarm\n    }));\n\n    // Clear the alarm message after 3 seconds\n    setTimeout(() => {\n      setAlarmMessage(\"\");\n    }, 3000);\n  };\n  const toggleCheckbox = id => {\n    setSelectedAlarms(prev => ({\n      ...prev,\n      [id]: !prev[id] // Toggle the selected state for the alarm\n    }));\n  };\n  const deleteSelectedAlarms = () => {\n    const deletedAlarms = alarms.filter(alarm => selectedAlarms[alarm.id]);\n    setAlarms(prev => prev.filter(alarm => !selectedAlarms[alarm.id])); // Delete selected alarms\n    setSelectedAlarms({}); // Clear selected alarms\n    setShowCheckboxes(false); // Hide checkboxes\n\n    if (deletedAlarms.length > 0) {\n      setAlarmMessage(`Deleted ${deletedAlarms.length} selected alarm(s).`);\n    } else {\n      setAlarmMessage(\"No alarms were selected for deletion.\");\n    }\n\n    // Clear the alarm message after 5 seconds\n    setTimeout(() => {\n      setAlarmMessage(\"\");\n    }, 5000);\n  };\n  const handleDeleteClick = () => {\n    if (alarms.length === 0) {\n      // If no alarms are present, show the \"No alarms were set for deletion\" message\n      setAlarmMessage(\"No alarms were set for deletion.\");\n\n      // Clear the message after 3 seconds\n      setTimeout(() => {\n        setAlarmMessage(\"\");\n      }, 3000);\n    } else if (showCheckboxes) {\n      // If checkboxes are already visible, directly delete the selected alarms\n      deleteSelectedAlarms();\n    } else {\n      // If checkboxes are not visible, show them without any additional messages\n      setShowCheckboxes(true);\n    }\n  };\n  const sortedAlarms = [...alarms].sort((a, b) => calculateRemainingTime(a) - calculateRemainingTime(b));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [alarmMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification\",\n      children: alarmMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 24\n    }, this), !showForm && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"set-alarm-btn\",\n      onClick: () => setShowForm(true),\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: add,\n        alt: \"Add Alarm\",\n        style: {\n          width: \"20px\",\n          marginRight: \"5px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }, this), \"Set Alarm\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 9\n    }, this), showForm && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alarm-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"time\",\n        value: alarmTime,\n        onChange: e => setAlarmTime(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSetAlarm,\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowForm(false),\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"alarm-list\",\n      children: sortedAlarms.map(alarm => /*#__PURE__*/_jsxDEV(AlarmItem, {\n        alarm: alarm,\n        onToggle: () => toggleAlarm(alarm.id),\n        onCheckboxToggle: () => toggleCheckbox(alarm.id),\n        isSelected: selectedAlarms[alarm.id] || false\n      }, alarm.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this), showCheckboxes && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: deleteSelectedAlarms,\n      children: \"Delete Selected\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDeleteClick,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: Delete,\n        alt: \"Delete Selected\",\n        style: {\n          width: \"20px\",\n          marginRight: \"5px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this), showCheckboxes ? \"Cancel Selection\" : \"Delete Selected\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 247,\n    columnNumber: 5\n  }, this);\n};\n_s(Alarm, \"zv0Xwd6CujiOR7b5wIiFVo7VWto=\");\n_c2 = Alarm;\nexport default Alarm;\nvar _c, _c2;\n$RefreshReg$(_c, \"AlarmItem\");\n$RefreshReg$(_c2, \"Alarm\");","map":{"version":3,"names":["React","useState","useEffect","add","Delete","jsxDEV","_jsxDEV","AlarmItem","alarm","onToggle","onCheckboxToggle","isSelected","className","style","display","justifyContent","alignItems","margin","children","flex","textAlign","padding","fontSize","time12","split","fileName","_jsxFileName","lineNumber","columnNumber","marginLeft","marginTop","isActive","Math","floor","calculateRemainingTime","showCheckboxes","type","checked","onChange","width","height","_c","Alarm","_s","alarmTime","setAlarmTime","alarms","setAlarms","currentTime","setCurrentTime","Date","alarmMessage","setAlarmMessage","showForm","setShowForm","setShowCheckboxes","selectedAlarms","setSelectedAlarms","interval","setInterval","now","checkAlarms","clearInterval","prevAlarms","map","alarmHours","alarmMinutes","time24","Number","alarmDate","getFullYear","getMonth","getDate","setDate","getHours","getMinutes","setTimeout","handleSetAlarm","newAlarm","formatAlarmTime","id","prev","time","hours","minutes","ampm","formattedHours","getTime","toggleAlarm","updatedAlarm","toggleCheckbox","deleteSelectedAlarms","deletedAlarms","filter","length","handleDeleteClick","sortedAlarms","sort","a","b","onClick","src","alt","marginRight","value","e","target","required","_c2","$RefreshReg$"],"sources":["/Users/solomonrojer/Desktop/Patrick/Project/mini-project/src/component/Alarm.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./../style/alarm.css\"; // Ensure your CSS file is correctly linked\nimport add from './../img/add.svg'; // Import your new SVG\nimport Delete from './../img/delete.svg'; // Import your delete SVG\n\nconst AlarmItem = ({ alarm, onToggle, onCheckboxToggle, isSelected }) => {\n  return (\n    <li\n      className=\"glassy-effect\"\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        margin: \"10px 0\",\n      }}\n    >\n      <div\n        style={{\n          flex: 1,\n          textAlign: \"left\",\n          padding: \"0px 100px 0px 0px\",\n        }}\n      >\n        <div\n          style={{\n            fontSize: \"1.5em\",\n            display: \"flex\",\n            alignItems: \"baseline\",\n          }}\n        >\n          <span>{alarm.time12.split(\" \")[0]}</span>{\" \"}\n          <span style={{ fontSize: \"0.4em\", marginLeft: \"5px\" }}>\n            {alarm.time12.split(\" \")[1]}\n          </span>{\" \"}\n        </div>\n        <div style={{ fontSize: \"0.6em\", marginTop: \"2px\" }}>\n          {alarm.isActive\n            ? `Alarm in ${Math.floor(calculateRemainingTime(alarm) / (1000 * 60 * 60))}h ${Math.floor((calculateRemainingTime(alarm) % (1000 * 60 * 60)) / (1000 * 60))}m ${Math.floor((calculateRemainingTime(alarm) % (1000 * 60)) / 1000)}s`\n            : \"Alarm Disabled\"}\n        </div>\n      </div>\n      <div style={{ display: 'flex', alignItems: 'center' }}>\n        {showCheckboxes ? (\n          <label className=\"round-checkbox\">\n            <input\n              type=\"checkbox\"\n              checked={isSelected}\n              onChange={onCheckboxToggle}\n              style={{ display: \"none\" }} // Hide the default checkbox\n            />\n            <span className=\"checkmark\"></span>\n          </label>\n        ) : (\n          <label className=\"switch\" style={{ marginLeft: \"10px\" }}>\n            <input\n              type=\"checkbox\"\n              checked={alarm.isActive}\n              onChange={onToggle}\n              style={{ display: \"none\" }} // Hide the default checkbox\n            />\n            <span\n              className={`slider ${alarm.isActive ? \"\" : \"round\"}`}\n              style={{ width: \"49px\", height: \"22px\" }} // Adjust slider size\n            ></span>\n          </label>\n        )}\n      </div>\n    </li>\n  );\n};\n\nconst Alarm = () => {\n  const [alarmTime, setAlarmTime] = useState(\"\");\n  const [alarms, setAlarms] = useState([]); // Array to hold all alarms\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [alarmMessage, setAlarmMessage] = useState(\"\"); // Notification message\n  const [showForm, setShowForm] = useState(false); // Control visibility of form\n  const [showCheckboxes, setShowCheckboxes] = useState(false); // Control checkbox display\n  const [selectedAlarms, setSelectedAlarms] = useState({}); // Track selected alarms for deletion\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const now = new Date();\n      setCurrentTime(now);\n      checkAlarms(now); // Pass current time to check alarms\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [alarms]); // Only depend on alarms\n\n  const checkAlarms = (now) => {\n    setAlarms((prevAlarms) =>\n      prevAlarms.map((alarm) => {\n        const [alarmHours, alarmMinutes] = alarm.time24.split(\":\").map(Number);\n        const alarmDate = new Date(\n          now.getFullYear(),\n          now.getMonth(),\n          now.getDate(),\n          alarmHours,\n          alarmMinutes\n        );\n\n        if (alarmDate < now) {\n          alarmDate.setDate(alarmDate.getDate() + 1); // Set for the next day if time has passed\n        }\n\n        // Check if the alarm should ring\n        if (\n          now.getHours() === alarmHours &&\n          now.getMinutes() === alarmMinutes &&\n          alarm.isActive\n        ) {\n          // Alarm is ringing, disable it\n          setAlarmMessage(`Alarm ringing for ${alarm.time12}!`);\n          return { ...alarm, isActive: false }; // Turn off the alarm after it rings\n        }\n\n        return alarm; // Return unchanged if the alarm shouldn't ring yet\n      })\n    );\n\n    // Clear the alarm message after 5 seconds\n    setTimeout(() => {\n      setAlarmMessage(\"\");\n    }, 5000);\n  };\n\n  const handleSetAlarm = () => {\n    if (alarmTime) {\n      const newAlarm = {\n        time24: alarmTime,\n        time12: formatAlarmTime(alarmTime),\n        id: Date.now(),\n        isActive: true,\n      };\n      setAlarms((prev) => [...prev, newAlarm]);\n      setAlarmMessage(`Alarm set for ${newAlarm.time12}`);\n      setAlarmTime(\"\");\n      setShowForm(false); // Hide form after setting the alarm\n\n      // Clear the alarm message after 3 seconds\n      setTimeout(() => {\n        setAlarmMessage(\"\");\n      }, 3000);\n    } else {\n      setAlarmMessage(\"Please enter a valid time\");\n      // Clear the alarm message after 3 seconds\n      setTimeout(() => {\n        setAlarmMessage(\"\");\n      }, 3000);\n    }\n  };\n\n  const formatAlarmTime = (time) => {\n    const [hours, minutes] = time.split(\":\").map(Number);\n    const ampm = hours >= 12 ? \"PM\" : \"AM\";\n    const formattedHours = hours % 12 || 12;\n    return `${formattedHours}:${minutes < 10 ? \"0\" + minutes : minutes} ${ampm}`;\n  };\n\n  const calculateRemainingTime = (alarm) => {\n    const [alarmHours, alarmMinutes] = alarm.time24.split(\":\").map(Number);\n    const now = new Date();\n    const alarmDate = new Date(\n      now.getFullYear(),\n      now.getMonth(),\n      now.getDate(),\n      alarmHours,\n      alarmMinutes\n    );\n\n    if (alarmDate < now) {\n      alarmDate.setDate(alarmDate.getDate() + 1);\n    }\n\n    return alarmDate.getTime() - now.getTime(); // Return the difference in milliseconds\n  };\n\n  const toggleAlarm = (id) => {\n    setAlarms((prev) =>\n      prev.map((alarm) => {\n        if (alarm.id === id) {\n          const updatedAlarm = { ...alarm, isActive: !alarm.isActive };\n          setAlarmMessage(\n            updatedAlarm.isActive\n              ? `Alarm re-enabled for ${updatedAlarm.time12}`\n              : `Alarm disabled for ${updatedAlarm.time12}`\n          );\n          return updatedAlarm;\n        }\n        return alarm; // Return unchanged if it's not the selected alarm\n      })\n    );\n\n    // Clear the alarm message after 3 seconds\n    setTimeout(() => {\n      setAlarmMessage(\"\");\n    }, 3000);\n  };\n\n  const toggleCheckbox = (id) => {\n    setSelectedAlarms((prev) => ({\n      ...prev,\n      [id]: !prev[id], // Toggle the selected state for the alarm\n    }));\n  };\n\n  const deleteSelectedAlarms = () => {\n    const deletedAlarms = alarms.filter((alarm) => selectedAlarms[alarm.id]);\n    setAlarms((prev) => prev.filter((alarm) => !selectedAlarms[alarm.id])); // Delete selected alarms\n    setSelectedAlarms({}); // Clear selected alarms\n    setShowCheckboxes(false); // Hide checkboxes\n\n    if (deletedAlarms.length > 0) {\n      setAlarmMessage(`Deleted ${deletedAlarms.length} selected alarm(s).`);\n    } else {\n      setAlarmMessage(\"No alarms were selected for deletion.\");\n    }\n\n    // Clear the alarm message after 5 seconds\n    setTimeout(() => {\n      setAlarmMessage(\"\");\n    }, 5000);\n  };\n\n  const handleDeleteClick = () => {\n    if (alarms.length === 0) {\n      // If no alarms are present, show the \"No alarms were set for deletion\" message\n      setAlarmMessage(\"No alarms were set for deletion.\");\n\n      // Clear the message after 3 seconds\n      setTimeout(() => {\n        setAlarmMessage(\"\");\n      }, 3000);\n    } else if (showCheckboxes) {\n      // If checkboxes are already visible, directly delete the selected alarms\n      deleteSelectedAlarms();\n    } else {\n      // If checkboxes are not visible, show them without any additional messages\n      setShowCheckboxes(true);\n    }\n  };\n\n  const sortedAlarms = [...alarms].sort((a, b) => calculateRemainingTime(a) - calculateRemainingTime(b));\n\n  return (\n    <div className=\"container\">\n      {alarmMessage && <div className=\"notification\">{alarmMessage}</div>}\n      \n      {/* Conditionally hide the \"Set Alarm\" button when the form is visible */}\n      {!showForm && (\n        <button className=\"set-alarm-btn\" onClick={() => setShowForm(true)}>\n          <img src={add} alt=\"Add Alarm\" style={{ width: \"20px\", marginRight: \"5px\" }} />\n          Set Alarm\n        </button>\n      )}\n\n      {/* Show form for setting alarms */}\n      {showForm && (\n        <div className=\"alarm-form\">\n          <input\n            type=\"time\"\n            value={alarmTime}\n            onChange={(e) => setAlarmTime(e.target.value)}\n            required\n          />\n          <button onClick={handleSetAlarm}>Add</button>\n          <button onClick={() => setShowForm(false)}>Cancel</button>\n        </div>\n      )}\n\n      <ul className=\"alarm-list\">\n        {sortedAlarms.map((alarm) => (\n          <AlarmItem\n            key={alarm.id}\n            alarm={alarm}\n            onToggle={() => toggleAlarm(alarm.id)}\n            onCheckboxToggle={() => toggleCheckbox(alarm.id)}\n            isSelected={selectedAlarms[alarm.id] || false}\n          />\n        ))}\n      </ul>\n\n      {/* Button to delete selected alarms */}\n      {showCheckboxes && (\n        <button onClick={deleteSelectedAlarms}>Delete Selected</button>\n      )}\n\n      <button onClick={handleDeleteClick}>\n        <img src={Delete} alt=\"Delete Selected\" style={{ width: \"20px\", marginRight: \"5px\" }} />\n        {showCheckboxes ? \"Cancel Selection\" : \"Delete Selected\"}\n      </button>\n    </div>\n  );\n};\n\nexport default Alarm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}