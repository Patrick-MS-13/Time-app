{"ast":null,"code":"var _jsxFileName = \"/Users/solomonrojer/Desktop/Patrick/Time-Management/src/component/Alarm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./../style/alarm.css\"; // Ensure your CSS file is correctly linked\nimport add from \"./../img/add.svg\"; // Import your new SVG\nimport Delete from \"./../img/delete.svg\"; // Import your delete SVG\nimport alarm from \"./../img/alarm-plus-svgrepo-com.svg\"; // Import your alarm SVG\nimport sound from \"./../audio/reminder.mp3\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Alarm = () => {\n  _s();\n  var _alarms$find;\n  const [alarmTime, setAlarmTime] = useState(\"\");\n  const [alarms, setAlarms] = useState([]); // Array to hold all alarms\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [alarmMessage, setAlarmMessage] = useState(\"\"); // Notification message\n  const [showForm, setShowForm] = useState(false); // Control visibility of form\n  const [showCheckboxes, setShowCheckboxes] = useState(false); // Control checkbox display\n  const [selectedAlarms, setSelectedAlarms] = useState({}); // Track selected alarms for deletion\n  const [showDeleteButton, setShowDeleteButton] = useState(false); // New state for delete button visibility\n  const [showAlarmClock, setShowAlarmClock] = useState(false); // State to control visibility of the alarm clock\n  const [ringingAlarmId, setRingingAlarmId] = useState(null);\n  const audio = new Audio(sound); // Create audio instance\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const now = new Date();\n      setCurrentTime(now);\n      checkAlarms(now); // Pass current time to check alarms\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [alarms]); // Only depend on alarms\n\n  // Function to stop the alarm\n  const stopAlarm = () => {\n    setAlarms(prevAlarms => prevAlarms.map(alarm => {\n      if (alarm.id === ringingAlarmId) {\n        return {\n          ...alarm,\n          isActive: false\n        }; // Deactivate the ringing alarm\n      }\n      return alarm;\n    }));\n    setRingingAlarmId(null); // Clear the ringing alarm ID\n  };\n\n  // Function to snooze the alarm for 5 minutes\n  const snoozeAlarm = () => {\n    setAlarms(prevAlarms => prevAlarms.map(alarm => {\n      if (alarm.id === ringingAlarmId) {\n        const [hours, minutes] = alarm.time24.split(\":\").map(Number);\n        const snoozedTime = new Date();\n        snoozedTime.setHours(hours);\n        snoozedTime.setMinutes(minutes + 5);\n        const newTime24 = `${snoozedTime.getHours().toString().padStart(2, \"0\")}:${snoozedTime.getMinutes().toString().padStart(2, \"0\")}`;\n        return {\n          ...alarm,\n          time24: newTime24\n        };\n      }\n      return alarm;\n    }));\n    setRingingAlarmId(null);\n  };\n  const checkAlarms = now => {\n    setAlarms(prevAlarms => prevAlarms.map(alarm => {\n      const [alarmHours, alarmMinutes] = alarm.time24.split(\":\").map(Number);\n      const alarmDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), alarmHours, alarmMinutes);\n      if (now.getHours() === alarmHours && now.getMinutes() === alarmMinutes && alarm.isActive) {\n        setRingingAlarmId(alarm.id);\n      }\n      if (alarmDate < now) {\n        alarmDate.setDate(alarmDate.getDate() + 1); // Set for the next day if time has passed\n      }\n      const stopAlarm = () => {\n        setAlarms(prev => prev.map(alarm => alarm.id === ringingAlarmId ? {\n          ...alarm,\n          isActive: false\n        } : alarm));\n        setRingingAlarmId(null); // Reset the ringing alarm\n      };\n      const snoozeAlarm = () => {\n        const snoozeTime = 5; // Snooze for 5 minutes\n        setAlarms(prev => prev.map(alarm => {\n          if (alarm.id === ringingAlarmId) {\n            const [hours, minutes] = alarm.time24.split(\":\").map(Number);\n            const snoozedDate = new Date();\n            snoozedDate.setHours(hours);\n            snoozedDate.setMinutes(minutes + snoozeTime);\n            const newTime24 = `${String(snoozedDate.getHours()).padStart(2, \"0\")}:${String(snoozedDate.getMinutes()).padStart(2, \"0\")}`;\n            return {\n              ...alarm,\n              time24: newTime24\n            };\n          }\n          return alarm;\n        }));\n        setRingingAlarmId(null); // Reset the ringing alarm\n      };\n\n      // Check if the alarm should ring\n      if (now.getHours() === alarmHours && now.getMinutes() === alarmMinutes && alarm.isActive) {\n        // Alarm is ringing, disable it\n        // setAlarmMessage(`Alarm ringing for ${alarm.time12}!`);\n        // return { ...alarm, isActive: false }; // Turn off the alarm after it rings\n      }\n      return alarm; // Return unchanged if the alarm shouldn't ring yet\n    }));\n\n    // Clear the alarm message after 5 seconds\n    setTimeout(() => {\n      setAlarmMessage(\"\");\n    }, 5000);\n  };\n  const handleSetAlarm = () => {\n    if (alarmTime) {\n      const newAlarm = {\n        time24: alarmTime,\n        time12: formatAlarmTime(alarmTime),\n        id: Date.now(),\n        isActive: true\n      };\n      setAlarms(prev => [...prev, newAlarm]);\n      setAlarmMessage(`Alarm set for ${newAlarm.time12}`);\n      setAlarmTime(\"\");\n      setShowForm(false); // Hide form after setting the alarm\n      setShowDeleteButton(true); // Show the delete button when an alarm is set\n\n      // Clear the alarm message after 3 seconds\n      setTimeout(() => {\n        setAlarmMessage(\"\");\n      }, 3000);\n    } else {\n      setAlarmMessage(\"Please enter a valid time\");\n      // Clear the alarm message after 3 seconds\n      setTimeout(() => {\n        setAlarmMessage(\"\");\n      }, 3000);\n    }\n  };\n  const formatAlarmTime = time => {\n    const [hours, minutes] = time.split(\":\").map(Number);\n    const ampm = hours >= 12 ? \"PM\" : \"AM\";\n    const formattedHours = hours % 12 || 12;\n    return `${formattedHours}:${minutes < 10 ? \"0\" + minutes : minutes} ${ampm}`;\n  };\n  const calculateRemainingTime = alarm => {\n    const [alarmHours, alarmMinutes] = alarm.time24.split(\":\").map(Number);\n    const now = new Date();\n    const alarmDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), alarmHours, alarmMinutes);\n    if (alarmDate < now) {\n      alarmDate.setDate(alarmDate.getDate() + 1);\n    }\n    return alarmDate.getTime() - now.getTime(); // Return the difference in milliseconds\n  };\n  const toggleAlarm = id => {\n    setAlarms(prev => prev.map(alarm => {\n      if (alarm.id === id) {\n        const updatedAlarm = {\n          ...alarm,\n          isActive: !alarm.isActive\n        };\n        setAlarmMessage(updatedAlarm.isActive ? `Alarm re-enabled for ${updatedAlarm.time12}` : `Alarm disabled for ${updatedAlarm.time12}`);\n        return updatedAlarm;\n      }\n      return alarm; // Return unchanged if it's not the selected alarm\n    }));\n\n    // Clear the alarm message after 3 seconds\n    setTimeout(() => {\n      setAlarmMessage(\"\");\n    }, 3000);\n  };\n  const toggleCheckbox = id => {\n    setSelectedAlarms(prev => ({\n      ...prev,\n      [id]: !prev[id] // Toggle the selected state for the alarm\n    }));\n  };\n  const deleteSelectedAlarms = () => {\n    const deletedAlarms = alarms.filter(alarm => selectedAlarms[alarm.id]);\n    setAlarms(prev => prev.filter(alarm => !selectedAlarms[alarm.id])); // Delete selected alarms\n    setSelectedAlarms({}); // Clear selected alarms\n    setShowCheckboxes(false); // Hide checkboxes\n\n    if (deletedAlarms.length > 0) {\n      setAlarmMessage(`Deleted ${deletedAlarms.length} selected alarm(s).`);\n    } else {\n      setAlarmMessage(\"No alarms were selected for deletion.\");\n    }\n\n    // Clear the alarm message after 5 seconds\n    setTimeout(() => {\n      setAlarmMessage(\"\");\n    }, 5000);\n  };\n  const handleDeleteClick = () => {\n    if (alarms.length === 0) {\n      setAlarmMessage(\"No alarms were set for deletion.\");\n      setTimeout(() => {\n        setAlarmMessage(\"\");\n      }, 3000);\n    } else if (showCheckboxes) {\n      deleteSelectedAlarms();\n    } else {\n      setShowCheckboxes(true);\n    }\n  };\n  const sortedAlarms = [...alarms].sort((a, b) => calculateRemainingTime(a) - calculateRemainingTime(b));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [alarmMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification\",\n      children: alarmMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 24\n    }, this), ringingAlarmId && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Alarm ringing for \", (_alarms$find = alarms.find(alarm => alarm.id === ringingAlarmId)) === null || _alarms$find === void 0 ? void 0 : _alarms$find.time12, \"!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopAlarm,\n        className: \"stop-button\",\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: snoozeAlarm,\n        className: \"snooze-button\",\n        children: \"Snooze\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timeDisplay\",\n      children: [showAlarmClock && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: currentTime.toLocaleTimeString([], {\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n            second: \"2-digit\",\n            hour12: true\n          }).split(\" \").map((part, index) => index === 1 ? /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"ampm\",\n            children: part\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 21\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"time\",\n            children: part\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            gap: \"10px\",\n            justifyContent: showForm || showDeleteButton && alarms.length > 0 ? \"space-between\" : \"center\"\n          },\n          children: [!showForm && /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => {\n              setShowForm(prev => !prev); // Toggle the form visibility\n              setShowDeleteButton(false);\n            },\n            style: {\n              cursor: \"pointer\",\n              position: \"relative\"\n            },\n            title: \"Add Alarm\" // Tooltip for Add SVG\n            ,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: add,\n              alt: \"Add Alarm\",\n              width: \"50\",\n              height: \"50\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 17\n          }, this), showDeleteButton && alarms.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: handleDeleteClick,\n            style: {\n              cursor: \"pointer\",\n              position: \"relative\"\n            },\n            title: \"Delete Selected Alarms\" // Tooltip for Delete SVG\n            ,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: Delete,\n              alt: \"Delete Selected Alarms\",\n              width: \"50\",\n              height: \"50\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 13\n        }, this), showForm && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"time\",\n            value: alarmTime,\n            onChange: e => setAlarmTime(e.target.value),\n            className: \"input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSetAlarm,\n            className: \"button\",\n            style: {\n              width: \"175px\",\n              height: \"46px\",\n              margin: \"20px\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"space-around\"\n            },\n            children: \"Set Alarm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 15\n        }, this), sortedAlarms.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"alarm-list\",\n          children: /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: sortedAlarms.map(alarm => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"glassy-effect\",\n              style: {\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\",\n                margin: \"10px 0\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  flex: 1,\n                  textAlign: \"left\",\n                  padding: \"0px 100px 0px 0px\",\n                  color: \"white\"\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    fontSize: \"1.5em\",\n                    display: \"flex\",\n                    alignItems: \"baseline\"\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: alarm.time12.split(\" \")[0]\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 380,\n                    columnNumber: 27\n                  }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    style: {\n                      fontSize: \"0.4em\",\n                      marginLeft: \"5px\"\n                    },\n                    children: alarm.time12.split(\" \")[1]\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 381,\n                    columnNumber: 27\n                  }, this), \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 373,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    fontSize: \"0.6em\",\n                    marginTop: \"2px\"\n                  },\n                  children: alarm.isActive ? `Alarm in ${Math.floor(calculateRemainingTime(alarm) / (1000 * 60 * 60))}h ${Math.floor(calculateRemainingTime(alarm) % (1000 * 60 * 60) / (1000 * 60))}m ${Math.floor(calculateRemainingTime(alarm) % (1000 * 60) / 1000)}s` : \"Alarm Disabled\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 385,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 365,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  display: \"flex\",\n                  alignItems: \"center\"\n                },\n                children: showCheckboxes ? /*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"round-checkbox\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: selectedAlarms[alarm.id] || false,\n                    onChange: () => toggleCheckbox(alarm.id),\n                    style: {\n                      display: \"none\"\n                    } // Hide the default checkbox\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 401,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"checkmark\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 407,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 400,\n                  columnNumber: 27\n                }, this) : /*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"switch\",\n                  style: {\n                    marginLeft: \"10px\"\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: alarm.isActive,\n                    onChange: () => toggleAlarm(alarm.id),\n                    style: {\n                      display: \"none\"\n                    } // Hide the default checkbox\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 411,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `slider ${alarm.isActive ? \"\" : \"round\"}`,\n                    style: {\n                      width: \"49px\",\n                      height: \"22px\"\n                    } // Adjust slider size\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 417,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 410,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 398,\n                columnNumber: 23\n              }, this)]\n            }, alarm.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), !showAlarmClock && /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => setShowAlarmClock(true),\n        style: {\n          cursor: \"pointer\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          marginTop: \"20px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: alarm,\n          alt: \"Alarm Clock\",\n          width: \"100\",\n          height: \"100\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 255,\n    columnNumber: 5\n  }, this);\n};\n_s(Alarm, \"VsLcyJT2g/QX9TKhu8MryD5axH0=\");\n_c = Alarm;\nexport default Alarm;\nvar _c;\n$RefreshReg$(_c, \"Alarm\");","map":{"version":3,"names":["React","useState","useEffect","add","Delete","alarm","sound","jsxDEV","_jsxDEV","Fragment","_Fragment","Alarm","_s","_alarms$find","alarmTime","setAlarmTime","alarms","setAlarms","currentTime","setCurrentTime","Date","alarmMessage","setAlarmMessage","showForm","setShowForm","showCheckboxes","setShowCheckboxes","selectedAlarms","setSelectedAlarms","showDeleteButton","setShowDeleteButton","showAlarmClock","setShowAlarmClock","ringingAlarmId","setRingingAlarmId","audio","Audio","interval","setInterval","now","checkAlarms","clearInterval","stopAlarm","prevAlarms","map","id","isActive","snoozeAlarm","hours","minutes","time24","split","Number","snoozedTime","setHours","setMinutes","newTime24","getHours","toString","padStart","getMinutes","alarmHours","alarmMinutes","alarmDate","getFullYear","getMonth","getDate","setDate","prev","snoozeTime","snoozedDate","String","setTimeout","handleSetAlarm","newAlarm","time12","formatAlarmTime","time","ampm","formattedHours","calculateRemainingTime","getTime","toggleAlarm","updatedAlarm","toggleCheckbox","deleteSelectedAlarms","deletedAlarms","filter","length","handleDeleteClick","sortedAlarms","sort","a","b","className","children","fileName","_jsxFileName","lineNumber","columnNumber","find","onClick","toLocaleTimeString","hour","minute","second","hour12","part","index","style","display","gap","justifyContent","cursor","position","title","src","alt","width","height","type","value","onChange","e","target","margin","alignItems","flex","textAlign","padding","color","fontSize","marginLeft","marginTop","Math","floor","checked","_c","$RefreshReg$"],"sources":["/Users/solomonrojer/Desktop/Patrick/Time-Management/src/component/Alarm.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./../style/alarm.css\"; // Ensure your CSS file is correctly linked\nimport add from \"./../img/add.svg\"; // Import your new SVG\nimport Delete from \"./../img/delete.svg\"; // Import your delete SVG\nimport alarm from \"./../img/alarm-plus-svgrepo-com.svg\"; // Import your alarm SVG\nimport sound from \"./../audio/reminder.mp3\"\n\nconst Alarm = () => {\n  const [alarmTime, setAlarmTime] = useState(\"\");\n  const [alarms, setAlarms] = useState([]); // Array to hold all alarms\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [alarmMessage, setAlarmMessage] = useState(\"\"); // Notification message\n  const [showForm, setShowForm] = useState(false); // Control visibility of form\n  const [showCheckboxes, setShowCheckboxes] = useState(false); // Control checkbox display\n  const [selectedAlarms, setSelectedAlarms] = useState({}); // Track selected alarms for deletion\n  const [showDeleteButton, setShowDeleteButton] = useState(false); // New state for delete button visibility\n  const [showAlarmClock, setShowAlarmClock] = useState(false); // State to control visibility of the alarm clock\n  const [ringingAlarmId, setRingingAlarmId] = useState(null); \n  const audio = new Audio(sound); // Create audio instance\n\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const now = new Date();\n      setCurrentTime(now);\n      checkAlarms(now); // Pass current time to check alarms\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [alarms]); // Only depend on alarms\n\n  // Function to stop the alarm\nconst stopAlarm = () => {\n  setAlarms((prevAlarms) =>\n    prevAlarms.map((alarm) => {\n      if (alarm.id === ringingAlarmId) {\n        return { ...alarm, isActive: false }; // Deactivate the ringing alarm\n      }\n      return alarm;\n    })\n  );\n  setRingingAlarmId(null); // Clear the ringing alarm ID\n};\n\n// Function to snooze the alarm for 5 minutes\nconst snoozeAlarm = () => {\n  setAlarms((prevAlarms) =>\n    prevAlarms.map((alarm) => {\n      if (alarm.id === ringingAlarmId) {\n        const [hours, minutes] = alarm.time24.split(\":\").map(Number);\n        const snoozedTime = new Date();\n        snoozedTime.setHours(hours);\n        snoozedTime.setMinutes(minutes + 5);\n        const newTime24 = `${snoozedTime.getHours().toString().padStart(2, \"0\")}:${snoozedTime.getMinutes().toString().padStart(2, \"0\")}`;\n        return { ...alarm, time24: newTime24 };\n      }\n      return alarm;\n    })\n  );\n  setRingingAlarmId(null);\n};\n\n  const checkAlarms = (now) => {\n    setAlarms((prevAlarms) =>\n      prevAlarms.map((alarm) => {\n        const [alarmHours, alarmMinutes] = alarm.time24.split(\":\").map(Number);\n        const alarmDate = new Date(\n          now.getFullYear(),\n          now.getMonth(),\n          now.getDate(),\n          alarmHours,\n          alarmMinutes\n        );\n  \n        if (\n          now.getHours() === alarmHours &&\n          now.getMinutes() === alarmMinutes &&\n          alarm.isActive\n        ) {\n          setRingingAlarmId(alarm.id);\n        }\n\n        if (alarmDate < now) {\n          alarmDate.setDate(alarmDate.getDate() + 1); // Set for the next day if time has passed\n        }\n\n        const stopAlarm = () => {\n          setAlarms((prev) =>\n            prev.map((alarm) =>\n              alarm.id === ringingAlarmId ? { ...alarm, isActive: false } : alarm\n            )\n          );\n          setRingingAlarmId(null); // Reset the ringing alarm\n        };\n\n        const snoozeAlarm = () => {\n          const snoozeTime = 5; // Snooze for 5 minutes\n          setAlarms((prev) =>\n            prev.map((alarm) => {\n              if (alarm.id === ringingAlarmId) {\n                const [hours, minutes] = alarm.time24.split(\":\").map(Number);\n                const snoozedDate = new Date();\n                snoozedDate.setHours(hours);\n                snoozedDate.setMinutes(minutes + snoozeTime);\n                const newTime24 = `${String(snoozedDate.getHours()).padStart(2, \"0\")}:${String(\n                  snoozedDate.getMinutes()\n                ).padStart(2, \"0\")}`;\n      \n                return { ...alarm, time24: newTime24 };\n              }\n              return alarm;\n            })\n          );\n          setRingingAlarmId(null); // Reset the ringing alarm\n        };\n\n        // Check if the alarm should ring\n        if (\n          now.getHours() === alarmHours &&\n          now.getMinutes() === alarmMinutes &&\n          alarm.isActive\n        ) {\n          // Alarm is ringing, disable it\n          // setAlarmMessage(`Alarm ringing for ${alarm.time12}!`);\n          // return { ...alarm, isActive: false }; // Turn off the alarm after it rings\n        }\n\n        return alarm; // Return unchanged if the alarm shouldn't ring yet\n      })\n    );\n\n    // Clear the alarm message after 5 seconds\n    setTimeout(() => {\n      setAlarmMessage(\"\");\n    }, 5000);\n  };\n\n  const handleSetAlarm = () => {\n    if (alarmTime) {\n      const newAlarm = {\n        time24: alarmTime,\n        time12: formatAlarmTime(alarmTime),\n        id: Date.now(),\n        isActive: true,\n      };\n      setAlarms((prev) => [...prev, newAlarm]);\n      setAlarmMessage(`Alarm set for ${newAlarm.time12}`);\n      setAlarmTime(\"\");\n      setShowForm(false); // Hide form after setting the alarm\n      setShowDeleteButton(true); // Show the delete button when an alarm is set\n\n      // Clear the alarm message after 3 seconds\n      setTimeout(() => {\n        setAlarmMessage(\"\");\n      }, 3000);\n    } else {\n      setAlarmMessage(\"Please enter a valid time\");\n      // Clear the alarm message after 3 seconds\n      setTimeout(() => {\n        setAlarmMessage(\"\");\n      }, 3000);\n    }\n  };\n\n  const formatAlarmTime = (time) => {\n    const [hours, minutes] = time.split(\":\").map(Number);\n    const ampm = hours >= 12 ? \"PM\" : \"AM\";\n    const formattedHours = hours % 12 || 12;\n    return `${formattedHours}:${minutes < 10 ? \"0\" + minutes : minutes} ${ampm}`;\n  };\n\n  const calculateRemainingTime = (alarm) => {\n    const [alarmHours, alarmMinutes] = alarm.time24.split(\":\").map(Number);\n    const now = new Date();\n    const alarmDate = new Date(\n      now.getFullYear(),\n      now.getMonth(),\n      now.getDate(),\n      alarmHours,\n      alarmMinutes\n    );\n\n    if (alarmDate < now) {\n      alarmDate.setDate(alarmDate.getDate() + 1);\n    }\n\n    return alarmDate.getTime() - now.getTime(); // Return the difference in milliseconds\n  };\n\n  const toggleAlarm = (id) => {\n    setAlarms((prev) =>\n      prev.map((alarm) => {\n        if (alarm.id === id) {\n          const updatedAlarm = { ...alarm, isActive: !alarm.isActive };\n          setAlarmMessage(\n            updatedAlarm.isActive\n              ? `Alarm re-enabled for ${updatedAlarm.time12}`\n              : `Alarm disabled for ${updatedAlarm.time12}`\n          );\n          return updatedAlarm;\n        }\n        return alarm; // Return unchanged if it's not the selected alarm\n      })\n    );\n\n    // Clear the alarm message after 3 seconds\n    setTimeout(() => {\n      setAlarmMessage(\"\");\n    }, 3000);\n  };\n\n  const toggleCheckbox = (id) => {\n    setSelectedAlarms((prev) => ({\n      ...prev,\n      [id]: !prev[id], // Toggle the selected state for the alarm\n    }));\n  };\n\n  const deleteSelectedAlarms = () => {\n    const deletedAlarms = alarms.filter((alarm) => selectedAlarms[alarm.id]);\n    setAlarms((prev) => prev.filter((alarm) => !selectedAlarms[alarm.id])); // Delete selected alarms\n    setSelectedAlarms({}); // Clear selected alarms\n    setShowCheckboxes(false); // Hide checkboxes\n\n    if (deletedAlarms.length > 0) {\n      setAlarmMessage(`Deleted ${deletedAlarms.length} selected alarm(s).`);\n    } else {\n      setAlarmMessage(\"No alarms were selected for deletion.\");\n    }\n\n    // Clear the alarm message after 5 seconds\n    setTimeout(() => {\n      setAlarmMessage(\"\");\n    }, 5000);\n  };\n\n  const handleDeleteClick = () => {\n    if (alarms.length === 0) {\n      setAlarmMessage(\"No alarms were set for deletion.\");\n      setTimeout(() => {\n        setAlarmMessage(\"\");\n      }, 3000);\n    } else if (showCheckboxes) {\n      deleteSelectedAlarms();\n    } else {\n      setShowCheckboxes(true);\n    }\n  };\n\n  const sortedAlarms = [...alarms].sort(\n    (a, b) => calculateRemainingTime(a) - calculateRemainingTime(b)\n  );\n\n  return (\n    <div className=\"container\">\n      {alarmMessage && <div className=\"notification\">{alarmMessage}</div>}\n\n      {ringingAlarmId && (\n    <div className=\"notification\">\n        <p>Alarm ringing for {alarms.find(alarm => alarm.id === ringingAlarmId)?.time12}!</p>\n        <button onClick={stopAlarm} className=\"stop-button\">Stop</button>\n        <button onClick={snoozeAlarm} className=\"snooze-button\">Snooze</button>\n    </div>\n)}\n\n      <div className=\"timeDisplay\">\n        {showAlarmClock && (\n          <>\n            <h4>\n              {currentTime\n                .toLocaleTimeString([], {\n                  hour: \"2-digit\",\n                  minute: \"2-digit\",\n                  second: \"2-digit\",\n                  hour12: true,\n                })\n                .split(\" \")\n                .map((part, index) =>\n                  index === 1 ? (\n                    <span key={index} className=\"ampm\">\n                      {part}\n                    </span>\n                  ) : (\n                    <span key={index} className=\"time\">\n                      {part}\n                    </span>\n                  )\n                )}\n            </h4>\n            <div\n              style={{\n                display: \"flex\",\n                gap: \"10px\",\n                justifyContent: showForm || (showDeleteButton && alarms.length > 0) ? \"space-between\" : \"center\",\n              }}\n            >\n              {/* Show Add Alarm SVG if the time picker is not showing */}\n              {!showForm && (\n                <div\n                  onClick={() => {\n                    setShowForm((prev) => !prev); // Toggle the form visibility\n                    setShowDeleteButton(false);\n                  }}\n                  style={{ cursor: \"pointer\", position: \"relative\" }}\n                  title=\"Add Alarm\" // Tooltip for Add SVG\n                >\n                  <img src={add} alt=\"Add Alarm\" width=\"50\" height=\"50\" />\n                </div>\n              )}\n\n              {/* Show Delete button only if there are alarms and showDeleteButton is true */}\n              {showDeleteButton && alarms.length > 0 && (\n                <div\n                  onClick={handleDeleteClick}\n                  style={{ cursor: \"pointer\", position: \"relative\" }}\n                  title=\"Delete Selected Alarms\" // Tooltip for Delete SVG\n                >\n                  <img\n                    src={Delete}\n                    alt=\"Delete Selected Alarms\"\n                    width=\"50\"\n                    height=\"50\"\n                  />\n                </div>\n              )}\n            </div>\n            {showForm && (\n              <div className=\"button-container\">\n                <input\n                  type=\"time\"\n                  value={alarmTime}\n                  onChange={(e) => setAlarmTime(e.target.value)}\n                  className=\"input\"\n                />\n                <button\n                  onClick={handleSetAlarm}\n                  className=\"button\"\n                  style={{\n                    width: \"175px\",\n                    height: \"46px\",\n                    margin: \"20px\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"space-around\",\n                  }}\n                >\n                  Set Alarm\n                </button>\n              </div>\n            )}\n            {sortedAlarms.length > 0 && (\n              <div className=\"alarm-list\">\n                <ul>\n                  {sortedAlarms.map((alarm) => (\n                    <li\n                      key={alarm.id}\n                      className=\"glassy-effect\"\n                      style={{\n                        display: \"flex\",\n                        justifyContent: \"space-between\",\n                        alignItems: \"center\",\n                        margin: \"10px 0\",\n                      }}\n                    >\n                      <div\n                        style={{\n                          flex: 1,\n                          textAlign: \"left\",\n                          padding: \"0px 100px 0px 0px\",\n                          color: \"white\"\n                        }}\n                      >\n                        <div\n                          style={{\n                            fontSize: \"1.5em\",\n                            display: \"flex\",\n                            alignItems: \"baseline\",\n                          }}\n                        >\n                          <span>{alarm.time12.split(\" \")[0]}</span>{\" \"}\n                          <span style={{ fontSize: \"0.4em\", marginLeft: \"5px\" }}>\n                            {alarm.time12.split(\" \")[1]}\n                          </span>{\" \"}\n                        </div>\n                        <div style={{ fontSize: \"0.6em\", marginTop: \"2px\" }}>\n                          {alarm.isActive\n                            ? `Alarm in ${Math.floor(\n                              calculateRemainingTime(alarm) / (1000 * 60 * 60)\n                            )}h ${Math.floor(\n                              (calculateRemainingTime(alarm) % (1000 * 60 * 60)) /\n                              (1000 * 60)\n                            )}m ${Math.floor(\n                              (calculateRemainingTime(alarm) % (1000 * 60)) / 1000\n                            )}s`\n                            : \"Alarm Disabled\"}\n                        </div>\n                      </div>\n                      <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                        {showCheckboxes ? (\n                          <label className=\"round-checkbox\">\n                            <input\n                              type=\"checkbox\"\n                              checked={selectedAlarms[alarm.id] || false}\n                              onChange={() => toggleCheckbox(alarm.id)}\n                              style={{ display: \"none\" }} // Hide the default checkbox\n                            />\n                            <span className=\"checkmark\"></span>\n                          </label>\n                        ) : (\n                          <label className=\"switch\" style={{ marginLeft: \"10px\" }}>\n                            <input\n                              type=\"checkbox\"\n                              checked={alarm.isActive}\n                              onChange={() => toggleAlarm(alarm.id)}\n                              style={{ display: \"none\" }} // Hide the default checkbox\n                            />\n                            <span\n                              className={`slider ${alarm.isActive ? \"\" : \"round\"}`}\n                              style={{ width: \"49px\", height: \"22px\" }} // Adjust slider size\n                            ></span>\n                          </label>\n                        )}\n                      </div>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            )}\n          </>\n        )}\n\n        {/* Show only the alarm SVG initially */}\n        {!showAlarmClock && (\n          <div\n            onClick={() => setShowAlarmClock(true)}\n            style={{ cursor: \"pointer\", display: \"flex\", justifyContent: \"center\", marginTop: \"20px\" }}\n          >\n            <img src={alarm} alt=\"Alarm Clock\" width=\"100\" height=\"100\" />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Alarm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}