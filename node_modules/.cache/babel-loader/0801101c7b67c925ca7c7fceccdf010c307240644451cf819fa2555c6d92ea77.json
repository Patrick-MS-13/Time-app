{"ast":null,"code":"var _jsxFileName = \"/Users/solomonrojer/Desktop/Patrick/Project/mini-project/src/component/Alarm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./../style/alarm.css\"; // Ensure your CSS file is correctly linked\nimport add from \"./../img/add.svg\"; // Import your new SVG\nimport Delete from \"./../img/delete.svg\"; // Import your delete SVG\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Alarm = () => {\n  _s();\n  const [alarmTime, setAlarmTime] = useState(\"\");\n  const [alarms, setAlarms] = useState([]); // Array to hold all alarms\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [alarmMessage, setAlarmMessage] = useState(\"\"); // Notification message\n  const [showForm, setShowForm] = useState(false); // Control visibility of form\n  const [showCheckboxes, setShowCheckboxes] = useState(false); // Control checkbox display\n  const [selectedAlarms, setSelectedAlarms] = useState({}); // Track selected alarms for deletion\n  const [showDeleteButton, setShowDeleteButton] = useState(false); // New state for delete button visibility\n  const [hideTitle, setHideTitle] = useState(false); // New state to hide the title permanently\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const now = new Date();\n      setCurrentTime(now);\n      checkAlarms(now); // Pass current time to check alarms\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [alarms]); // Only depend on alarms\n\n  const checkAlarms = now => {\n    setAlarms(prevAlarms => prevAlarms.map(alarm => {\n      const [alarmHours, alarmMinutes] = alarm.time24.split(\":\").map(Number);\n      const alarmDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), alarmHours, alarmMinutes);\n      if (alarmDate < now) {\n        alarmDate.setDate(alarmDate.getDate() + 1); // Set for the next day if time has passed\n      }\n\n      // Check if the alarm should ring\n      if (now.getHours() === alarmHours && now.getMinutes() === alarmMinutes && alarm.isActive) {\n        // Alarm is ringing, disable it\n        setAlarmMessage(`Alarm ringing for ${alarm.time12}!`);\n        return {\n          ...alarm,\n          isActive: false\n        }; // Turn off the alarm after it rings\n      }\n      return alarm; // Return unchanged if the alarm shouldn't ring yet\n    }));\n\n    // Clear the alarm message after 5 seconds\n    setTimeout(() => {\n      setAlarmMessage(\"\");\n    }, 5000);\n  };\n  const handleSetAlarm = () => {\n    if (alarmTime) {\n      const newAlarm = {\n        time24: alarmTime,\n        time12: formatAlarmTime(alarmTime),\n        id: Date.now(),\n        isActive: true\n      };\n      setAlarms(prev => [...prev, newAlarm]);\n      setAlarmMessage(`Alarm set for ${newAlarm.time12}`);\n      setAlarmTime(\"\");\n      setShowForm(false); // Hide form after setting the alarm\n      setShowDeleteButton(true); // Show the delete button when an alarm is set\n\n      // Clear the alarm message after 3 seconds\n      setTimeout(() => {\n        setAlarmMessage(\"\");\n      }, 3000);\n    } else {\n      setAlarmMessage(\"Please enter a valid time\");\n      // Clear the alarm message after 3 seconds\n      setTimeout(() => {\n        setAlarmMessage(\"\");\n      }, 3000);\n    }\n  };\n  const formatAlarmTime = time => {\n    const [hours, minutes] = time.split(\":\").map(Number);\n    const ampm = hours >= 12 ? \"PM\" : \"AM\";\n    const formattedHours = hours % 12 || 12;\n    return `${formattedHours}:${minutes < 10 ? \"0\" + minutes : minutes} ${ampm}`;\n  };\n  const calculateRemainingTime = alarm => {\n    const [alarmHours, alarmMinutes] = alarm.time24.split(\":\").map(Number);\n    const now = new Date();\n    const alarmDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), alarmHours, alarmMinutes);\n    if (alarmDate < now) {\n      alarmDate.setDate(alarmDate.getDate() + 1);\n    }\n    return alarmDate.getTime() - now.getTime(); // Return the difference in milliseconds\n  };\n  const toggleAlarm = id => {\n    setAlarms(prev => prev.map(alarm => {\n      if (alarm.id === id) {\n        const updatedAlarm = {\n          ...alarm,\n          isActive: !alarm.isActive\n        };\n        setAlarmMessage(updatedAlarm.isActive ? `Alarm re-enabled for ${updatedAlarm.time12}` : `Alarm disabled for ${updatedAlarm.time12}`);\n        return updatedAlarm;\n      }\n      return alarm; // Return unchanged if it's not the selected alarm\n    }));\n\n    // Clear the alarm message after 3 seconds\n    setTimeout(() => {\n      setAlarmMessage(\"\");\n    }, 3000);\n  };\n  const toggleCheckbox = id => {\n    setSelectedAlarms(prev => ({\n      ...prev,\n      [id]: !prev[id] // Toggle the selected state for the alarm\n    }));\n  };\n  const deleteSelectedAlarms = () => {\n    const deletedAlarms = alarms.filter(alarm => selectedAlarms[alarm.id]);\n    setAlarms(prev => prev.filter(alarm => !selectedAlarms[alarm.id])); // Delete selected alarms\n    setSelectedAlarms({}); // Clear selected alarms\n    setShowCheckboxes(false); // Hide checkboxes\n\n    if (deletedAlarms.length > 0) {\n      setAlarmMessage(`Deleted ${deletedAlarms.length} selected alarm(s).`);\n    } else {\n      setAlarmMessage(\"No alarms were selected for deletion.\");\n    }\n\n    // Clear the alarm message after 5 seconds\n    setTimeout(() => {\n      setAlarmMessage(\"\");\n    }, 5000);\n  };\n  const handleDeleteClick = () => {\n    if (alarms.length === 0) {\n      // If no alarms are present, show the \"No alarms were set for deletion\" message\n      setAlarmMessage(\"No alarms were set for deletion.\");\n\n      // Clear the message after 3 seconds\n      setTimeout(() => {\n        setAlarmMessage(\"\");\n      }, 3000);\n    } else if (showCheckboxes) {\n      // If checkboxes are already visible, directly delete the selected alarms\n      deleteSelectedAlarms();\n    } else {\n      // If checkboxes are not visible, show them without any additional messages\n      setShowCheckboxes(true);\n    }\n  };\n  const sortedAlarms = [...alarms].sort((a, b) => calculateRemainingTime(a) - calculateRemainingTime(b));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [alarmMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification\",\n      children: alarmMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 24\n    }, this), !hideTitle && /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"glassy-title\",\n      children: \"Alarm Clock\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timeDisplay\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: currentTime.toLocaleTimeString([], {\n          hour: \"2-digit\",\n          minute: \"2-digit\",\n          second: \"2-digit\",\n          // Include seconds\n          hour12: true\n        }).split(\" \").map((part, index) => index === 1 ? /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"ampm\",\n          children: part\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 17\n        }, this) // Apply the ampm class to the AM/PM text\n        : /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"time\",\n          children: part\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 17\n        }, this) // Default span for the time\n        )\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          gap: \"10px\",\n          justifyContent: showDeleteButton ? \"space-between\" : \"center\" // Center until delete button appears\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => {\n            setShowForm(true); // Show the form\n            setShowDeleteButton(false); // Hide delete button initially\n            setHideTitle(true); // Hide title permanently until page refresh\n          } // When clicked, hide the \"Alarm Clock\" text\n          ,\n          style: {\n            cursor: \"pointer\",\n            position: \"relative\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: add,\n            alt: \"Add Alarm\",\n            width: \"50\",\n            height: \"50\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this), showDeleteButton &&\n        /*#__PURE__*/\n        // Conditionally render delete button based on showDeleteButton state\n        _jsxDEV(\"div\", {\n          onClick: handleDeleteClick // Use the handleDeleteClick function\n          ,\n          style: {\n            cursor: \"pointer\",\n            position: \"relative\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: Delete,\n            alt: \"Delete Selected Alarms\",\n            width: \"50\",\n            height: \"50\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), showForm && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"time\",\n        value: alarmTime,\n        onChange: e => setAlarmTime(e.target.value),\n        className: \"input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSetAlarm,\n        className: \"button\",\n        children: \"Set Alarm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 9\n    }, this), sortedAlarms.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alarm-list\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: sortedAlarms.map(alarm => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"glassy-effect\",\n          style: {\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            margin: \"10px 0\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              flex: 1,\n              textAlign: \"left\",\n              padding: \"0px 100px 0px 0px\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                fontSize: \"1.5em\",\n                display: \"flex\",\n                alignItems: \"baseline\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: alarm.time12.split(\" \")[0]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 291,\n                columnNumber: 21\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  fontSize: \"0.4em\",\n                  marginLeft: \"5px\"\n                },\n                children: alarm.time12.split(\" \")[1]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 292,\n                columnNumber: 21\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                fontSize: \"0.6em\",\n                marginTop: \"2px\"\n              },\n              children: alarm.isActive ? `Alarm in ${Math.floor(calculateRemainingTime(alarm) / (1000 * 60 * 60))}h ${Math.floor(calculateRemainingTime(alarm) % (1000 * 60 * 60) / (1000 * 60))}m ${Math.floor(calculateRemainingTime(alarm) % (1000 * 60) / 1000)}s` : \"Alarm Disabled\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\",\n              alignItems: \"center\"\n            },\n            children: showCheckboxes ? /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"round-checkbox\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: selectedAlarms[alarm.id] || false,\n                onChange: () => toggleCheckbox(alarm.id),\n                style: {\n                  display: \"none\"\n                } // Hide the default checkbox\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 312,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"checkmark\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 318,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"switch\",\n              style: {\n                marginLeft: \"10px\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: alarm.isActive,\n                onChange: () => toggleAlarm(alarm.id),\n                style: {\n                  display: \"none\"\n                } // Hide the default checkbox\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 322,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: `slider ${alarm.isActive ? \"\" : \"round\"}`,\n                style: {\n                  width: \"49px\",\n                  height: \"22px\"\n                } // Adjust slider size\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 328,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 17\n          }, this)]\n        }, alarm.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 5\n  }, this);\n};\n_s(Alarm, \"0kV6RvqdeHq+n5Ki5YqWG/doKnw=\");\n_c = Alarm;\nexport default Alarm;\nvar _c;\n$RefreshReg$(_c, \"Alarm\");","map":{"version":3,"names":["React","useState","useEffect","add","Delete","jsxDEV","_jsxDEV","Alarm","_s","alarmTime","setAlarmTime","alarms","setAlarms","currentTime","setCurrentTime","Date","alarmMessage","setAlarmMessage","showForm","setShowForm","showCheckboxes","setShowCheckboxes","selectedAlarms","setSelectedAlarms","showDeleteButton","setShowDeleteButton","hideTitle","setHideTitle","interval","setInterval","now","checkAlarms","clearInterval","prevAlarms","map","alarm","alarmHours","alarmMinutes","time24","split","Number","alarmDate","getFullYear","getMonth","getDate","setDate","getHours","getMinutes","isActive","time12","setTimeout","handleSetAlarm","newAlarm","formatAlarmTime","id","prev","time","hours","minutes","ampm","formattedHours","calculateRemainingTime","getTime","toggleAlarm","updatedAlarm","toggleCheckbox","deleteSelectedAlarms","deletedAlarms","filter","length","handleDeleteClick","sortedAlarms","sort","a","b","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleTimeString","hour","minute","second","hour12","part","index","style","display","gap","justifyContent","onClick","cursor","position","src","alt","width","height","type","value","onChange","e","target","alignItems","margin","flex","textAlign","padding","fontSize","marginLeft","marginTop","Math","floor","checked","_c","$RefreshReg$"],"sources":["/Users/solomonrojer/Desktop/Patrick/Project/mini-project/src/component/Alarm.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./../style/alarm.css\"; // Ensure your CSS file is correctly linked\nimport add from \"./../img/add.svg\"; // Import your new SVG\nimport Delete from \"./../img/delete.svg\"; // Import your delete SVG\n\nconst Alarm = () => {\n  const [alarmTime, setAlarmTime] = useState(\"\");\n  const [alarms, setAlarms] = useState([]); // Array to hold all alarms\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [alarmMessage, setAlarmMessage] = useState(\"\"); // Notification message\n  const [showForm, setShowForm] = useState(false); // Control visibility of form\n  const [showCheckboxes, setShowCheckboxes] = useState(false); // Control checkbox display\n  const [selectedAlarms, setSelectedAlarms] = useState({}); // Track selected alarms for deletion\n  const [showDeleteButton, setShowDeleteButton] = useState(false); // New state for delete button visibility\n  const [hideTitle, setHideTitle] = useState(false); // New state to hide the title permanently\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const now = new Date();\n      setCurrentTime(now);\n      checkAlarms(now); // Pass current time to check alarms\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [alarms]); // Only depend on alarms\n\n  const checkAlarms = (now) => {\n    setAlarms((prevAlarms) =>\n      prevAlarms.map((alarm) => {\n        const [alarmHours, alarmMinutes] = alarm.time24.split(\":\").map(Number);\n        const alarmDate = new Date(\n          now.getFullYear(),\n          now.getMonth(),\n          now.getDate(),\n          alarmHours,\n          alarmMinutes\n        );\n\n        if (alarmDate < now) {\n          alarmDate.setDate(alarmDate.getDate() + 1); // Set for the next day if time has passed\n        }\n\n        // Check if the alarm should ring\n        if (\n          now.getHours() === alarmHours &&\n          now.getMinutes() === alarmMinutes &&\n          alarm.isActive\n        ) {\n          // Alarm is ringing, disable it\n          setAlarmMessage(`Alarm ringing for ${alarm.time12}!`);\n          return { ...alarm, isActive: false }; // Turn off the alarm after it rings\n        }\n\n        return alarm; // Return unchanged if the alarm shouldn't ring yet\n      })\n    );\n\n    // Clear the alarm message after 5 seconds\n    setTimeout(() => {\n      setAlarmMessage(\"\");\n    }, 5000);\n  };\n\n  const handleSetAlarm = () => {\n    if (alarmTime) {\n      const newAlarm = {\n        time24: alarmTime,\n        time12: formatAlarmTime(alarmTime),\n        id: Date.now(),\n        isActive: true,\n      };\n      setAlarms((prev) => [...prev, newAlarm]);\n      setAlarmMessage(`Alarm set for ${newAlarm.time12}`);\n      setAlarmTime(\"\");\n      setShowForm(false); // Hide form after setting the alarm\n      setShowDeleteButton(true); // Show the delete button when an alarm is set\n\n      // Clear the alarm message after 3 seconds\n      setTimeout(() => {\n        setAlarmMessage(\"\");\n      }, 3000);\n    } else {\n      setAlarmMessage(\"Please enter a valid time\");\n      // Clear the alarm message after 3 seconds\n      setTimeout(() => {\n        setAlarmMessage(\"\");\n      }, 3000);\n    }\n  };\n\n  const formatAlarmTime = (time) => {\n    const [hours, minutes] = time.split(\":\").map(Number);\n    const ampm = hours >= 12 ? \"PM\" : \"AM\";\n    const formattedHours = hours % 12 || 12;\n    return `${formattedHours}:${\n      minutes < 10 ? \"0\" + minutes : minutes\n    } ${ampm}`;\n  };\n\n  const calculateRemainingTime = (alarm) => {\n    const [alarmHours, alarmMinutes] = alarm.time24.split(\":\").map(Number);\n    const now = new Date();\n    const alarmDate = new Date(\n      now.getFullYear(),\n      now.getMonth(),\n      now.getDate(),\n      alarmHours,\n      alarmMinutes\n    );\n\n    if (alarmDate < now) {\n      alarmDate.setDate(alarmDate.getDate() + 1);\n    }\n\n    return alarmDate.getTime() - now.getTime(); // Return the difference in milliseconds\n  };\n\n  const toggleAlarm = (id) => {\n    setAlarms((prev) =>\n      prev.map((alarm) => {\n        if (alarm.id === id) {\n          const updatedAlarm = { ...alarm, isActive: !alarm.isActive };\n          setAlarmMessage(\n            updatedAlarm.isActive\n              ? `Alarm re-enabled for ${updatedAlarm.time12}`\n              : `Alarm disabled for ${updatedAlarm.time12}`\n          );\n          return updatedAlarm;\n        }\n        return alarm; // Return unchanged if it's not the selected alarm\n      })\n    );\n\n    // Clear the alarm message after 3 seconds\n    setTimeout(() => {\n      setAlarmMessage(\"\");\n    }, 3000);\n  };\n\n  const toggleCheckbox = (id) => {\n    setSelectedAlarms((prev) => ({\n      ...prev,\n      [id]: !prev[id], // Toggle the selected state for the alarm\n    }));\n  };\n\n  const deleteSelectedAlarms = () => {\n    const deletedAlarms = alarms.filter((alarm) => selectedAlarms[alarm.id]);\n    setAlarms((prev) => prev.filter((alarm) => !selectedAlarms[alarm.id])); // Delete selected alarms\n    setSelectedAlarms({}); // Clear selected alarms\n    setShowCheckboxes(false); // Hide checkboxes\n\n    if (deletedAlarms.length > 0) {\n      setAlarmMessage(`Deleted ${deletedAlarms.length} selected alarm(s).`);\n    } else {\n      setAlarmMessage(\"No alarms were selected for deletion.\");\n    }\n\n    // Clear the alarm message after 5 seconds\n    setTimeout(() => {\n      setAlarmMessage(\"\");\n    }, 5000);\n  };\n\n  const handleDeleteClick = () => {\n    if (alarms.length === 0) {\n      // If no alarms are present, show the \"No alarms were set for deletion\" message\n      setAlarmMessage(\"No alarms were set for deletion.\");\n\n      // Clear the message after 3 seconds\n      setTimeout(() => {\n        setAlarmMessage(\"\");\n      }, 3000);\n    } else if (showCheckboxes) {\n      // If checkboxes are already visible, directly delete the selected alarms\n      deleteSelectedAlarms();\n    } else {\n      // If checkboxes are not visible, show them without any additional messages\n      setShowCheckboxes(true);\n    }\n  };\n\n  const sortedAlarms = [...alarms].sort(\n    (a, b) => calculateRemainingTime(a) - calculateRemainingTime(b)\n  );\n\n  return (\n    <div className=\"container\">\n      {alarmMessage && <div className=\"notification\">{alarmMessage}</div>}\n\n      {/* Conditionally hide the \"Alarm Clock\" text if hideTitle is true */}\n      {!hideTitle && <h2 className=\"glassy-title\">Alarm Clock</h2>}\n\n      <div className=\"timeDisplay\">\n        <h4>\n          {currentTime\n            .toLocaleTimeString([], {\n              hour: \"2-digit\",\n              minute: \"2-digit\",\n              second: \"2-digit\", // Include seconds\n              hour12: true,\n            })\n            .split(\" \")\n            .map((part, index) =>\n              index === 1 ? (\n                <span key={index} className=\"ampm\">\n                  {part}\n                </span> // Apply the ampm class to the AM/PM text\n              ) : (\n                <span key={index} className=\"time\">\n                  {part}\n                </span> // Default span for the time\n              )\n            )}\n        </h4>\n        <div\n          style={{\n            display: \"flex\",\n            gap: \"10px\",\n            justifyContent: showDeleteButton ? \"space-between\" : \"center\", // Center until delete button appears\n          }}\n        >\n          <div\n            onClick={() => {\n              setShowForm(true); // Show the form\n              setShowDeleteButton(false); // Hide delete button initially\n              setHideTitle(true); // Hide title permanently until page refresh\n            }} // When clicked, hide the \"Alarm Clock\" text\n            style={{ cursor: \"pointer\", position: \"relative\" }}\n          >\n            <img src={add} alt=\"Add Alarm\" width=\"50\" height=\"50\" />\n          </div>\n          {showDeleteButton && ( // Conditionally render delete button based on showDeleteButton state\n            <div\n              onClick={handleDeleteClick} // Use the handleDeleteClick function\n              style={{ cursor: \"pointer\", position: \"relative\" }}\n            >\n              <img\n                src={Delete}\n                alt=\"Delete Selected Alarms\"\n                width=\"50\"\n                height=\"50\"\n              />\n            </div>\n          )}\n        </div>\n      </div>\n\n      {showForm && (\n        <div>\n          <input\n            type=\"time\"\n            value={alarmTime}\n            onChange={(e) => setAlarmTime(e.target.value)}\n            className=\"input\"\n          />\n          <button onClick={handleSetAlarm} className=\"button\">\n            Set Alarm\n          </button>\n        </div>\n      )}\n\n      {sortedAlarms.length > 0 && (\n        <div className=\"alarm-list\">\n          <ul>\n            {sortedAlarms.map((alarm) => (\n              <li\n                key={alarm.id}\n                className=\"glassy-effect\"\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"space-between\",\n                  alignItems: \"center\",\n                  margin: \"10px 0\",\n                }}\n              >\n                <div\n                  style={{\n                    flex: 1,\n                    textAlign: \"left\",\n                    padding: \"0px 100px 0px 0px\",\n                  }}\n                >\n                  <div\n                    style={{\n                      fontSize: \"1.5em\",\n                      display: \"flex\",\n                      alignItems: \"baseline\",\n                    }}\n                  >\n                    <span>{alarm.time12.split(\" \")[0]}</span>{\" \"}\n                    <span style={{ fontSize: \"0.4em\", marginLeft: \"5px\" }}>\n                      {alarm.time12.split(\" \")[1]}\n                    </span>{\" \"}\n                  </div>\n                  <div style={{ fontSize: \"0.6em\", marginTop: \"2px\" }}>\n                    {alarm.isActive\n                      ? `Alarm in ${Math.floor(\n                          calculateRemainingTime(alarm) / (1000 * 60 * 60)\n                        )}h ${Math.floor(\n                          (calculateRemainingTime(alarm) % (1000 * 60 * 60)) /\n                            (1000 * 60)\n                        )}m ${Math.floor(\n                          (calculateRemainingTime(alarm) % (1000 * 60)) / 1000\n                        )}s`\n                      : \"Alarm Disabled\"}\n                  </div>\n                </div>\n                <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                  {showCheckboxes ? (\n                    <label className=\"round-checkbox\">\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedAlarms[alarm.id] || false}\n                        onChange={() => toggleCheckbox(alarm.id)}\n                        style={{ display: \"none\" }} // Hide the default checkbox\n                      />\n                      <span className=\"checkmark\"></span>\n                    </label>\n                  ) : (\n                    <label className=\"switch\" style={{ marginLeft: \"10px\" }}>\n                      <input\n                        type=\"checkbox\"\n                        checked={alarm.isActive}\n                        onChange={() => toggleAlarm(alarm.id)}\n                        style={{ display: \"none\" }} // Hide the default checkbox\n                      />\n                      <span\n                        className={`slider ${alarm.isActive ? \"\" : \"round\"}`}\n                        style={{ width: \"49px\", height: \"22px\" }} // Adjust slider size\n                      ></span>\n                    </label>\n                  )}\n                </div>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Alarm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}